<div class="delivery-review-page">
  <div class="page-header mb-3">
    <h2>ðŸšš Delivery Review</h2>
    <p class="text-muted">Track and analyze delivery performance and customer delivery details</p>
  </div>

  <div class="filter-section card mb-3" data-enhanced-selects>
    <div class="card-body">
      <form id="deliveryReviewFilters" class="row g-3">
        <div class="col-md-4">
          <label class="form-label">Select Customer</label>
          <select id="filterCustomer" class="form-select">
            <option value="all" selected>All Customers</option>
            <% @customers.each do |c| %>
              <option value="<%= c.id %>"><%= c.name %> - <%= c.phone_number %> (<%= c.member_id %>)</option>
            <% end %>
          </select>
        </div>

        <div class="col-md-3">
          <label class="form-label">Date Range</label>
          <select id="filterDate" class="form-select">
            <option value="monthly" selected>Monthly</option>
            <option value="weekly">Weekly</option>
            <option value="today">Today</option>
            <option value="custom">Custom Range</option>
          </select>
        </div>

        <div class="col-md-2 d-none" id="customStartWrap">
          <label class="form-label">Start Date</label>
          <input type="date" id="startDate" class="form-control date-input" data-format="DD, MMM YYYY" value="<%= Date.today.to_s %>" />
        </div>
        <div class="col-md-2 d-none" id="customEndWrap">
          <label class="form-label">End Date</label>
          <input type="date" id="endDate" class="form-control date-input" data-format="DD, MMM YYYY" value="<%= Date.today.to_s %>" />
        </div>

        <div class="col-md-3">
          <label class="form-label">Product</label>
          <select id="filterProduct" class="form-select">
            <option value="all" selected>All Products</option>
            <% @products.each do |p| %>
              <option value="<%= p.id %>"><%= p.name %></option>
            <% end %>
          </select>
        </div>

        <div class="col-md-3">
          <label class="form-label">Status</label>
          <select id="filterStatus" class="form-select">
            <option value="all" selected>All</option>
            <option value="completed">Completed</option>
            <option value="pending">Pending</option>
            <option value="cancelled">Cancelled</option>
          </select>
        </div>

        <div class="col-md-4">
          <label class="form-label">Delivery Person</label>
          <select id="filterDeliveryPerson" class="form-select">
            <option value="all" selected>All Delivery Persons</option>
            <% @delivery_persons.each do |dp| %>
              <option value="<%= dp.id %>"><%= dp.name %></option>
            <% end %>
          </select>
        </div>

        <div class="col-md-2">
          <label class="form-label">Search</label>
          <input type="text" id="globalSearch" class="form-control" placeholder="Customer/Product" />
        </div>

        <div class="col-md-12 text-end">
          <button type="button" id="applyFiltersBtn" class="btn btn-primary me-2">Apply Filters</button>
          <button type="button" id="bulkCompleteBtn" class="btn btn-success me-2" style="display: none;">
            <i class="fas fa-check-circle me-1"></i><span id="bulkCompleteText">Complete 0</span>
          </button>
          <button type="button" id="exportCsvBtn" class="btn btn-outline-secondary me-2">Export CSV</button>
          <button type="button" id="printBtn" class="btn btn-outline-secondary">Print</button>
        </div>
      </form>
    </div>
  </div>

  <div class="summary-section row g-3 mb-3">
    <div class="col-6 col-md-3">
      <div class="card text-center">
        <div class="card-body">
          <h6 class="card-title">Total Deliveries</h6>
          <div class="fs-4" id="sumTotalDeliveries">0</div>
        </div>
      </div>
    </div>
    <div class="col-6 col-md-3">
      <div class="card text-center">
        <div class="card-body">
          <h6 class="card-title">Total Customers</h6>
          <div class="fs-4" id="sumTotalCustomers">0</div>
        </div>
      </div>
    </div>
    <div class="col-6 col-md-3">
      <div class="card text-center">
        <div class="card-body">
          <h6 class="card-title">Total Amount</h6>
          <div class="fs-4" id="sumTotalAmount">â‚¹0</div>
        </div>
      </div>
    </div>
    <div class="col-6 col-md-3">
      <div class="card text-center">
        <div class="card-body">
          <h6 class="card-title">Completion Rate</h6>
          <div class="fs-4" id="sumCompletionRate">0%</div>
        </div>
      </div>
    </div>
  </div>

  <div class="table-section card">
    <div class="card-header d-flex justify-content-between align-items-center">
      <h5 class="mb-0">ðŸ“‹ Delivery Details</h5>
      <div class="text-muted small" id="hasMoreNotice" style="display:none;">Showing first 1000 rows</div>
    </div>
    <div class="card-body p-0">
      <div class="table-responsive">
        <table class="table table-striped mb-0">
          <thead class="table-light">
            <tr>
              <th scope="col">Date</th>
              <th scope="col">Customer Name</th>
              <th scope="col">Product</th>
              <th scope="col">Quantity</th>
              <th scope="col">Amount</th>
              <th scope="col">Discount</th>
              <th scope="col">Product Cost</th>
              <th scope="col">Status</th>
              <th scope="col">Delivery Person</th>
              <th scope="col">Actions</th>
            </tr>
          </thead>
          <tbody id="deliveryTableBody">
            <tr><td colspan="9" class="text-center text-muted">Use filters to load data</td></tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<script>
(function() {
  'use strict';
  
  // Store pending assignment IDs for bulk completion
  var pendingAssignmentIds = [];

  function formatINR(value) {
    try {
      return new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR', maximumFractionDigits: 2 }).format(value || 0);
    } catch(e) { return 'â‚¹' + (value || 0); }
  }

  function statusBadge(status) {
    switch(status) {
      case 'completed': return '<span class="badge bg-success">Completed</span>';
      case 'pending': return '<span class="badge bg-warning text-dark">Pending</span>';
      case 'cancelled': return '<span class="badge bg-danger">Cancelled</span>';
      case 'in_progress': return '<span class="badge bg-info text-white">In Progress</span>';
      default: return '<span class="badge bg-secondary">' + (status || '-') + '</span>';
    }
  }

  function toggleCustomDates() {
    var type = document.getElementById('filterDate').value;
    var s = document.getElementById('customStartWrap');
    var e = document.getElementById('customEndWrap');
    if (type === 'custom') { s.classList.remove('d-none'); e.classList.remove('d-none'); }
    else { s.classList.add('d-none'); e.classList.add('d-none'); }
  }

  function getFilters() {
    var dateType = document.getElementById('filterDate').value;
    var params = {
      customer_id: document.getElementById('filterCustomer').value,
      date_filter: dateType,
      product_id: document.getElementById('filterProduct').value,
      status: document.getElementById('filterStatus').value,
      delivery_person_id: document.getElementById('filterDeliveryPerson').value,
      search: document.getElementById('globalSearch').value.trim()
    };
    if (dateType === 'custom') {
      // Use date values directly in YYYY-MM-DD format
      var startDateInput = document.getElementById('startDate');
      var endDateInput = document.getElementById('endDate');
      
      params.start_date = startDateInput.value;  // Keep as YYYY-MM-DD
      params.end_date = endDateInput.value;      // Keep as YYYY-MM-DD
    }
    return params;
  }


  function setSummary(summary) {
    document.getElementById('sumTotalDeliveries').textContent = summary.total_deliveries || 0;
    document.getElementById('sumTotalCustomers').textContent = summary.total_customers || 0;
    document.getElementById('sumTotalAmount').textContent = formatINR(summary.total_amount || 0);
    document.getElementById('sumCompletionRate').textContent = (summary.completion_rate || 0) + '%';
    
    // Update bulk complete button
    updateBulkCompleteButton(summary.pending_deliveries || 0);
  }

  function updateBulkCompleteButton(pendingCount) {
    var bulkBtn = document.getElementById('bulkCompleteBtn');
    var bulkText = document.getElementById('bulkCompleteText');
    
    if (pendingCount > 0) {
      bulkText.textContent = 'Complete ' + pendingCount;
      bulkBtn.style.display = 'inline-block';
    } else {
      bulkBtn.style.display = 'none';
    }
  }

  function renderRows(deliveries) {
    var tbody = document.getElementById('deliveryTableBody');
    tbody.innerHTML = '';
    
    // Clear and rebuild pending assignment IDs
    pendingAssignmentIds = [];
    
    if (!deliveries || deliveries.length === 0) {
      tbody.innerHTML = '<tr><td colspan="9" class="text-center text-muted">No records found</td></tr>';
      return;
    }
    
    var rows = deliveries.map(function(d) {
      // Track pending assignments for bulk completion
      if (d.status === 'pending') {
        pendingAssignmentIds.push(d.id);
      }
      
      return '<tr data-delivery-id="' + d.id + '">' +
        '<td class="editable-date" data-field="scheduled_date">' + d.date + '</td>' +
        '<td>' + (d.customer_name || '-') + '</td>' +
        '<td class="editable-product" data-field="product_id">' + (d.product || '-') + '</td>' +
        '<td class="editable-quantity" data-field="quantity">' + (d.quantity || '-') + '</td>' +
        '<td class="editable-amount" data-field="final_amount_after_discount">' + formatINR(d.amount || 0) + '</td>' +
        '<td>' + formatINR(d.discount || 0) + '</td>' +
        '<td class="text-info fw-bold">' + formatINR(d.product_cost || 0) + '</td>' +
        '<td class="editable-status" data-field="status">' + statusBadge(d.status) + '</td>' +
        '<td class="editable-delivery-person" data-field="user_id">' + (d.delivery_person || '-') + '</td>' +
        '<td class="actions-cell">' +
          '<button class="btn btn-sm btn-outline-primary me-1 edit-btn" data-id="' + d.id + '">Edit</button>' +
          '<button class="btn btn-sm btn-outline-danger delete-btn" data-id="' + d.id + '">Delete</button>' +
        '</td>' +
      '</tr>';
    }).join('');
    tbody.innerHTML = rows;
  }

  function fetchData() {
    var btn = document.getElementById('applyFiltersBtn');
    btn.disabled = true; btn.classList.add('loading');
    var params = getFilters();
    var query = new URLSearchParams(params).toString();
    fetch('/delivery-review/data.json?' + query, { headers: { 'Accept': 'application/json' } })
      .then(function(r) { return r.json(); })
      .then(function(data) {
        setSummary(data.summary || {});
        renderRows(data.deliveries || []);
        document.getElementById('hasMoreNotice').style.display = data.has_more ? '' : 'none';
      })
      .catch(function(e) { console.error(e); })
      .finally(function(){ btn.disabled = false; btn.classList.remove('loading'); });
  }

  function initializeDateInputs() {
    var dateInputs = document.querySelectorAll('input[type="date"].date-input');
    dateInputs.forEach(function(input) {
      // Add change listener for validation
      input.addEventListener('change', function() {
        console.log('Date input changed:', input.id, 'value:', input.value);
      });
    });
  }

  document.addEventListener('DOMContentLoaded', function() {
    // Initialize date formatting
    initializeDateInputs();
    
    // Initialize Select2 if available
    if (window.jQuery && jQuery.fn.select2) {
      jQuery('#filterCustomer, #filterProduct, #filterStatus, #filterDeliveryPerson').select2({ theme: 'bootstrap-5', width: '100%' });
    }
    document.getElementById('filterDate').addEventListener('change', toggleCustomDates);
    document.getElementById('applyFiltersBtn').addEventListener('click', fetchData);
    document.getElementById('bulkCompleteBtn').addEventListener('click', handleBulkComplete);
    document.getElementById('printBtn').addEventListener('click', function(){ window.print(); });

    document.getElementById('exportCsvBtn').addEventListener('click', function() {
      var params = getFilters();
      var form = document.createElement('form');
      form.method = 'POST';
      form.action = '/delivery-review/export';
      form.style.display = 'none';
      var csrf = document.querySelector('meta[name="csrf-token"]');
      if (csrf) {
        var t = document.createElement('input'); t.type = 'hidden'; t.name = 'authenticity_token'; t.value = csrf.getAttribute('content'); form.appendChild(t);
      }
      Object.keys(params).forEach(function(k){
        var input = document.createElement('input'); input.type = 'hidden'; input.name = k; input.value = params[k]; form.appendChild(input);
      });
      document.body.appendChild(form);
      form.submit();
      setTimeout(function(){ document.body.removeChild(form); }, 1000);
    });

    // Edit and Delete functionality
    document.addEventListener('click', function(e) {
      if (e.target.classList.contains('edit-btn')) {
        handleEdit(e.target.dataset.id);
      } else if (e.target.classList.contains('delete-btn')) {
        handleDelete(e.target.dataset.id);
      } else if (e.target.classList.contains('save-btn')) {
        handleSave(e.target.dataset.id);
      } else if (e.target.classList.contains('cancel-btn')) {
        handleCancel(e.target.dataset.id);
      }
    });

    // Auto load defaults (Monthly + All Customers)
    fetchData();
  });

  function handleEdit(deliveryId) {
    var row = document.querySelector('tr[data-delivery-id="' + deliveryId + '"]');
    if (!row) return;

    // Store original values
    row.setAttribute('data-editing', 'true');
    var cells = row.querySelectorAll('td');
    
    console.log('Edit mode - Total cells found:', cells.length);
    console.log('Cells array:', Array.from(cells).map((cell, idx) => ({ index: idx, content: cell.textContent.trim() })));
    
    // Convert editable cells to form inputs
    // Table structure: Date, Customer, Product, Quantity, Amount, Discount, Product Cost, Status, Delivery Person, Actions
    convertCellToInput(cells[0], 'date', getDateValue(cells[0].textContent)); // Date (index 0)
    convertCellToSelect(cells[2], 'product', cells[2].textContent); // Product (index 2)
    convertCellToInput(cells[3], 'quantity', getQuantityValue(cells[3].textContent)); // Quantity (index 3)
    convertCellToInput(cells[4], 'amount', getAmountValue(cells[4].textContent)); // Amount (index 4)
    convertCellToSelect(cells[7], 'status', getStatusValue(cells[7].innerHTML)); // Status (index 7)
    convertCellToSelect(cells[8], 'delivery-person', cells[8].textContent); // Delivery Person (index 8)

    // Change action buttons (index 9 - Actions column)
    var actionsCell = cells[9];
    if (actionsCell) {
      actionsCell.innerHTML = 
        '<button class="btn btn-sm btn-success me-1 save-btn" data-id="' + deliveryId + '">Save</button>' +
        '<button class="btn btn-sm btn-secondary cancel-btn" data-id="' + deliveryId + '">Cancel</button>';
    } else {
      console.error('Actions cell not found at index 9 for delivery ID:', deliveryId);
    }
  }

  function convertCellToInput(cell, type, value) {
    var field = cell.dataset.field;
    var inputType = type === 'date' ? 'date' : type === 'amount' ? 'number' : 'text';
    var step = type === 'amount' ? 'step="0.01"' : '';
    cell.innerHTML = '<input type="' + inputType + '" class="form-control form-control-sm" value="' + value + '" data-field="' + field + '" ' + step + '>';
  }

  function convertCellToSelect(cell, type, currentValue) {
    var field = cell.dataset.field;
    var options = '';
    
    if (type === 'product') {
      options = '<option value="">Select Product</option>';
      // Add products from the filter dropdown
      var productSelect = document.getElementById('filterProduct');
      for (var i = 1; i < productSelect.options.length; i++) {
        var option = productSelect.options[i];
        var selected = option.text === currentValue ? 'selected' : '';
        options += '<option value="' + option.value + '" ' + selected + '>' + option.text + '</option>';
      }
    } else if (type === 'status') {
      var statusOptions = [
        { value: 'pending', text: 'Pending' },
        { value: 'completed', text: 'Completed' },
        { value: 'cancelled', text: 'Cancelled' },
        { value: 'in_progress', text: 'In Progress' }
      ];
      options = '';
      statusOptions.forEach(function(opt) {
        var selected = opt.text === currentValue || opt.value === currentValue ? 'selected' : '';
        options += '<option value="' + opt.value + '" ' + selected + '>' + opt.text + '</option>';
      });
    } else if (type === 'delivery-person') {
      options = '<option value="">Select Delivery Person</option>';
      var deliverySelect = document.getElementById('filterDeliveryPerson');
      for (var i = 1; i < deliverySelect.options.length; i++) {
        var option = deliverySelect.options[i];
        var selected = option.text === currentValue ? 'selected' : '';
        options += '<option value="' + option.value + '" ' + selected + '>' + option.text + '</option>';
      }
    }
    
    cell.innerHTML = '<select class="form-select form-select-sm" data-field="' + field + '">' + options + '</select>';
  }

  function getDateValue(dateText) {
    // Return date as-is since we're keeping YYYY-MM-DD format
    return dateText || '';
  }

  function getQuantityValue(quantityText) {
    // Extract number from "5 L" format
    return quantityText.split(' ')[0] || '';
  }

  function getAmountValue(amountText) {
    // Extract number from "â‚¹150.00" format
    return amountText.replace(/[â‚¹,]/g, '') || '';
  }

  function getStatusValue(statusHtml) {
    // Extract status from badge HTML
    var tempDiv = document.createElement('div');
    tempDiv.innerHTML = statusHtml;
    var badge = tempDiv.querySelector('.badge');
    return badge ? badge.textContent.trim() : '';
  }

  function handleSave(deliveryId) {
    var row = document.querySelector('tr[data-delivery-id="' + deliveryId + '"]');
    if (!row) return;

    var data = {};
    var inputs = row.querySelectorAll('input, select');
    
    inputs.forEach(function(input) {
      var field = input.dataset.field;
      if (field) {
        data[field] = input.value;
      }
    });

    // Send update request
    var csrf = document.querySelector('meta[name="csrf-token"]');
    fetch('/delivery-review/' + deliveryId, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': csrf ? csrf.getAttribute('content') : ''
      },
      body: JSON.stringify({ delivery_assignment: data })
    })
    .then(function(response) { return response.json(); })
    .then(function(result) {
      if (result.success) {
        // Refresh the data to show updated values
        fetchData();
      } else {
        alert('Error: ' + (result.errors ? result.errors.join(', ') : result.message));
      }
    })
    .catch(function(error) {
      console.error('Error:', error);
      alert('Failed to update delivery');
    });
  }

  function handleCancel(deliveryId) {
    // Simply refresh the data to restore original values
    fetchData();
  }

  function handleDelete(deliveryId) {
    if (!confirm('Are you sure you want to delete this delivery assignment?')) {
      return;
    }

    var csrf = document.querySelector('meta[name="csrf-token"]');
    fetch('/delivery-review/' + deliveryId, {
      method: 'DELETE',
      headers: {
        'X-CSRF-Token': csrf ? csrf.getAttribute('content') : ''
      }
    })
    .then(function(response) { return response.json(); })
    .then(function(result) {
      if (result.success) {
        // Refresh the data to remove deleted row
        fetchData();
      } else {
        alert('Error: ' + result.message);
      }
    })
    .catch(function(error) {
      console.error('Error:', error);
      alert('Failed to delete delivery');
    });
  }

  function handleBulkComplete() {
    if (pendingAssignmentIds.length === 0) {
      alert('No pending assignments found to complete.');
      return;
    }

    if (!confirm('Are you sure you want to mark ' + pendingAssignmentIds.length + ' pending assignment(s) as completed?')) {
      return;
    }

    var btn = document.getElementById('bulkCompleteBtn');
    var originalText = btn.innerHTML;
    btn.disabled = true;
    btn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Completing...';

    var csrf = document.querySelector('meta[name="csrf-token"]');
    fetch('/delivery-review/bulk-complete', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': csrf ? csrf.getAttribute('content') : ''
      },
      body: JSON.stringify({ assignment_ids: pendingAssignmentIds })
    })
    .then(function(response) { return response.json(); })
    .then(function(result) {
      if (result.success) {
        // Show success message
        alert(result.message);
        // Refresh the data to show updated statuses
        fetchData();
      } else {
        alert('Error: ' + result.message);
      }
    })
    .catch(function(error) {
      console.error('Error:', error);
      alert('Failed to complete assignments');
    })
    .finally(function() {
      btn.disabled = false;
      btn.innerHTML = originalText;
    });
  }

})();
</script>