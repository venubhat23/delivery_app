<% content_for :title, "Milk Analytics Dashboard" %>

<div class="container-fluid">
  <!-- Header with Navigation Tabs -->
  <div class="row mb-3">
    <div class="col-12">
      <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
          <h1 class="h2 mb-1 text-dark fw-bold d-flex align-items-center">
            <i class="fas fa-glass-milk text-primary me-2" style="font-size: 1.5rem;"></i>
            Milk Analytics
          </h1>
          <p class="text-muted mb-0">Comprehensive milk procurement and delivery analytics</p>
        </div>
      </div>
      
      <!-- Navigation Tabs -->
      <% active_tab = params[:tab].presence || 'dashboard' %>
      <ul class="nav nav-pills nav-fill" id="milkAnalyticsTabs" role="tablist">
        <li class="nav-item" role="presentation">
          <button class="nav-link <%= 'active' if active_tab == 'dashboard' %>" id="dashboard-tab" data-bs-toggle="pill" data-bs-target="#dashboard" 
                  type="button" role="tab" aria-controls="dashboard" aria-selected="false">
            <i class="fas fa-chart-line me-1"></i>Dashboard
          </button>
        </li>
        <li class="nav-item" role="presentation">
          <button class="nav-link <%= 'active' if active_tab == 'reports' %>" id="reports-tab" data-bs-toggle="pill" data-bs-target="#reports" 
                  type="button" role="tab" aria-controls="reports" aria-selected="false">
            <i class="fas fa-file-alt me-1"></i>Daily Report
          </button>
        </li>
        <li class="nav-item" role="presentation">
          <button class="nav-link <%= 'active' if active_tab == 'procurement' %>" id="procurement-tab" data-bs-toggle="pill" data-bs-target="#procurement" 
                  type="button" role="tab" aria-controls="procurement" aria-selected="false">
            <i class="fas fa-plus me-1"></i>Create Procurement
          </button>
        </li>
        <li class="nav-item" role="presentation">
          <button class="nav-link <%= 'active' if active_tab == 'schedules' %>" id="schedules-tab" data-bs-toggle="pill" data-bs-target="#schedules" 
                  type="button" role="tab" aria-controls="schedules" aria-selected="false">
            <i class="fas fa-list me-1"></i>Schedules
          </button>
        </li>
        <li class="nav-item" role="presentation">
          <button class="nav-link <%= 'active' if active_tab == 'calendar' %>" id="calendar-tab" data-bs-toggle="pill" data-bs-target="#calendar" 
                  type="button" role="tab" aria-controls="calendar" aria-selected="true">
            <i class="fas fa-calendar-alt me-1"></i>Procurement Calendar
          </button>
        </li>
      </ul>
    </div>
  </div>

  <!-- Tab Content -->
  <div class="tab-content" id="milkAnalyticsTabContent">
    
    <!-- Dashboard & Reports Tab -->
    <div class="tab-pane fade <%= 'show active' if active_tab == 'dashboard' %>" id="dashboard" role="tabpanel" aria-labelledby="dashboard-tab">
      <!-- Filter Section -->
      <div class="row mb-3">
        <div class="col-12">
          <div class="card border-0 shadow-sm">
            <div class="card-body py-2">
              <%= form_with url: milk_analytics_path, method: :get, local: true, class: "d-flex flex-wrap align-items-end gap-3" do |form| %>
                <!-- Hidden field to maintain dashboard tab -->
                <%= form.hidden_field :tab, value: 'dashboard' %>
                
                <!-- Product Filter -->
                <div class="flex-fill" style="min-width: 200px; max-width: 300px;">
                  <label class="form-label fw-bold text-primary mb-1">
                    <i class="fas fa-box me-1"></i>Product Filter
                  </label>
                  <%= form.select :product_id,
                      options_for_select([['All Products', '']] + 
                        Product.all.map { |p| ["#{p.name} (#{p.unit_type})", p.id] }, 
                        params[:product_id]),
                      {},
                      { 
                        class: "form-select",
                        onchange: "this.form.submit()"
                      } %>
                </div>
                
                <!-- Date Range Filter -->
                <div class="flex-fill" style="min-width: 150px; max-width: 200px;">
                  <label class="form-label fw-bold text-primary mb-1">
                    <i class="fas fa-calendar me-1"></i>Date Range
                  </label>
                  <%= form.select :date_range,
                      options_for_select([
                        ['Today', 'today'],
                        ['Weekly', 'weekly'],
                        ['Monthly', 'monthly'],
                        ['Custom Range', 'custom']
                      ], params[:date_range] || 'monthly'),
                      {},
                      { 
                        class: "form-select",
                        id: "date-range-select",
                        onchange: "toggleCustomDates(); this.form.submit()"
                      } %>
                </div>
                
                <!-- Custom Date Fields -->
                <div class="custom-dates d-flex gap-2" style="<%= params[:date_range] == 'custom' ? '' : 'display: none;' %>">
                  <div>
                    <label class="form-label fw-bold text-primary mb-1">From Date</label>
                    <%= form.date_field :from_date, 
                        value: params[:from_date] || Date.today.to_s,
                        class: "form-control",
                        style: "min-width: 140px;" %>
                  </div>
                  <div>
                    <label class="form-label fw-bold text-primary mb-1">To Date</label>
                    <%= form.date_field :to_date, 
                        value: params[:to_date] || Date.today.to_s,
                        class: "form-control",
                        style: "min-width: 140px;" %>
                  </div>
                  <div class="align-self-end">
                    <%= form.submit "Apply", class: "btn btn-primary" %>
                  </div>
                </div>
              <% end %>
            </div>
          </div>
        </div>
      </div>

      <!-- Procurement Dashboard - 8 Cards Only -->
      <div class="row mb-4">
        <!-- Card 1: Active Vendors -->
        <div class="col-xl-3 col-lg-4 col-md-6 mb-4">
          <div class="card gradient-primary text-white shadow-lg h-100">
            <div class="card-body p-4">
              <div class="d-flex align-items-center">
                <div class="flex-grow-1">
                  <div class="text-white-75 text-uppercase mb-1 fw-bold small">Total Vendors</div>
                  <div class="h3 mb-0 fw-bold"><%= @dashboard_stats[:total_vendors] || 0 %></div>
                </div>
                <div class="ms-3">
                  <i class="fas fa-users fa-2x text-white opacity-75"></i>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Card 2: Liters Purchased -->
        <div class="col-xl-3 col-lg-4 col-md-6 mb-4">
          <div class="card gradient-info text-white shadow-lg h-100">
            <div class="card-body p-4">
              <div class="d-flex align-items-center">
                <div class="flex-grow-1">
                  <div class="text-white-75 text-uppercase mb-1 fw-bold small">Liters Purchased</div>
                  <div class="h3 mb-0 fw-bold"><%= number_with_delimiter((@dashboard_stats[:liters_purchased] || 0).round(2)) %>L</div>
                </div>
                <div class="ms-3">
                  <i class="fas fa-tint fa-2x text-white opacity-75"></i>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Card 3: Purchase Amount -->
        <div class="col-xl-3 col-lg-4 col-md-6 mb-4">
          <div class="card gradient-warning text-white shadow-lg h-100">
            <div class="card-body p-4">
              <div class="d-flex align-items-center">
                <div class="flex-grow-1">
                  <div class="text-white-75 text-uppercase mb-1 fw-bold small">Total Purchased Amount</div>
                  <div class="h3 mb-0 fw-bold">₹<%= number_with_delimiter((@dashboard_stats[:total_purchased_amount] || 0).round(1)) %></div>
                </div>
                <div class="ms-3">
                  <i class="fas fa-rupee-sign fa-2x text-white opacity-75"></i>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Card 4: Liters Delivered -->
        <div class="col-xl-3 col-lg-4 col-md-6 mb-4">
          <div class="card gradient-success text-white shadow-lg h-100">
            <div class="card-body p-4">
              <div class="d-flex align-items-center">
                <div class="flex-grow-1">
                  <div class="text-white-75 text-uppercase mb-1 fw-bold small">Liters Delivered</div>
                  <div class="h3 mb-0 fw-bold"><%= number_with_delimiter((@dashboard_stats[:liters_delivered] || 0).round(1)) %>L</div>
                </div>
                <div class="ms-3">
                  <i class="fas fa-truck fa-2x text-white opacity-75"></i>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Card 5: Pending Quantity -->
        <div class="col-xl-3 col-lg-4 col-md-6 mb-4">
          <div class="card gradient-warning text-white shadow-lg h-100">
            <div class="card-body p-4">
              <div class="d-flex align-items-center">
                <div class="flex-grow-1">
                  <div class="text-white-75 text-uppercase mb-1 fw-bold small">Pending Quantity</div>
                  <div class="h3 mb-0 fw-bold"><%= number_with_delimiter((@dashboard_stats[:total_pending_quantity] || 0).round(1)) %>L</div>
                  <div class="text-white-75 small">Received - Delivered</div>
                </div>
                <div class="ms-3">
                  <i class="fas fa-balance-scale fa-2x text-white opacity-75"></i>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Card 6: Revenue After Discount -->
        <div class="col-xl-3 col-lg-4 col-md-6 mb-4">
          <div class="card gradient-primary text-white shadow-lg h-100">
            <div class="card-body p-4">
              <div class="d-flex align-items-center">
                <div class="flex-grow-1">
                  <div class="text-white-75 text-uppercase mb-1 fw-bold small">Revenue After Discount</div>
                  <div class="h3 mb-0 fw-bold">₹<%= number_with_delimiter((@dashboard_stats[:total_amount_collected] || 0).round(2)) %></div>
                  <div class="text-white-75 small">Total delivery earnings</div>
                </div>
                <div class="ms-3">
                  <i class="fas fa-money-bill-wave fa-2x text-white opacity-75"></i>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Card 7: Loss -->
        <div class="col-xl-3 col-lg-4 col-md-6 mb-4">
          <div class="card gradient-danger text-white shadow-lg h-100">
            <div class="card-body p-4">
              <div class="d-flex align-items-center">
                <div class="flex-grow-1">
                  <div class="text-white-75 text-uppercase mb-1 fw-bold small">Loss Amount</div>
                  <div class="h3 mb-0 fw-bold">₹<%= number_with_delimiter((@dashboard_stats[:loss_amount] || 0).round(1)) %></div>
                  <div class="text-white-75 small">Cost exceeds revenue</div>
                </div>
                <div class="ms-3">
                  <i class="fas fa-arrow-down fa-2x text-white opacity-75"></i>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Card 8: Profit Amount -->
        <div class="col-xl-3 col-lg-4 col-md-6 mb-4">
          <div class="card gradient-success text-white shadow-lg h-100">
            <div class="card-body p-4">
              <div class="d-flex align-items-center">
                <div class="flex-grow-1">
                  <div class="text-white-75 text-uppercase mb-1 fw-bold small">Profit Amount</div>
                  <div class="h3 mb-0 fw-bold">₹<%= number_with_delimiter((@dashboard_stats[:profit_amount] || 0).round(1)) %></div>
                  <div class="text-white-75 small">Revenue exceeds cost</div>
                </div>
                <div class="ms-3">
                  <i class="fas fa-arrow-up fa-2x text-white opacity-75"></i>
                </div>
              </div>
              <div class="mt-2">
                <div class="text-white-75 small fw-bold">Utilization Rate</div>
                <div class="h5 mb-0 fw-bold text-white"><%= (@dashboard_stats[:utilization_rate] || 0).round(1) %>%</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Summary Tables -->
      <div class="row">
        <!-- Procurement Summary -->
        <div class="col-lg-6 mb-4">
          <div class="card border-0 shadow-lg">
            <div class="card-header py-4">
              <h5 class="m-0 font-weight-bold text-primary">
                <i class="fas fa-shopping-cart me-2"></i>Procurement Summary
              </h5>
            </div>
            <div class="card-body">
              <div class="table-responsive">
                <table class="table table-hover">
                  <thead class="table-light">
                    <tr>
                      <th>Vendor</th>
                      <th>Quantity (L)</th>
                      <th>Amount (₹)</th>
                    </tr>
                  </thead>
                  <tbody>
                    <% if @vendor_summary&.any? %>
                      <% @vendor_summary.each do |vendor| %>
                        <tr>
                          <td><%= vendor[:name] %></td>
                          <td><%= number_with_delimiter(vendor[:quantity]) %></td>
                          <td>₹<%= number_with_delimiter(vendor[:amount]) %></td>
                        </tr>
                      <% end %>
                    <% else %>
                      <tr>
                        <td colspan="3" class="text-center text-muted py-4">
                          <i class="fas fa-inbox fa-2x mb-2"></i><br>
                          No procurement data available
                        </td>
                      </tr>
                    <% end %>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>

        <!-- Delivery Summary -->
        <div class="col-lg-6 mb-4">
          <div class="card border-0 shadow-lg">
            <div class="card-header py-4">
              <h5 class="m-0 font-weight-bold text-primary">
                <i class="fas fa-truck me-2"></i>Delivery Summary
              </h5>
            </div>
            <div class="card-body">
              <div class="table-responsive">
                <table class="table table-hover">
                  <thead class="table-light">
                    <tr>
                      <th>Status</th>
                      <th>Count</th>
                      <th>Quantity (L)</th>
                      <th>Revenue (₹)</th>
                    </tr>
                  </thead>
                  <tbody>
                    <% if @delivery_summary&.any? %>
                      <% @delivery_summary.each do |delivery| %>
                        <tr>
                          <td>
                            <span class="badge bg-<%= delivery[:status] == 'completed' ? 'success' : 'warning' %>">
                              <%= delivery[:status].titleize %>
                            </span>
                          </td>
                          <td><%= delivery[:count] %></td>
                          <td><%= number_with_delimiter(delivery[:quantity]) %></td>
                          <td>₹<%= number_with_delimiter(delivery[:revenue]) %></td>
                        </tr>
                      <% end %>
                    <% else %>
                      <tr>
                        <td colspan="4" class="text-center text-muted py-4">
                          <i class="fas fa-truck fa-2x mb-2"></i><br>
                          No delivery data available
                        </td>
                      </tr>
                    <% end %>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Detailed Calculations Section -->
      <div class="row mb-4">
        <div class="col-12">
          <div class="card border-0 shadow-lg">
            <div class="card-header py-4 bg-gradient-primary text-white">
              <h5 class="m-0 font-weight-bold">
                <i class="fas fa-calculator me-2"></i>📊 Detailed Financial Calculations & Formulas
              </h5>
              <p class="mb-0 small opacity-90">Complete breakdown of procurement costs, delivery revenue, and profit calculations with formulas</p>
            </div>
            <div class="card-body">
              
              <!-- Procurement Calculations -->
              <div class="row mb-5">
                <div class="col-12">
                  <h6 class="text-primary fw-bold mb-3">
                    <i class="fas fa-shopping-cart me-2"></i>🛒 Procurement Cost Analysis
                  </h6>
                  
                  <div class="row justify-content-center">
                    <!-- Only Planned Procurement -->
                    <div class="col-lg-8 mb-4">
                      <div class="card bg-light border-0">
                        <div class="card-body">
                          <h6 class="card-title text-info">📋 Planned Procurement Analysis</h6>
                          <div class="calculation-breakdown">
                            <div class="row">
                              <div class="col-md-8">
                                <h6 class="text-muted mb-3">Vendor-wise Planned Procurement:</h6>
                                <% if @vendor_summary&.any? %>
                                  <% @vendor_summary.each do |vendor| %>
                                    <% 
                                      # These are planned quantities from vendor_summary
                                      planned_quantity = vendor[:quantity] || 0
                                      planned_cost = vendor[:amount] || 0
                                      avg_price = planned_quantity > 0 ? (planned_cost / planned_quantity).round(2) : 0
                                    %>
                                    <div class="d-flex justify-content-between align-items-center mb-2 p-2 bg-white rounded">
                                      <div>
                                        <strong><%= vendor[:name] %></strong><br>
                                        <small class="text-muted">
                                          <%= number_with_delimiter(planned_quantity) %>L × ₹<%= avg_price %>/L
                                        </small>
                                      </div>
                                      <div class="text-end">
                                        <strong class="text-info">₹<%= number_with_delimiter(planned_cost) %></strong>
                                      </div>
                                    </div>
                                  <% end %>
                                <% end %>
                              </div>
                              <div class="col-md-4">
                                <div class="bg-white p-3 rounded text-center">
                                  <h6 class="text-muted">Total Planned:</h6>
                                  <div class="mb-2">
                                    <strong class="text-primary h4"><%= number_with_delimiter(@planned_liters || 0) %>L</strong><br>
                                    <small class="text-muted">Planned Quantity</small>
                                  </div>
                                  <div class="mb-2">
                                    <strong class="text-success h4">₹<%= number_with_delimiter(@planned_cost || 0) %></strong><br>
                                    <small class="text-muted">Planned Cost</small>
                                  </div>
                                  <div>
                                    <strong class="text-info">₹<%= (@planned_liters && @planned_liters > 0) ? number_with_delimiter((@planned_cost.to_f / @planned_liters).round(2)) : '0' %>/L</strong><br>
                                    <small class="text-muted">Average Cost</small>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Delivery Revenue Analysis -->
              <div class="row mb-5">
                <div class="col-12">
                  <h6 class="text-primary fw-bold mb-3">
                    <i class="fas fa-truck me-2"></i>🚚 Delivery Revenue Analysis
                  </h6>
                  
                  <div class="row">
                    <!-- Revenue Breakdown -->
                    <div class="col-lg-6 mb-4">
                      <div class="card bg-light border-0">
                        <div class="card-body">
                          <h6 class="card-title text-success">💰 Revenue Calculations</h6>
                          <div class="calculation-breakdown">
                            <div class="mb-3">
                              <strong>Total Delivered:</strong> <%= number_with_delimiter(@total_delivered || 0) %>L<br>
                              <small class="text-muted">Formula: Sum of all completed delivery quantities</small>
                            </div>
                            <div class="mb-3">
                              <strong>Total Revenue:</strong> ₹<%= number_with_delimiter(@total_revenue || 0) %><br>
                              <small class="text-muted">Formula: Σ(Delivered Quantity × Selling Price per delivery)</small>
                            </div>
                            <div class="mb-3">
                              <strong>Average Price/L:</strong> ₹<%= (@total_delivered && @total_delivered > 0) ? number_with_delimiter((@total_revenue.to_f / @total_delivered).round(2)) : '0' %><br>
                              <small class="text-muted">Formula: Total Revenue ÷ Total Delivered</small>
                            </div>
                            
                            <% if @delivery_summary&.any? %>
                              <div class="delivery-status-breakdown">
                                <strong>Status Breakdown:</strong>
                                <% @delivery_summary.each do |delivery| %>
                                  <div class="small mt-1">
                                    <span class="badge bg-<%= delivery[:status] == 'completed' ? 'success' : 'warning' %> me-2">
                                      <%= delivery[:status].titleize %>
                                    </span>
                                    <%= delivery[:count] %> orders, 
                                    <%= number_with_delimiter(delivery[:quantity]) %>L, 
                                    ₹<%= number_with_delimiter(delivery[:revenue]) %>
                                  </div>
                                <% end %>
                              </div>
                            <% end %>
                          </div>
                        </div>
                      </div>
                    </div>

                    <!-- Utilization Analysis -->
                    <div class="col-lg-6 mb-4">
                      <div class="card bg-light border-0">
                        <div class="card-body">
                          <h6 class="card-title text-warning">📊 Utilization Metrics</h6>
                          <div class="calculation-breakdown">
                            <% 
                              utilization_rate = (@total_liters && @total_liters > 0) ? ((@total_delivered.to_f / @total_liters) * 100).round(2) : 0
                              wastage_quantity = (@total_liters || 0) - (@total_delivered || 0)
                              wastage_percentage = (@total_liters && @total_liters > 0) ? ((wastage_quantity.to_f / @total_liters) * 100).round(2) : 0
                              wastage_cost = (@total_liters && @total_liters > 0) ? (wastage_quantity * (@total_cost.to_f / @total_liters)).round(2) : 0
                            %>
                            
                            <div class="mb-3">
                              <strong>Utilization Rate:</strong> 
                              <span class="<%= utilization_rate > 80 ? 'text-success' : utilization_rate > 50 ? 'text-warning' : 'text-danger' %>">
                                <%= utilization_rate %>%
                              </span><br>
                              <small class="text-muted">Formula: (Delivered ÷ Procured) × 100</small><br>
                              <small class="text-muted">Calculation: (<%= @total_delivered %>L ÷ <%= @total_liters %>L) × 100 = <%= utilization_rate %>%</small>
                            </div>
                            
                            <div class="mb-3">
                              <strong>Wastage Analysis:</strong><br>
                              <span class="text-danger">
                                Quantity: <%= number_with_delimiter(wastage_quantity) %>L (<%= wastage_percentage %>%)
                              </span><br>
                              <span class="text-danger">
                                Cost Impact: ₹<%= number_with_delimiter(wastage_cost) %>
                              </span><br>
                              <small class="text-muted">Formula: Procured - Delivered = Wastage</small><br>
                              <small class="text-muted">Calculation: <%= @total_liters %>L - <%= @total_delivered %>L = <%= wastage_quantity %>L</small>
                            </div>

                            <div class="efficiency-score">
                              <% efficiency_score = case utilization_rate
                                   when 80..100 then "Excellent"
                                   when 60..79 then "Good" 
                                   when 40..59 then "Average"
                                   when 20..39 then "Poor"
                                   else "Critical"
                                   end
                                 efficiency_color = case utilization_rate
                                   when 80..100 then "success"
                                   when 60..79 then "info"
                                   when 40..59 then "warning" 
                                   when 20..39 then "danger"
                                   else "dark"
                                   end %>
                              <strong>Efficiency Score:</strong>
                              <span class="badge bg-<%= efficiency_color %> fs-6"><%= efficiency_score %></span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Profit/Loss Detailed Analysis -->
              <div class="row mb-4">
                <div class="col-12">
                  <h6 class="text-primary fw-bold mb-3">
                    <i class="fas fa-chart-line me-2"></i>💹 Profit/Loss Detailed Analysis
                  </h6>
                  
                  <div class="row">
                    <!-- Financial Summary -->
                    <div class="col-lg-8 mb-4">
                      <div class="card border-0" style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);">
                        <div class="card-body">
                          <h6 class="card-title text-dark">🧮 Complete Financial Formula</h6>
                          
                          <div class="formula-breakdown bg-white p-3 rounded border">
                            <div class="row">
                              <div class="col-md-4">
                                <h6 class="text-info">📥 PLANNED COSTS</h6>
                                <div class="mb-2">
                                  <strong>Planned Procurement:</strong><br>
                                  <code class="bg-light p-1 rounded">₹<%= number_with_delimiter(@planned_cost || 0) %></code>
                                </div>
                                <small class="text-muted">
                                  Formula: Σ(Planned Quantity × Buying Price)<br>
                                  <strong>Planned:</strong> <%= number_with_delimiter(@planned_liters || 0) %>L<br>
                                  <% if @vendor_summary&.any? %>
                                    <% @vendor_summary.first(2).each do |vendor| %>
                                      + <%= vendor[:name] %>: <%= number_with_delimiter(vendor[:quantity]) %>L<br>
                                    <% end %>
                                    <% if @vendor_summary.count > 2 %>
                                      + <%= @vendor_summary.count - 2 %> more vendors...
                                    <% end %>
                                  <% end %>
                                </small>
                              </div>
                              
                              <div class="col-md-4">
                                <h6 class="text-success">📤 ACTUAL REVENUE</h6>
                                <div class="mb-2">
                                  <strong>Delivery Revenue:</strong><br>
                                  <code class="bg-light p-1 rounded">₹<%= number_with_delimiter(@total_revenue || 0) %></code>
                                </div>
                                <small class="text-muted">
                                  Formula: Σ(Final Amount After Discount)<br>
                                  <strong>Delivered:</strong> <%= number_with_delimiter(@total_delivered || 0) %>L<br>
                                  Average: ₹<%= (@total_delivered && @total_delivered > 0) ? number_with_delimiter((@total_revenue.to_f / @total_delivered).round(2)) : '0' %>/L
                                </small>
                              </div>
                              
                              <div class="col-md-4">
                                <h6 class="text-warning">🥛 MILK LEFT</h6>
                                <div class="mb-2">
                                  <strong>Remaining Milk:</strong><br>
                                  <code class="bg-light p-1 rounded"><%= number_with_delimiter(@milk_left || 0) %>L</code>
                                </div>
                                <small class="text-muted">
                                  Formula: Planned - Delivered<br>
                                  <%= number_with_delimiter(@planned_liters || 0) %>L - <%= number_with_delimiter(@total_delivered || 0) %>L<br>
                                  <strong>Cost Value:</strong> ₹<%= number_with_delimiter(@milk_left_cost || 0) %>
                                </small>
                              </div>
                            </div>
                            
                            <hr class="my-3">
                            
                            <div class="text-center">
                              <h6 class="<%= (@planned_profit || 0) >= 0 ? 'text-success' : 'text-danger' %>">
                                <i class="fas fa-<%= (@planned_profit || 0) >= 0 ? 'arrow-up' : 'arrow-down' %> me-2"></i>
                                NET PROFIT/LOSS (Based on Planned)
                              </h6>
                              <div class="display-6 fw-bold <%= (@planned_profit || 0) >= 0 ? 'text-success' : 'text-danger' %>">
                                ₹<%= number_with_delimiter((@planned_profit || 0).abs) %> 
                                <small class="fs-6"><%= (@planned_profit || 0) >= 0 ? 'PROFIT' : 'LOSS' %></small>
                              </div>
                              <div class="mt-2">
                                <code class="fs-6">Revenue - Planned Cost = ₹<%= number_with_delimiter(@total_revenue || 0) %> - ₹<%= number_with_delimiter(@planned_cost || 0) %> = ₹<%= number_with_delimiter(@planned_profit || 0) %></code>
                              </div>
                              
                              <!-- Milk Left Impact -->
                              <div class="mt-3 p-2 bg-light rounded">
                                <h6 class="text-warning mb-2">🥛 Unsold Milk Impact</h6>
                                <div class="row text-center">
                                  <div class="col-md-4">
                                    <small class="text-muted">Milk Left</small><br>
                                    <strong><%= number_with_delimiter(@milk_left || 0) %>L</strong>
                                  </div>
                                  <div class="col-md-4">
                                    <small class="text-muted">Cost Value</small><br>
                                    <strong class="text-danger">₹<%= number_with_delimiter(@milk_left_cost || 0) %></strong>
                                  </div>
                                  <div class="col-md-4">
                                    <small class="text-muted">Potential Loss</small><br>
                                    <strong class="text-danger">₹<%= number_with_delimiter(@milk_left_cost || 0) %></strong>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                          
                          <!-- Additional Metrics (Using Planned Values) -->
                          <div class="row mt-4">
                            <div class="col-md-4 text-center">
                              <div class="border rounded p-3">
                                <h6 class="text-muted">Planned Profit Margin</h6>
                                <% planned_profit_margin = (@total_revenue && @total_revenue > 0) ? (((@planned_profit || 0).to_f / @total_revenue) * 100).round(2) : 0 %>
                                <div class="h4 <%= planned_profit_margin >= 0 ? 'text-success' : 'text-danger' %>">
                                  <%= planned_profit_margin %>%
                                </div>
                                <small class="text-muted">Planned Profit ÷ Revenue × 100</small>
                              </div>
                            </div>
                            
                            <div class="col-md-4 text-center">
                              <div class="border rounded p-3">
                                <h6 class="text-muted">Planned Cost Recovery</h6>
                                <% planned_cost_recovery = (@planned_cost && @planned_cost > 0) ? ((@total_revenue.to_f / @planned_cost) * 100).round(2) : 0 %>
                                <div class="h4 <%= planned_cost_recovery >= 100 ? 'text-success' : 'text-danger' %>">
                                  <%= planned_cost_recovery %>%
                                </div>
                                <small class="text-muted">Revenue ÷ Planned Cost × 100</small>
                              </div>
                            </div>
                            
                            <div class="col-md-4 text-center">
                              <div class="border rounded p-3">
                                <h6 class="text-muted">Milk Utilization</h6>
                                <% milk_utilization = (@planned_liters && @planned_liters > 0) ? ((@total_delivered.to_f / @planned_liters) * 100).round(2) : 0 %>
                                <div class="h4 <%= milk_utilization >= 80 ? 'text-success' : milk_utilization >= 60 ? 'text-warning' : 'text-danger' %>">
                                  <%= milk_utilization %>%
                                </div>
                                <small class="text-muted">Delivered ÷ Planned × 100</small>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>

                    <!-- Optimization Recommendations -->
                    <div class="col-lg-4 mb-4">
                      <div class="card border-0 bg-warning bg-opacity-10">
                        <div class="card-body">
                          <h6 class="card-title text-warning">💡 Optimization Insights</h6>
                          
                          <% if (@planned_profit || 0) < 0 %>
                            <div class="alert alert-danger">
                              <strong>⚠️ PLANNED LOSS SITUATION</strong><br>
                              Current planned loss: ₹<%= number_with_delimiter((@planned_profit || 0).abs) %>
                            </div>
                            
                            <div class="recommendations">
                              <h6 class="small text-muted">IMMEDIATE ACTIONS:</h6>
                              <ul class="small">
                                <li>Sell remaining <%= number_with_delimiter(@milk_left || 0) %>L milk</li>
                                <li>Potential recovery: ₹<%= number_with_delimiter(@milk_left_cost || 0) %></li>
                                <li>Reduce next procurement by <%= ((@milk_left || 0) * 0.8).round(0) %>L</li>
                                <li>Focus on finding new customers for regular delivery</li>
                              </ul>
                            </div>
                          <% else %>
                            <div class="alert alert-success">
                              <strong>✅ PLANNED PROFITABLE</strong><br>
                              Great procurement planning!
                            </div>
                            
                            <div class="recommendations">
                              <h6 class="small text-muted">OPTIMIZATION TIPS:</h6>
                              <ul class="small">
                                <li>Try to sell remaining <%= number_with_delimiter(@milk_left || 0) %>L milk</li>
                                <li>Could earn additional ₹<%= number_with_delimiter(@milk_left_cost || 0) %></li>
                                <li>Maintain current vendor relationships</li>
                              </ul>
                            </div>
                          <% end %>
                          
                          <div class="mt-3">
                            <h6 class="small text-muted">MILK UTILIZATION:</h6>
                            <div class="progress mb-2">
                              <div class="progress-bar bg-<%= milk_utilization >= 80 ? 'success' : milk_utilization >= 60 ? 'warning' : 'danger' %>" 
                                   style="width: <%= [milk_utilization, 100].min %>%"></div>
                            </div>
                            <small>Utilization: <%= milk_utilization %>% (Target: 80%+)</small><br>
                            <small class="text-muted">
                              <%= number_with_delimiter(@total_delivered || 0) %>L delivered of <%= number_with_delimiter(@planned_liters || 0) %>L planned
                            </small>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Reports Tab -->
    <div class="tab-pane fade <%= 'show active' if active_tab == 'reports' %>" id="reports" role="tabpanel" aria-labelledby="reports-tab">
      <!-- Report Selection and Filters -->
      <div class="row mb-4">
        <div class="col-12">
          <div class="card border-0 shadow-sm">
            <div class="card-body py-3">
              <div class="row align-items-center">
                <!-- Report Type and Period filters removed as requested -->
                <div class="col-md-3" style="display: none;">
                  <select id="reportType" class="form-select" onchange="updateReportFilters()">
                    <option value="daily">Daily Procurement vs Delivery</option>
                    <option value="vendor">Vendor Performance Report</option>
                    <option value="profit">Profit/Loss Statement</option>
                    <option value="wastage">Milk Wastage Analysis</option>
                    <option value="monthly">Monthly Summary Report</option>
                  </select>
                </div>
                <div class="col-md-2" style="display: none;">
                  <select id="reportPeriod" class="form-select" onchange="updateDateFields()">
                    <option value="today">Today</option>
                    <option value="week">This Week</option>
                    <option value="month">This Month</option>
                    <option value="custom">Custom Range</option>
                  </select>
                </div>
                <div class="col-md-2 custom-date-fields d-none">
                  <label class="form-label mb-0 fw-bold text-muted">From:</label>
                  <input type="date" id="reportFromDate" class="form-control form-control-sm" value="<%= Date.current %>">
                </div>
                <div class="col-md-2 custom-date-fields d-none">
                  <label class="form-label mb-0 fw-bold text-muted">To:</label>
                  <input type="date" id="reportToDate" class="form-control form-control-sm" value="<%= Date.current %>">
                </div>
                <!-- Generate and Export buttons removed as requested -->
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Report Content Area -->
      <div id="reportContent">
        <!-- Daily Procurement vs Delivery Report -->
        <div id="dailyReport" class="report-section">
          <div class="row">
            <div class="col-12">
              <div class="card border-0 shadow-lg">
                <div class="card-header py-4">
                  <h5 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-chart-comparison me-2"></i>Daily Calculations Report
                  </h5>
                  <p class="text-muted mb-0 small">Simple daily calculations for the selected date range</p>
                </div>
                <div class="card-body">
                  <div class="table-responsive">
                    <table class="table table-hover" id="dailyReportTable">
                      <thead class="table-light">
                        <tr>
                          <th>Date</th>
                          <th>Procured (L)</th>
                          <th>Cost (₹)</th>
                          <th>Delivered (L)</th>
                          <th>Revenue (₹)</th>
                          <th>Profit/Loss (₹)</th>
                          <th>Utilization %</th>
                          <th>Wastage (L)</th>
                        </tr>
                      </thead>
                      <tbody>
                        <% if @daily_calculations&.any? %>
                          <% @daily_calculations.each do |day| %>
                            <tr>
                              <td><%= day[:date].strftime('%b %d, %Y') %></td>
                              <td><%= number_with_delimiter(day[:procured]) %></td>
                              <td>₹<%= number_with_delimiter(day[:cost]) %></td>
                              <td><%= number_with_delimiter(day[:delivered]) %></td>
                              <td>₹<%= number_with_delimiter(day[:revenue]) %></td>
                              <td class="<%= day[:profit] >= 0 ? 'text-success' : 'text-danger' %>">
                                <%= day[:profit] >= 0 ? '+' : '' %>₹<%= number_with_delimiter(day[:profit]) %>
                              </td>
                              <td>
                                <span class="<%= day[:utilization] > 80 ? 'text-success' : day[:utilization] > 50 ? 'text-warning' : 'text-danger' %>">
                                  <%= day[:utilization] %>%
                                </span>
                              </td>
                              <td class="<%= day[:wastage] > 0 ? 'text-warning' : 'text-success' %>">
                                <%= number_with_delimiter(day[:wastage]) %>
                              </td>
                            </tr>
                          <% end %>
                        <% else %>
                          <tr>
                            <td colspan="8" class="text-center py-4">
                              <i class="fas fa-info-circle fa-2x mb-2 text-muted"></i><br>
                              <span class="text-muted">No data available for the selected date range</span>
                            </td>
                          </tr>
                        <% end %>
                      </tbody>
                    </table>
                  </div>
                  
                  <% if @daily_calculations&.any? %>
                    <!-- Summary Row -->
                    <div class="row mt-4">
                      <div class="col-12">
                        <div class="card bg-light">
                          <div class="card-body">
                            <h6 class="card-title">Summary for <%= @start_date.strftime('%b %d') %> - <%= @end_date.strftime('%b %d, %Y') %></h6>
                            <div class="row">
                              <div class="col-md-2">
                                <strong>Total Procured:</strong><br>
                                <%= number_with_delimiter(@daily_calculations.sum { |d| d[:procured] }) %> L
                              </div>
                              <div class="col-md-2">
                                <strong>Total Cost:</strong><br>
                                ₹<%= number_with_delimiter(@daily_calculations.sum { |d| d[:cost] }) %>
                              </div>
                              <div class="col-md-2">
                                <strong>Total Delivered:</strong><br>
                                <%= number_with_delimiter(@daily_calculations.sum { |d| d[:delivered] }) %> L
                              </div>
                              <div class="col-md-2">
                                <strong>Total Revenue:</strong><br>
                                ₹<%= number_with_delimiter(@daily_calculations.sum { |d| d[:revenue] }) %>
                              </div>
                              <div class="col-md-2">
                                <% total_profit = @daily_calculations.sum { |d| d[:profit] } %>
                                <strong>Net <%= total_profit >= 0 ? 'Profit' : 'Loss' %>:</strong><br>
                                <span class="<%= total_profit >= 0 ? 'text-success' : 'text-danger' %>">
                                  ₹<%= number_with_delimiter(total_profit.abs) %>
                                </span>
                              </div>
                              <div class="col-md-2">
                                <% total_procured = @daily_calculations.sum { |d| d[:procured] } %>
                                <% total_delivered = @daily_calculations.sum { |d| d[:delivered] } %>
                                <% avg_utilization = total_procured > 0 ? (total_delivered / total_procured * 100).round(1) : 0 %>
                                <strong>Avg Utilization:</strong><br>
                                <span class="<%= avg_utilization > 80 ? 'text-success' : avg_utilization > 50 ? 'text-warning' : 'text-danger' %>">
                                  <%= avg_utilization %>%
                                </span>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  <% end %>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Vendor Performance Report -->
        <div id="vendorReport" class="report-section d-none">
          <div class="row">
            <div class="col-12">
              <div class="card border-0 shadow-lg">
                <div class="card-header py-4">
                  <h5 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-users me-2"></i>Vendor Performance Report
                  </h5>
                  <p class="text-muted mb-0 small">Analyze vendor reliability, quality, and profitability</p>
                </div>
                <div class="card-body">
                  <div class="table-responsive">
                    <table class="table table-hover" id="vendorReportTable">
                      <thead class="table-light">
                        <tr>
                          <th>Vendor Name</th>
                          <th>Total Orders</th>
                          <th>Completed</th>
                          <th>Reliability %</th>
                          <th>Avg Price (₹/L)</th>
                          <th>Total Quantity (L)</th>
                          <th>Total Cost (₹)</th>
                          <th>Total Profit (₹)</th>
                          <th>Performance Score</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr>
                          <td colspan="9" class="text-center py-4">
                            <i class="fas fa-spinner fa-spin fa-2x mb-2"></i><br>
                            <span class="text-muted">Click "Generate" to load vendor performance data</span>
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Profit/Loss Statement -->
        <div id="profitReport" class="report-section d-none">
          <div class="row">
            <!-- Summary Cards -->
            <div class="col-lg-3 col-md-6 mb-4">
              <div class="card border-0 shadow-lg h-100 gradient-info">
                <div class="card-body p-4 text-center">
                  <div class="icon-circle-lg bg-white bg-opacity-25 mx-auto mb-3">
                    <i class="fas fa-shopping-cart fa-2x text-white"></i>
                  </div>
                  <div class="text-xs font-weight-bold text-white text-uppercase mb-2 opacity-90">
                    Total Procurement Cost
                  </div>
                  <div class="h4 mb-0 font-weight-bold text-white" id="totalProcurementCost">
                    ₹0
                  </div>
                </div>
              </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-4">
              <div class="card border-0 shadow-lg h-100 gradient-success">
                <div class="card-body p-4 text-center">
                  <div class="icon-circle-lg bg-white bg-opacity-25 mx-auto mb-3">
                    <i class="fas fa-rupee-sign fa-2x text-white"></i>
                  </div>
                  <div class="text-xs font-weight-bold text-white text-uppercase mb-2 opacity-90">
                    Total Revenue
                  </div>
                  <div class="h4 mb-0 font-weight-bold text-white" id="totalRevenue">
                    ₹0
                  </div>
                </div>
              </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-4">
              <div class="card border-0 shadow-lg h-100 gradient-warning">
                <div class="card-body p-4 text-center">
                  <div class="icon-circle-lg bg-white bg-opacity-25 mx-auto mb-3">
                    <i class="fas fa-chart-line fa-2x text-white"></i>
                  </div>
                  <div class="text-xs font-weight-bold text-white text-uppercase mb-2 opacity-90">
                    Gross Profit
                  </div>
                  <div class="h4 mb-0 font-weight-bold text-white" id="grossProfit">
                    ₹0
                  </div>
                </div>
              </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-4">
              <div class="card border-0 shadow-lg h-100 gradient-primary">
                <div class="card-body p-4 text-center">
                  <div class="icon-circle-lg bg-white bg-opacity-25 mx-auto mb-3">
                    <i class="fas fa-percentage fa-2x text-white"></i>
                  </div>
                  <div class="text-xs font-weight-bold text-white text-uppercase mb-2 opacity-90">
                    Profit Margin
                  </div>
                  <div class="h4 mb-0 font-weight-bold text-white" id="profitMargin">
                    0%
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Detailed P&L Table -->
          <div class="row">
            <div class="col-12">
              <div class="card border-0 shadow-lg">
                <div class="card-header py-4">
                  <h5 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-calculator me-2"></i>Detailed Profit & Loss Statement
                  </h5>
                </div>
                <div class="card-body">
                  <div class="table-responsive">
                    <table class="table table-hover" id="profitLossTable">
                      <thead class="table-light">
                        <tr>
                          <th>Period</th>
                          <th>Procurement Cost (₹)</th>
                          <th>Delivery Revenue (₹)</th>
                          <th>Gross Profit (₹)</th>
                          <th>Wastage Loss (₹)</th>
                          <th>Net Profit (₹)</th>
                          <th>Margin %</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr>
                          <td colspan="7" class="text-center py-4">
                            <i class="fas fa-spinner fa-spin fa-2x mb-2"></i><br>
                            <span class="text-muted">Click "Generate" to load profit/loss data</span>
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Wastage Analysis -->
        <div id="wastageReport" class="report-section d-none">
          <div class="row">
            <div class="col-12">
              <div class="card border-0 shadow-lg">
                <div class="card-header py-4">
                  <h5 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-exclamation-triangle me-2"></i>Milk Wastage Analysis
                  </h5>
                  <p class="text-muted mb-0 small">Track milk wastage and identify improvement opportunities</p>
                </div>
                <div class="card-body">
                  <div class="table-responsive">
                    <table class="table table-hover" id="wastageReportTable">
                      <thead class="table-light">
                        <tr>
                          <th>Date</th>
                          <th>Procured (L)</th>
                          <th>Delivered (L)</th>
                          <th>Wasted (L)</th>
                          <th>Wastage %</th>
                          <th>Wastage Cost (₹)</th>
                          <th>Reason</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr>
                          <td colspan="7" class="text-center py-4">
                            <i class="fas fa-spinner fa-spin fa-2x mb-2"></i><br>
                            <span class="text-muted">Click "Generate" to load wastage analysis</span>
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Monthly Summary -->
        <div id="monthlyReport" class="report-section d-none">
          <div class="row">
            <div class="col-12">
              <div class="card border-0 shadow-lg">
                <div class="card-header py-4">
                  <h5 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-calendar-check me-2"></i>Monthly Summary Report
                  </h5>
                  <p class="text-muted mb-0 small">Comprehensive monthly overview of procurement operations</p>
                </div>
                <div class="card-body">
                  <div class="table-responsive">
                    <table class="table table-hover" id="monthlyReportTable">
                      <thead class="table-light">
                        <tr>
                          <th>Month</th>
                          <th>Total Vendors</th>
                          <th>Procurement (L)</th>
                          <th>Deliveries (L)</th>
                          <th>Utilization %</th>
                          <th>Cost (₹)</th>
                          <th>Revenue (₹)</th>
                          <th>Profit (₹)</th>
                          <th>Growth %</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr>
                          <td colspan="9" class="text-center py-4">
                            <i class="fas fa-spinner fa-spin fa-2x mb-2"></i><br>
                            <span class="text-muted">Click "Generate" to load monthly summary</span>
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Create Procurement Tab -->
    <div class="tab-pane fade <%= 'show active' if active_tab == 'procurement' %>" id="procurement" role="tabpanel" aria-labelledby="procurement-tab">
      <div class="row justify-content-center">
        <div class="col-xl-8 col-lg-10">
          <div class="card border-0 shadow-lg">
            <div class="card-header py-4">
              <h5 class="m-0 font-weight-bold text-primary">
                <i class="fas fa-plus-circle me-2"></i>Create New Procurement Schedule
              </h5>
              <p class="text-muted mb-0 small">Set up daily milk procurement from vendors</p>
            </div>
            
            <div class="card-body">
              <%= form_with model: ProcurementSchedule.new, url: procurement_schedules_path, local: true, class: "row g-3" do |form| %>
                <!-- Product Selection (PROMINENTLY DISPLAYED) -->
                <div class="col-12 mb-4">
                  <div class="alert alert-info border-0">
                    <h6 class="alert-heading">
                      <i class="fas fa-box text-primary me-2"></i>Product Selection
                    </h6>
                    <%= form.label :product_id, "Select Product", class: "form-label fw-bold" %>
                    
                    <!-- Search Input for Product -->
                    <div class="position-relative mb-2">
                      <input type="text" id="product-search" class="form-control form-control-lg" 
                             placeholder="🔍 Start typing to search products (e.g., 'milk', 'butter')..." 
                             autocomplete="off">
                      <div id="product-search-results" class="position-absolute w-100" style="z-index: 1000; display: none; max-height: 300px; overflow-y: auto;">
                        <!-- Search results will be populated here -->
                      </div>
                    </div>
                    
                    <!-- Hidden select for form submission -->
                    <%= form.hidden_field :product_id, id: "selected-product-id" %>
                    
                    <!-- Selected Product Display -->
                    <div id="selected-product-display" class="alert alert-success" style="display: none;">
                      <div class="d-flex justify-content-between align-items-center">
                        <div id="selected-product-info">
                          <!-- Product info will be displayed here -->
                        </div>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="clearProductSelection()">
                          <i class="fas fa-times"></i> Change
                        </button>
                      </div>
                    </div>
                    
                    <!-- Product Dropdown (fallback) -->
                    <div id="product-dropdown-container">
                      <%= form.select :product_id, 
                          options_from_collection_for_select(Product.all, :id, 
                            ->(product) { "#{product.name} (#{product.unit_type}) - ₹#{product.price}" }),
                          { prompt: "🔍 Or select from dropdown (#{Product.count} available products)" },
                          { class: "form-select form-select-lg", id: "product-dropdown" } %>
                    </div>
                    
                    <div class="form-text mt-2">
                      <i class="fas fa-lightbulb text-warning me-1"></i>
                      <strong>Selecting a product will automatically set the unit type and suggested pricing.</strong>
                    </div>
                  </div>
                </div>

                <!-- Vendor Information -->
                <div class="col-md-6">
                  <%= form.label :vendor_name, "Vendor/Farm Name", class: "form-label fw-bold" %>
                  <%= form.text_field :vendor_name, 
                      class: "form-control",
                      placeholder: "e.g., Nandi Milk Goshala",
                      required: true %>
                  <div class="form-text">
                    <i class="fas fa-info-circle me-1"></i>Name of the farm or milk vendor
                  </div>
                </div>

                <div class="col-md-6">
                  <%= form.label :unit, "Unit of Measurement", class: "form-label fw-bold" %>
                  <%= form.select :unit, 
                      options_for_select([
                        ['Liters', 'liters'],
                        ['Gallons', 'gallons']
                      ], 'liters'), 
                      {}, { class: "form-select", required: true } %>
                </div>

                <!-- Date Range -->
                <div class="col-md-6">
                  <%= form.label :from_date, "From Date", class: "form-label fw-bold" %>
                  <%= form.date_field :from_date, class: "form-control", required: true, 
                      value: Date.current %>
                </div>

                <div class="col-md-6">
                  <%= form.label :to_date, "To Date", class: "form-label fw-bold" %>
                  <%= form.date_field :to_date, class: "form-control", required: true,
                      value: Date.current + 30.days %>
                </div>

                <!-- Quantities and Pricing -->
                <div class="col-md-4">
                  <%= form.label :quantity, "Daily Quantity", class: "form-label fw-bold" %>
                  <%= form.number_field :quantity, 
                      class: "form-control",
                      placeholder: "100.00",
                      step: 0.01,
                      min: 0.01,
                      required: true %>
                  <div class="form-text">Liters per day</div>
                </div>

                <div class="col-md-4">
                  <%= form.label :buying_price, "Buying Price (₹/L)", class: "form-label fw-bold" %>
                  <%= form.number_field :buying_price, 
                      class: "form-control",
                      placeholder: "90.00",
                      step: 0.01,
                      min: 0.01,
                      required: true %>
                  <div class="form-text">Cost per liter</div>
                </div>

                <div class="col-md-4">
                  <%= form.label :selling_price, "Selling Price (₹/L)", class: "form-label fw-bold" %>
                  <%= form.number_field :selling_price, 
                      class: "form-control",
                      placeholder: "100.00",
                      step: 0.01,
                      min: 0.01,
                      required: true %>
                  <div class="form-text">Price per liter to customers</div>
                </div>

                <!-- Additional Information -->
                <div class="col-12">
                  <%= form.label :notes, "Notes (Optional)", class: "form-label fw-bold" %>
                  <%= form.text_area :notes, class: "form-control", rows: 3,
                      placeholder: "Any additional notes about this procurement schedule..." %>
                </div>

                <!-- Submit Buttons -->
                <div class="col-12">
                  <div class="d-flex gap-2">
                    <%= form.submit "Create Procurement Schedule", class: "btn btn-primary btn-lg" %>
                    <button type="button" class="btn btn-secondary btn-lg" onclick="resetProcurementForm()">
                      Reset Form
                    </button>
                  </div>
                </div>
              <% end %>

              <!-- Info Box -->
              <div class="alert alert-info mt-4">
                <i class="fas fa-lightbulb me-2"></i>
                <strong>How it works:</strong> When you create a procurement schedule, the system will automatically generate daily procurement assignments for each day in the date range. Each assignment will have the planned quantity and prices you specify.
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Simple Schedules Tab -->
    <div class="tab-pane fade <%= 'show active' if active_tab == 'schedules' %>" id="schedules" role="tabpanel" aria-labelledby="schedules-tab">
      <div class="row">
        <div class="col-12">
          <div class="card border-0 shadow-sm">
            <div class="card-header bg-primary text-white">
              <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                  <i class="fas fa-list me-2"></i>Procurement Schedules
                </h5>
                <button class="btn btn-light btn-sm" onclick="refreshSchedulesList()">
                  <i class="fas fa-sync me-1"></i>Refresh
                </button>
              </div>
            </div>
            <div class="card-body">
              <div class="table-responsive">
                <table class="table table-striped table-hover">
                  <thead class="table-dark">
                    <tr>
                      <th>Vendor</th>
                      <th>Product</th>
                      <th>Duration</th>
                      <th>Quantity</th>
                      <th>Buying Price</th>
                      <th>Selling Price</th>
                      <th>Status</th>
                      <th>Actions</th>
                    </tr>
                  </thead>
                  <tbody id="schedules-table-body">
                    <% @procurement_schedules&.each do |schedule| %>
                      <tr id="schedule-row-<%= schedule.id %>">
                        <td><%= schedule.vendor_name %></td>
                        <td><%= schedule.product&.name || 'N/A' %></td>
                        <td>
                          <%= schedule.from_date.strftime('%d %b') %> - 
                          <%= schedule.to_date.strftime('%d %b %Y') %>
                        </td>
                        <td><%= schedule.quantity %> <%= schedule.unit %></td>
                        <td>₹<%= schedule.buying_price %></td>
                        <td>₹<%= schedule.selling_price %></td>
                        <td>
                          <span class="badge bg-<%= schedule.status == 'active' ? 'success' : 'secondary' %>">
                            <%= schedule.status.capitalize %>
                          </span>
                        </td>
                        <td>
                          <button class="btn btn-sm btn-outline-primary me-1" 
                                  onclick="editSchedule(<%= schedule.id %>)"
                                  title="Edit">
                            <i class="fas fa-edit"></i>
                          </button>
                          <button class="btn btn-sm btn-outline-danger" 
                                  onclick="deleteScheduleSimple(<%= schedule.id %>)"
                                  title="Delete">
                            <i class="fas fa-trash"></i>
                          </button>
                        </td>
                      </tr>
                    <% end %>
                  </tbody>
                </table>
                <% if @procurement_schedules.nil? || @procurement_schedules.empty? %>
                  <div class="text-center text-muted py-4">
                    <i class="fas fa-inbox fa-3x mb-3 text-muted"></i>
                    <h5>No procurement schedules found</h5>
                    <p class="mb-2">There are no procurement schedules to display.</p>
                    <small class="text-muted">
                      Create your first schedule using the "Create Procurement" tab above.
                    </small>
                    <% if Rails.env.development? %>
                      <div class="mt-3 small text-warning">
                        <strong>Debug info:</strong><br>
                        @procurement_schedules: <%= @procurement_schedules.class %><br>
                        Count: <%= @procurement_schedules&.count || 'nil' %><br>
                        Tab: <%= params[:tab] %><br>
                        User ID: <%= current_user&.id || 'nil' %>
                      </div>
                    <% end %>
                  </div>
                <% end %>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>


    <!-- Procurement Calendar Tab -->
    <div class="tab-pane fade <%= 'show active' if active_tab == 'calendar' %>" id="calendar" role="tabpanel" aria-labelledby="calendar-tab">
      <div class="card border-0 shadow-lg">
        <!-- Card header removed to prevent duplicate heading -->
        
        <div class="card-body p-0" id="calendarContent">
          <!-- Calendar will be loaded here dynamically -->
          <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
              <span class="visually-hidden">Loading...</span>
            </div>
            <h4 class="mt-3">Loading Procurement Calendar...</h4>
            <p class="text-muted">Please wait while we load your calendar</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Custom Styles -->
<style>
/* Product Dropdown Styling */
#product-dropdown {
  border: 3px solid #4e73df !important;
  font-size: 1.1rem;
  font-weight: 600;
  background-color: #f8f9fc;
}

#product-dropdown:focus {
  border-color: #2e59d9 !important;
  box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25) !important;
}

.alert-info {
  background: linear-gradient(135deg, rgba(78, 115, 223, 0.1) 0%, rgba(78, 115, 223, 0.05) 100%);
  border: 2px solid rgba(78, 115, 223, 0.3);
}

/* Tab Pills Styling */
.nav-pills .nav-link {
  border-radius: 0.5rem;
  padding: 1rem 1.5rem;
  margin: 0 0.25rem;
  font-weight: 600;
  color: #6c757d;
  background: transparent;
  border: 2px solid transparent;
  transition: all 0.3s ease;
}

.nav-pills .nav-link:hover {
  background: rgba(108, 117, 125, 0.1);
  color: #495057;
}

.nav-pills .nav-link.active {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border-color: #667eea;
  transform: translateY(-2px);
  box-shadow: 0 0.5rem 1rem rgba(102, 126, 234, 0.25);
}

/* Gradient Card Styles */
.gradient-primary {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.gradient-info {
  background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
}

.gradient-warning {
  background: linear-gradient(135deg, #fdcb6e 0%, #e17055 100%);
}

.gradient-success {
  background: linear-gradient(135deg, #55a3ff 0%, #003d82 100%);
}

.gradient-danger {
  background: linear-gradient(135deg, #fd79a8 0%, #e84393 100%);
}

.gradient-teal {
  background: linear-gradient(135deg, #20bf6b 0%, #26d0ce 100%);
}

/* Icon Circle */
.icon-circle-lg {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Form Enhancements */
.form-control:focus,
.form-select:focus {
  border-color: #667eea;
  box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
}

/* Table Styling */
.table-hover tbody tr:hover {
  background-color: rgba(102, 126, 234, 0.05);
}

/* Custom Date Fields Toggle */
.custom-dates {
  transition: all 0.3s ease;
}

.custom-dates.show {
  display: flex !important;
}

/* Product Search Enhancements */
#product-search {
  border: 3px solid #4e73df !important;
  font-size: 1.1rem;
  font-weight: 600;
}
#product-search-results {
  background: #fff;
  border-radius: 0.5rem;
  margin-top: 0.25rem;
}
.product-option {
  cursor: pointer;
  transition: all 0.2s ease;
}
.product-option:hover {
  background-color: rgba(78, 115, 223, 0.05);
  transform: translateX(2px);
}
#selected-product-display {
  border: 2px solid #28a745;
  background: linear-gradient(135deg, rgba(40, 167, 69, 0.1) 0%, rgba(40, 167, 69, 0.05) 100%);
}

/* Milk Analytics Product Search Styling */
#milk-product-search {
  border: 2px solid #4e73df !important;
  font-size: 1.1rem;
  font-weight: 500;
  border-radius: 0.5rem !important;
  background: linear-gradient(135deg, #f8f9fc 0%, #ffffff 100%);
  transition: all 0.3s ease;
}

#milk-product-search:focus {
  border-color: #2e59d9 !important;
  box-shadow: 0 0 0 0.25rem rgba(78, 115, 223, 0.25) !important;
  background: #ffffff;
}

#milk-product-search-results {
  background: #fff;
  border-radius: 0.75rem;
  box-shadow: 0 0.75rem 2rem rgba(0, 0, 0, 0.15);
  border: 1px solid rgba(78, 115, 223, 0.2);
}

.product-option-milk {
  cursor: pointer;
  transition: all 0.2s ease;
  border: none !important;
}

.product-option-milk:hover {
  background: linear-gradient(135deg, rgba(78, 115, 223, 0.08) 0%, rgba(78, 115, 223, 0.04) 100%) !important;
  transform: translateX(3px);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.product-option-milk:active {
  transform: translateX(1px);
  background: linear-gradient(135deg, rgba(78, 115, 223, 0.12) 0%, rgba(78, 115, 223, 0.06) 100%) !important;
}

#selected-milk-product-display {
  border: 2px solid #28a745;
  border-radius: 0.5rem;
  background: linear-gradient(135deg, rgba(40, 167, 69, 0.1) 0%, rgba(40, 167, 69, 0.05) 100%);
}

#clear-product-search {
  border-left: none !important;
  background: rgba(220, 53, 69, 0.1);
  color: #dc3545;
  transition: all 0.2s ease;
}

#clear-product-search:hover {
  background: #dc3545;
  color: white;
}

.input-group-text.bg-primary {
  background: linear-gradient(135deg, #4e73df 0%, #224abe 100%) !important;
  border: 2px solid #4e73df !important;
  border-right: none !important;
}
</style>

<!-- JavaScript for Tab and Form Functionality -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Initialize date range selector
  const dateRangeSelect = document.querySelector('select[name="date_range"]');
  if (dateRangeSelect) {
    toggleCustomDates();
  }
  
  // Initialize product search functionality
  initializeProductSearch();
  
  // Initialize milk analytics product search (moved to end after function definition)
  setTimeout(function() {
    if (typeof initializeMilkProductSearch === 'function') {
      initializeMilkProductSearch();
    }
  }, 100);
});

function toggleCustomDates() {
  const dateRangeSelect = document.querySelector('select[name="date_range"]');
  const customDates = document.querySelector('.custom-dates');
  
  if (dateRangeSelect && customDates) {
    if (dateRangeSelect.value === 'custom') {
      customDates.classList.remove('d-none');
      customDates.classList.add('show');
    } else {
      customDates.classList.add('d-none');
      customDates.classList.remove('show');
    }
  }
}

function resetProcurementForm() {
  const form = document.querySelector('#procurement form');
  if (form) {
    form.reset();
    // Reset product selection
    clearProductSelection();
    // Reset to default values
    document.querySelector('#procurement_schedule_from_date').value = '<%= Date.current %>';
    document.querySelector('#procurement_schedule_to_date').value = '<%= Date.current + 30.days %>';
  }
}

// Product Search Functionality
let productSearchTimeout;
let availableProducts = [
  <% Product.all.each_with_index do |product, index| %>
    {
      id: <%= product.id %>,
      name: "<%= product.name.gsub('"', '\\"') %>",
      unit_type: "<%= product.unit_type %>",
      price: "<%= product.price %>",
      available_quantity: "<%= product.available_quantity %>",
      description: "<%= product.description&.gsub('"', '\\"') %>",
      category: "<%= product.category_name.gsub('"', '\\"') %>"
    }<%= index < Product.all.count - 1 ? ',' : '' %>
  <% end %>
];

function initializeProductSearch() {
  const searchInput = document.getElementById('product-search');
  const resultsContainer = document.getElementById('product-search-results');
  const selectedDisplay = document.getElementById('selected-product-display');
  const selectedInfo = document.getElementById('selected-product-info');
  const selectedProductId = document.getElementById('selected-product-id');
  const dropdownContainer = document.getElementById('product-dropdown-container');
  const originalDropdown = document.getElementById('product-dropdown');

  if (!searchInput) return;

  // Handle search input
  searchInput.addEventListener('input', function() {
    clearTimeout(productSearchTimeout);
    const query = this.value.trim().toLowerCase();
    
    if (query.length < 2) {
      resultsContainer.style.display = 'none';
      return;
    }

    productSearchTimeout = setTimeout(() => {
      searchProducts(query);
    }, 300);
  });

  // Handle dropdown selection as fallback
  if (originalDropdown) {
    originalDropdown.addEventListener('change', function() {
      if (this.value) {
        const product = availableProducts.find(p => p.id == this.value);
        if (product) {
          selectProduct(product);
        }
      }
    });
  }

  // Hide results when clicking outside
  document.addEventListener('click', function(event) {
    if (!searchInput.contains(event.target) && !resultsContainer.contains(event.target)) {
      resultsContainer.style.display = 'none';
    }
  });
}

function searchProducts(query) {
  const resultsContainer = document.getElementById('product-search-results');
  
  const filteredProducts = availableProducts.filter(product => 
    product.name.toLowerCase().includes(query) ||
    product.description.toLowerCase().includes(query) ||
    product.category.toLowerCase().includes(query) ||
    product.unit_type.toLowerCase().includes(query)
  );

  if (filteredProducts.length === 0) {
    resultsContainer.innerHTML = `
      <div class="card shadow-sm">
        <div class="card-body text-center py-4">
          <i class="fas fa-search fa-2x text-muted mb-2"></i>
          <p class="mb-0 text-muted">No products found for "${query}"</p>
        </div>
      </div>
    `;
  } else {
    resultsContainer.innerHTML = `
      <div class="card shadow-lg border-primary">
        <div class="card-header bg-primary text-white py-2">
          <small><i class="fas fa-search me-1"></i>Found ${filteredProducts.length} product(s)</small>
        </div>
        <div class="list-group list-group-flush">
          ${filteredProducts.map(product => `
            <div class="list-group-item list-group-item-action cursor-pointer product-option" 
                 onclick="selectProduct(${JSON.stringify(product).replace(/"/g, '&quot;')})">
              <div class="d-flex justify-content-between align-items-start">
                <div class="flex-grow-1">
                  <h6 class="mb-1 text-primary">${product.name}</h6>
                  <p class="mb-1 small text-muted">${product.description || 'No description'}</p>
                  <div class="d-flex gap-3">
                    <small class="text-success"><i class="fas fa-tag me-1"></i>₹${product.price}/${product.unit_type}</small>
                    <small class="text-info"><i class="fas fa-box me-1"></i>${product.available_quantity} ${product.unit_type}</small>
                    <small class="text-warning"><i class="fas fa-folder me-1"></i>${product.category}</small>
                  </div>
                </div>
                <div class="text-end">
                  <span class="badge bg-success">Available</span>
                </div>
              </div>
            </div>
          `).join('')}
        </div>
      </div>
    `;
  }
  
  resultsContainer.style.display = 'block';
}

function selectProduct(product) {
  const searchInput = document.getElementById('product-search');
  const resultsContainer = document.getElementById('product-search-results');
  const selectedDisplay = document.getElementById('selected-product-display');
  const selectedInfo = document.getElementById('selected-product-info');
  const selectedProductId = document.getElementById('selected-product-id');
  const dropdownContainer = document.getElementById('product-dropdown-container');

  // Update hidden field
  selectedProductId.value = product.id;

  // Update search input
  searchInput.value = product.name;

  // Show selected product info
  selectedInfo.innerHTML = `
    <div>
      <h6 class="mb-1 text-success">✓ Selected: ${product.name}</h6>
      <div class="d-flex gap-3 small">
        <span class="text-muted"><i class="fas fa-tag me-1"></i>Price: ₹${product.price}/${product.unit_type}</span>
        <span class="text-muted"><i class="fas fa-box me-1"></i>Available: ${product.available_quantity} ${product.unit_type}</span>
        <span class="text-muted"><i class="fas fa-folder me-1"></i>Category: ${product.category}</span>
      </div>
    </div>
  `;

  // Auto-fill form fields based on product selection
  const unitSelect = document.querySelector('select[name="procurement_schedule[unit]"]');
  const sellingPriceInput = document.querySelector('input[name="procurement_schedule[selling_price]"]');

  if (unitSelect) {
    // Set unit based on product unit type
    const unitMapping = {
      'liters': 'liters',
      'gallons': 'gallons', 
      'kg': 'kg',
      'pounds': 'pounds'
    };
    unitSelect.value = unitMapping[product.unit_type] || 'liters';
  }

  if (sellingPriceInput && !sellingPriceInput.value) {
    // Suggest selling price (add 10% margin to product price)
    sellingPriceInput.value = (parseFloat(product.price) * 1.1).toFixed(2);
  }

  // Hide elements
  resultsContainer.style.display = 'none';
  selectedDisplay.style.display = 'block';
  dropdownContainer.style.display = 'none';

  // Trigger form validation/calculation updates if available
  if (typeof updateCalculationPreview === 'function') {
    updateCalculationPreview();
  }
}

function clearProductSelection() {
  const searchInput = document.getElementById('product-search');
  const selectedDisplay = document.getElementById('selected-product-display');
  const selectedProductId = document.getElementById('selected-product-id');
  const dropdownContainer = document.getElementById('product-dropdown-container');
  const originalDropdown = document.getElementById('product-dropdown');

  // Clear values
  searchInput.value = '';
  selectedProductId.value = '';
  if (originalDropdown) originalDropdown.value = '';

  // Reset display
  selectedDisplay.style.display = 'none';
  dropdownContainer.style.display = 'block';

  // Focus back to search
  searchInput.focus();
}

// Calendar Navigation Functions
let currentCalendarDate = new Date();

function previousMonth() {
  currentCalendarDate.setMonth(currentCalendarDate.getMonth() - 1);
  loadCalendarData();
}

function nextMonth() {
  currentCalendarDate.setMonth(currentCalendarDate.getMonth() + 1);
  loadCalendarData();
}

function goToToday() {
  currentCalendarDate = new Date();
  loadCalendarData();
}

function loadCalendarData() {
  console.log('loadCalendarData called');
  const calendarContainer = document.getElementById('calendarContent');
  
  if (!calendarContainer) {
    console.error('calendarContent element not found');
    return;
  }

  console.log('Calendar container found, showing loading state');

  // Show loading state
  calendarContainer.innerHTML = `
    <div class="text-center py-5">
      <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
        <span class="visually-hidden">Loading...</span>
      </div>
      <h4 class="mt-3">Loading Procurement Calendar...</h4>
      <p class="text-muted">Please wait while we load your calendar</p>
    </div>
  `;

  // Format date for API call
  const dateStr = currentCalendarDate ? currentCalendarDate.toISOString().split('T')[0] : new Date().toISOString().split('T')[0];
  const url = `/milk-supply-analytics/calendar_view?date=${dateStr}&view_type=month`;
  
  console.log('Fetching calendar data from:', url);
  
  // Fetch calendar data from our modern calendar view
  fetch(url, {
    method: 'GET',
    headers: {
      'Accept': 'text/html',
      'X-Requested-With': 'XMLHttpRequest',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content
    }
  })
  .then(response => {
    console.log('Response status:', response.status);
    console.log('Response headers:', response.headers);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response.text();
  })
  .then(html => {
    console.log('HTML response length:', html.length);
    
    // Create a temporary container to parse the response
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = html;
    
    // Extract the calendar content (everything inside the main container)
    const calendarContent = tempDiv.querySelector('.container-fluid');
    if (calendarContent) {
      console.log('Calendar content found, updating container');
      calendarContainer.innerHTML = calendarContent.innerHTML;
      
      // Initialize any JavaScript functionality after loading
      initializeCalendarFeatures();
    } else {
      console.error('Calendar content not found in response');
      // Try to show the entire response for debugging
      calendarContainer.innerHTML = html;
    }
  })
  .catch(error => {
    console.error('Error loading calendar:', error);
    calendarContainer.innerHTML = `
      <div class="text-center py-5">
        <i class="fas fa-exclamation-triangle fa-3x text-danger mb-3"></i>
        <h4>Error Loading Calendar</h4>
        <p class="text-muted">Failed to load calendar data. Please try refreshing the page or try again.</p>
        <div class="mt-3">
          <button class="btn btn-primary me-2" onclick="loadCalendarData()">
            <i class="fas fa-refresh me-1"></i>Retry
          </button>
          <button class="btn btn-outline-secondary" onclick="window.location.reload()">
            <i class="fas fa-sync-alt me-1"></i>Refresh Page
          </button>
          <button class="btn btn-outline-info" onclick="window.open('/milk-supply-analytics/calendar_view', '_blank')">
            <i class="fas fa-external-link-alt me-1"></i>Open in New Tab
          </button>
        </div>
        <small class="text-muted d-block mt-2">Error: ${error.message}</small>
        <small class="text-muted d-block">URL: /milk-supply-analytics/calendar_view?date=${dateStr}&view_type=month</small>
      </div>
    `;
  });
}

// Initialize calendar features after dynamic loading
function initializeCalendarFeatures() {
  // Initialize Bootstrap tooltips
  if (typeof bootstrap !== 'undefined') {
    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    tooltipTriggerList.map(function (tooltipTriggerEl) {
      return new bootstrap.Tooltip(tooltipTriggerEl);
    });
  }
  
  // Re-attach event listeners for editable fields
  document.querySelectorAll('.editable-field').forEach(field => {
    field.addEventListener('click', function() {
      const assignmentId = this.dataset.assignmentId;
      const fieldName = this.dataset.field;
      quickEditField(assignmentId, fieldName);
    });
  });
}

// Helper function for inline editing (if not already defined in calendar view)
function quickEditField(assignmentId, fieldName) {
  const fieldElement = document.querySelector(`[data-assignment-id="${assignmentId}"] [data-field="${fieldName}"]`);
  if (!fieldElement) return;
  
  const currentValue = fieldElement.textContent.replace('L', '').replace('Click to add', '').trim();
  
  // Create inline input
  const input = document.createElement('input');
  input.type = fieldName === 'actual_quantity' ? 'number' : 'text';
  input.value = currentValue;
  input.className = 'form-control form-control-sm';
  input.style.width = '80px';
  input.style.display = 'inline-block';
  
  // Replace content with input
  const originalContent = fieldElement.innerHTML;
  fieldElement.innerHTML = '';
  fieldElement.appendChild(input);
  input.focus();
  input.select();
  
  // Handle save/cancel
  function saveField() {
    const newValue = input.value;
    if (newValue !== currentValue) {
      const data = {};
      data[fieldName] = parseFloat(newValue) || newValue;
      
      // Update via API
      fetch(`/milk-assignments/${assignmentId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
        },
        body: JSON.stringify({ procurement_assignment: data })
      })
      .then(response => {
        if (response.ok) {
          fieldElement.innerHTML = newValue ? `${newValue}L` : '<span class="text-muted">Click to add</span>';
          showToast('Assignment updated successfully!', 'success');
        } else {
          throw new Error('Update failed');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        fieldElement.innerHTML = originalContent;
        showToast('Error updating assignment', 'error');
      });
    } else {
      fieldElement.innerHTML = originalContent;
    }
  }
  
  function cancelEdit() {
    fieldElement.innerHTML = originalContent;
  }
  
  input.addEventListener('blur', saveField);
  input.addEventListener('keydown', function(e) {
    if (e.key === 'Enter') {
      saveField();
    } else if (e.key === 'Escape') {
      cancelEdit();
    }
  });
}

// Toast notification helper
function showToast(message, type = 'info') {
  // Simple toast notification
  const toastHtml = `
    <div class="toast align-items-center text-white bg-${type === 'error' ? 'danger' : type === 'success' ? 'success' : 'primary'} border-0" style="position: fixed; top: 20px; right: 20px; z-index: 1050;">
      <div class="d-flex">
        <div class="toast-body">${message}</div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
      </div>
    </div>
  `;
  
  document.body.insertAdjacentHTML('beforeend', toastHtml);
  
  const toastElement = document.body.lastElementChild;
  if (typeof bootstrap !== 'undefined') {
    const toast = new bootstrap.Toast(toastElement);
    toast.show();
    
    toastElement.addEventListener('hidden.bs.toast', () => {
      toastElement.remove();
    });
  } else {
    setTimeout(() => {
      toastElement.remove();
    }, 3000);
  }
}

// Fallback function to load calendar via iframe
function loadCalendarFallback() {
  console.log('Loading calendar via iframe fallback');
  const calendarContainer = document.getElementById('calendarContent');
  if (!calendarContainer) return;

  calendarContainer.innerHTML = `
    <div class="text-center py-3 mb-3">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading calendar...</span>
      </div>
      <p class="mt-2 text-muted">Loading calendar in frame...</p>
    </div>
  `;

  // Create iframe to load calendar with loading handling
  setTimeout(() => {
    calendarContainer.innerHTML = `
      <div class="position-relative" style="min-height: 800px;">
        <iframe src="/milk-supply-analytics/calendar_view" 
                width="100%" 
                height="800" 
                frameborder="0" 
                style="border: none; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);"
                onload="console.log('Calendar iframe loaded successfully')"
                onerror="console.error('Calendar iframe failed to load')">
          <p>Your browser does not support iframes. <a href="/milk-supply-analytics/calendar_view" target="_blank">Click here to open the calendar</a></p>
        </iframe>
      </div>
    `;
  }, 500);
}

// Manual calendar load function for testing
function loadCalendarManual() {
  console.log('Manual calendar load triggered');
  const calendarContainer = document.getElementById('calendarContent');
  if (!calendarContainer) {
    console.error('Calendar container not found');
    return;
  }

  // Direct navigation approach
  window.location.href = '/milk-supply-analytics/calendar_view';
}

// Auto-submit form when date range changes (except custom)
document.addEventListener('change', function(e) {
  if (e.target.name === 'date_range' && e.target.value !== 'custom') {
    e.target.closest('form').submit();
  }
});

// Reports Tab Functionality
function updateReportFilters() {
  const reportType = document.getElementById('reportType').value;
  
  // Hide all report sections
  document.querySelectorAll('.report-section').forEach(section => {
    section.classList.add('d-none');
  });
  
  // Show selected report section
  const sectionMap = {
    'daily': 'dailyReport',
    'vendor': 'vendorReport', 
    'profit': 'profitReport',
    'wastage': 'wastageReport',
    'monthly': 'monthlyReport'
  };
  
  const targetSection = document.getElementById(sectionMap[reportType]);
  if (targetSection) {
    targetSection.classList.remove('d-none');
  }
}

function updateDateFields() {
  const period = document.getElementById('reportPeriod').value;
  const customFields = document.querySelectorAll('.custom-date-fields');
  
  if (period === 'custom') {
    customFields.forEach(field => field.classList.remove('d-none'));
  } else {
    customFields.forEach(field => field.classList.add('d-none'));
  }
}

function generateReport() {
  const reportType = document.getElementById('reportType').value;
  const period = document.getElementById('reportPeriod').value;
  let fromDate, toDate;
  
  // Calculate date range based on period
  const today = new Date();
  switch(period) {
    case 'today':
      fromDate = toDate = today.toISOString().split('T')[0];
      break;
    case 'week':
      const weekStart = new Date(today.setDate(today.getDate() - today.getDay()));
      fromDate = weekStart.toISOString().split('T')[0];
      toDate = new Date(weekStart.getTime() + 6 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
      break;
    case 'month':
      fromDate = new Date(today.getFullYear(), today.getMonth(), 1).toISOString().split('T')[0];
      toDate = new Date(today.getFullYear(), today.getMonth() + 1, 0).toISOString().split('T')[0];
      break;
    case 'custom':
      fromDate = document.getElementById('reportFromDate').value;
      toDate = document.getElementById('reportToDate').value;
      break;
  }
  
  if (!fromDate || !toDate) {
    alert('Please select valid dates');
    return;
  }
  
  // Show loading state
  showReportLoading(reportType);
  
  // Make API call to generate report
  const url = `/milk-supply-analytics/generate_reports?report_type=${getReportTypeParam(reportType)}&from_date=${fromDate}&to_date=${toDate}`;
  
  fetch(url, {
    method: 'GET',
    headers: {
      'Accept': 'application/json',
      'X-Requested-With': 'XMLHttpRequest'
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      populateReportData(reportType, data.data);
      // Show success message
      if (data.message) {
        showReportSuccess(data.message);
      }
    } else {
      throw new Error(data.error || 'Unknown error');
    }
  })
  .catch(error => {
    console.error('Error generating report:', error);
    showReportError(reportType, error.message);
  });
}

function getReportTypeParam(reportType) {
  const paramMap = {
    'daily': 'daily_procurement_delivery',
    'vendor': 'vendor_performance',
    'profit': 'profit_loss',
    'wastage': 'wastage_analysis',
    'monthly': 'monthly_summary'
  };
  return paramMap[reportType];
}

function showReportLoading(reportType) {
  const tableMap = {
    'daily': 'dailyReportTable',
    'vendor': 'vendorReportTable',
    'profit': 'profitLossTable',
    'wastage': 'wastageReportTable',
    'monthly': 'monthlyReportTable'
  };
  
  const table = document.getElementById(tableMap[reportType]);
  if (table) {
    const tbody = table.getElementsByTagName('tbody')[0];
    tbody.innerHTML = `
      <tr>
        <td colspan="10" class="text-center py-4">
          <i class="fas fa-spinner fa-spin fa-2x mb-2"></i><br>
          <span class="text-muted">Generating report...</span>
        </td>
      </tr>
    `;
  }
}

function showReportError(reportType, errorMessage = 'Error generating report. Please try again.') {
  const tableMap = {
    'daily': 'dailyReportTable',
    'vendor': 'vendorReportTable', 
    'profit': 'profitLossTable',
    'wastage': 'wastageReportTable',
    'monthly': 'monthlyReportTable'
  };
  
  const table = document.getElementById(tableMap[reportType]);
  if (table) {
    const tbody = table.getElementsByTagName('tbody')[0];
    tbody.innerHTML = `
      <tr>
        <td colspan="10" class="text-center py-4">
          <i class="fas fa-exclamation-triangle fa-2x mb-2 text-danger"></i><br>
          <span class="text-danger">${errorMessage}</span>
        </td>
      </tr>
    `;
  }
}

function showReportSuccess(message) {
  // Create a toast notification for success
  const toast = document.createElement('div');
  toast.className = 'toast align-items-center text-white bg-success border-0 position-fixed';
  toast.style.cssText = 'top: 20px; right: 20px; z-index: 1055;';
  toast.setAttribute('role', 'alert');
  toast.innerHTML = `
    <div class="d-flex">
      <div class="toast-body">
        <i class="fas fa-check-circle me-2"></i>${message}
      </div>
      <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
    </div>
  `;
  
  document.body.appendChild(toast);
  
  // Initialize and show the toast
  const bsToast = new bootstrap.Toast(toast, { delay: 5000 });
  bsToast.show();
  
  // Remove from DOM after it's hidden
  toast.addEventListener('hidden.bs.toast', function() {
    toast.remove();
  });
}

function populateReportData(reportType, data) {
  switch(reportType) {
    case 'daily':
      populateDailyReport(data);
      break;
    case 'vendor':
      populateVendorReport(data);
      break;
    case 'profit':
      populateProfitReport(data);
      break;
    case 'wastage':
      populateWastageReport(data);
      break;
    case 'monthly':
      populateMonthlyReport(data);
      break;
  }
}

function populateDailyReport(data) {
  const tbody = document.querySelector('#dailyReportTable tbody');
  if (!data || data.length === 0) {
    tbody.innerHTML = `
      <tr>
        <td colspan="10" class="text-center py-4">
          <i class="fas fa-info-circle fa-2x mb-2 text-info"></i><br>
          <span class="text-muted">No data available for the selected period</span>
        </td>
      </tr>
    `;
    return;
  }
  
  let html = '';
  data.forEach(row => {
    const utilizationClass = row.utilization_rate > 80 ? 'text-success' : row.utilization_rate > 60 ? 'text-warning' : 'text-danger';
    const profitClass = row.profit >= 0 ? 'text-success' : 'text-danger';
    
    html += `
      <tr>
        <td>${row.date}</td>
        <td>-</td>
        <td>-</td>
        <td>${row.procurement_liters.toFixed(2)}</td>
        <td>${row.delivery_liters.toFixed(2)}</td>
        <td>${row.wastage_liters.toFixed(2)}</td>
        <td><span class="${utilizationClass}">${row.utilization_rate}%</span></td>
        <td>₹${row.procurement_cost.toFixed(2)}</td>
        <td>₹${row.delivery_revenue.toFixed(2)}</td>
        <td><span class="${profitClass}">₹${row.profit.toFixed(2)}</span></td>
      </tr>
    `;
  });
  
  tbody.innerHTML = html;
}

function populateVendorReport(data) {
  const tbody = document.querySelector('#vendorReportTable tbody');
  if (!data || data.length === 0) {
    tbody.innerHTML = `
      <tr>
        <td colspan="9" class="text-center py-4">
          <i class="fas fa-info-circle fa-2x mb-2 text-info"></i><br>
          <span class="text-muted">No vendor data available for the selected period</span>
        </td>
      </tr>
    `;
    return;
  }
  
  let html = '';
  data.forEach(vendor => {
    const reliabilityClass = vendor.reliability_percentage > 80 ? 'text-success' : vendor.reliability_percentage > 60 ? 'text-warning' : 'text-danger';
    const scoreClass = vendor.performance_score > 80 ? 'text-success' : vendor.performance_score > 60 ? 'text-warning' : 'text-danger';
    
    html += `
      <tr>
        <td><strong>${vendor.vendor_name}</strong></td>
        <td>${vendor.total_assignments}</td>
        <td>${vendor.completed_assignments}</td>
        <td><span class="${reliabilityClass}">${vendor.reliability_percentage}%</span></td>
        <td>₹${vendor.average_price}</td>
        <td>${vendor.total_quantity.toFixed(2)} L</td>
        <td>₹${vendor.total_cost.toFixed(2)}</td>
        <td>₹${vendor.total_cost.toFixed(2)}</td>
        <td><span class="${scoreClass}">${vendor.performance_score}%</span></td>
      </tr>
    `;
  });
  
  tbody.innerHTML = html;
}

function populateProfitReport(data) {
  // Update summary cards
  document.getElementById('totalProcurementCost').textContent = `₹${data.summary.total_cost.toFixed(2)}`;
  document.getElementById('totalRevenue').textContent = `₹${data.summary.total_revenue.toFixed(2)}`;
  document.getElementById('grossProfit').textContent = `₹${data.summary.gross_profit.toFixed(2)}`;
  document.getElementById('profitMargin').textContent = `${data.summary.profit_margin}%`;
  
  // Update table
  const tbody = document.querySelector('#profitLossTable tbody');
  if (!data.daily_breakdown || data.daily_breakdown.length === 0) {
    tbody.innerHTML = `
      <tr>
        <td colspan="7" class="text-center py-4">
          <i class="fas fa-info-circle fa-2x mb-2 text-info"></i><br>
          <span class="text-muted">No profit/loss data available for the selected period</span>
        </td>
      </tr>
    `;
    return;
  }
  
  let html = '';
  data.daily_breakdown.forEach(day => {
    const profitClass = day.profit >= 0 ? 'text-success' : 'text-danger';
    const margin = day.revenue > 0 ? ((day.profit / day.revenue) * 100).toFixed(2) : 0;
    
    html += `
      <tr>
        <td>${day.date}</td>
        <td>₹${day.cost.toFixed(2)}</td>
        <td>₹${day.revenue.toFixed(2)}</td>
        <td><span class="${profitClass}">₹${day.profit.toFixed(2)}</span></td>
        <td>₹0.00</td>
        <td><span class="${profitClass}">₹${day.profit.toFixed(2)}</span></td>
        <td>${margin}%</td>
      </tr>
    `;
  });
  
  tbody.innerHTML = html;
}

function populateWastageReport(data) {
  const tbody = document.querySelector('#wastageReportTable tbody');
  if (!data.daily_data || data.daily_data.length === 0) {
    tbody.innerHTML = `
      <tr>
        <td colspan="7" class="text-center py-4">
          <i class="fas fa-info-circle fa-2x mb-2 text-info"></i><br>
          <span class="text-muted">No wastage data available for the selected period</span>
        </td>
      </tr>
    `;
    return;
  }
  
  let html = '';
  data.daily_data.forEach(day => {
    const wastageClass = day.wastage_percentage > 20 ? 'text-danger' : day.wastage_percentage > 10 ? 'text-warning' : 'text-success';
    
    html += `
      <tr>
        <td>${day.date}</td>
        <td>${day.procurement_liters.toFixed(2)} L</td>
        <td>${day.delivery_liters.toFixed(2)} L</td>
        <td>${day.wastage_liters.toFixed(2)} L</td>
        <td><span class="${wastageClass}">${day.wastage_percentage}%</span></td>
        <td>₹${day.wastage_cost.toFixed(2)}</td>
        <td>Excess procurement</td>
      </tr>
    `;
  });
  
  tbody.innerHTML = html;
}

function populateMonthlyReport(data) {
  const tbody = document.querySelector('#monthlyReportTable tbody');
  if (!data || Object.keys(data).length === 0) {
    tbody.innerHTML = `
      <tr>
        <td colspan="9" class="text-center py-4">
          <i class="fas fa-info-circle fa-2x mb-2 text-info"></i><br>
          <span class="text-muted">No monthly data available for the selected period</span>
        </td>
      </tr>
    `;
    return;
  }
  
  let html = '';
  Object.entries(data).forEach(([month, monthData]) => {
    const profitClass = monthData.profit >= 0 ? 'text-success' : 'text-danger';
    
    html += `
      <tr>
        <td><strong>${month}</strong></td>
        <td>-</td>
        <td>${monthData.procurement_liters.toFixed(2)} L</td>
        <td>${monthData.delivery_liters.toFixed(2)} L</td>
        <td>${monthData.utilization_rate}%</td>
        <td>₹${monthData.procurement_cost.toFixed(2)}</td>
        <td>₹${monthData.delivery_revenue.toFixed(2)}</td>
        <td><span class="${profitClass}">₹${monthData.profit.toFixed(2)}</span></td>
        <td>-</td>
      </tr>
    `;
  });
  
  tbody.innerHTML = html;
}

function exportReport(format) {
  const reportType = document.getElementById('reportType').value;
  alert(`Export to ${format.toUpperCase()} functionality will be implemented soon for ${reportType} report.`);
}

// Saved Reports Functions
function loadSavedReports() {
  const container = document.getElementById('savedReportsContainer');
  if (!container) return;

  // Show loading state
  container.innerHTML = `
    <div class="text-center py-5">
      <i class="fas fa-spinner fa-spin fa-3x text-primary mb-3"></i>
      <h4>Loading Saved Reports...</h4>
      <p class="text-muted">Please wait while we load your saved reports</p>
    </div>
  `;

  // Fetch saved reports
  fetch('/milk-supply-analytics/saved_reports', {
    method: 'GET',
    headers: {
      'Accept': 'application/json',
      'X-Requested-With': 'XMLHttpRequest'
    }
  })
  .then(response => response.json())
  .then(reports => {
    displaySavedReports(reports);
  })
  .catch(error => {
    console.error('Error loading saved reports:', error);
    container.innerHTML = `
      <div class="text-center py-5">
        <i class="fas fa-exclamation-triangle fa-3x text-danger mb-3"></i>
        <h4>Error Loading Saved Reports</h4>
        <p class="text-muted">Failed to load saved reports. Please try again.</p>
        <button class="btn btn-primary" onclick="loadSavedReports()">
          <i class="fas fa-refresh me-1"></i>Retry
        </button>
      </div>
    `;
  });
}

function displaySavedReports(reports) {
  const container = document.getElementById('savedReportsContainer');
  
  if (!reports || reports.length === 0) {
    container.innerHTML = `
      <div class="text-center py-5">
        <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
        <h4>No Saved Reports</h4>
        <p class="text-muted">Generate some reports first, and they will appear here for future reference.</p>
      </div>
    `;
    return;
  }

  let html = `
    <div class="table-responsive">
      <table class="table table-hover">
        <thead class="table-light">
          <tr>
            <th>Report Name</th>
            <th>Type</th>
            <th>Date Range</th>
            <th>Generated</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
  `;

  reports.forEach(report => {
    const reportTypeNames = {
      'daily_procurement_delivery': 'Daily Procurement vs Delivery',
      'vendor_performance': 'Vendor Performance',
      'profit_loss': 'Profit & Loss',
      'wastage_analysis': 'Wastage Analysis',
      'monthly_summary': 'Monthly Summary'
    };

    const typeName = reportTypeNames[report.report_type] || report.report_type;
    const generatedDate = new Date(report.created_at).toLocaleDateString();
    
    html += `
      <tr>
        <td>
          <strong>${report.name}</strong>
        </td>
        <td>
          <span class="badge bg-primary">${typeName}</span>
        </td>
        <td>${report.from_date} to ${report.to_date}</td>
        <td>${generatedDate}</td>
        <td>
          <div class="btn-group btn-group-sm">
            <button class="btn btn-outline-primary" onclick="viewSavedReport(${report.id})" title="View Report">
              <i class="fas fa-eye"></i>
            </button>
            <button class="btn btn-outline-success" onclick="downloadSavedReport(${report.id})" title="Download">
              <i class="fas fa-download"></i>
            </button>
            <button class="btn btn-outline-danger" onclick="deleteSavedReport(${report.id})" title="Delete">
              <i class="fas fa-trash"></i>
            </button>
          </div>
        </td>
      </tr>
    `;
  });

  html += `
        </tbody>
      </table>
    </div>
  `;

  container.innerHTML = html;
}

function viewSavedReport(reportId) {
  // For now, show an alert. In the future, this could open a modal or new page
  alert(`Viewing report ${reportId}. This functionality will open the full report view.`);
}

function downloadSavedReport(reportId) {
  // For now, show an alert. In the future, this could trigger a download
  alert(`Downloading report ${reportId}. This functionality will be implemented soon.`);
}

function deleteSavedReport(reportId) {
  if (confirm('Are you sure you want to delete this saved report?')) {
    alert(`Deleting report ${reportId}. This functionality will be implemented soon.`);
  }
}

// Initialize report sections on page load
document.addEventListener('DOMContentLoaded', function() {
  // Show the daily report by default
  updateReportFilters();
  updateDateFields();
  
  // Set daily report as default visible
  document.querySelectorAll('.report-section').forEach(section => {
    section.classList.add('d-none');
  });
  const dailyReport = document.getElementById('dailyReport');
  if (dailyReport) {
    dailyReport.classList.remove('d-none');
  }
  
  // Load calendar when calendar tab is clicked
  const calendarTab = document.getElementById('calendar-tab');
  if (calendarTab) {
    calendarTab.addEventListener('shown.bs.tab', function() {
      console.log('Calendar tab shown, loading calendar...');
      loadCalendarFallback(); // Use iframe method which is more reliable
    });
  }
  
  // Load saved reports when saved reports tab is clicked
  const savedReportsTab = document.getElementById('saved-reports-tab');
  if (savedReportsTab) {
    savedReportsTab.addEventListener('shown.bs.tab', function() {
      loadSavedReports();
    });
  }
  
  // Load calendar immediately since it's the default active tab
  setTimeout(() => {
    console.log('Loading calendar automatically on page load...');
    loadCalendarFallback(); // Use iframe method which is more reliable
  }, 500);
  
  // Product Selection Auto-Population
  const productDropdown = document.getElementById('product-dropdown');
  const unitField = document.querySelector('select[name="procurement_schedule[unit]"]');
  const sellingPriceField = document.querySelector('input[name="procurement_schedule[selling_price]"]');
  
  if (productDropdown) {
    productDropdown.addEventListener('change', function() {
      const selectedOption = this.options[this.selectedIndex];
      if (selectedOption.value && selectedOption.textContent) {
        const optionText = selectedOption.textContent;
        console.log('Selected product:', optionText);
        
        // Extract unit type from product text (e.g., "Milk (liters) - ₹50")
        const unitMatch = optionText.match(/\(([^)]+)\)/);
        if (unitMatch && unitField) {
          const productUnit = unitMatch[1].toLowerCase();
          unitField.value = productUnit;
          console.log('Auto-set unit to:', productUnit);
        }
        
        // Extract price from product text
        const priceMatch = optionText.match(/₹([\d.]+)/);
        if (priceMatch && sellingPriceField && !sellingPriceField.value) {
          sellingPriceField.value = priceMatch[1];
          console.log('Auto-set selling price to:', priceMatch[1]);
        }
      }
    });
  }

  // Product Search Functions (Simple Version)
  let productSearchTimeout;
  let availableProducts = [
    <% Product.all.each_with_index do |product, index| %>
      {
        id: <%= product.id %>,
        name: "<%= product.name.gsub('"', '\\"') %>",
        unit_type: "<%= product.unit_type %>",
        price: "<%= product.price %>",
        available_quantity: "<%= product.available_quantity || 0 %>",
        description: "<%= product.description&.gsub('"', '\\"') || 'No description' %>",
        category: "<%= product.category&.name&.gsub('"', '\\"') || 'No category' %>"
      }<%= index < Product.all.count - 1 ? ',' : '' %>
    <% end %>
  ];
  
  function initializeMilkProductSearch() {
    const searchInput = document.getElementById('product-search');
    const resultsContainer = document.getElementById('product-search-results');
    const fallbackDropdown = document.getElementById('product-dropdown-fallback');

    if (!searchInput) return;

    // Handle search input
    searchInput.addEventListener('input', function() {
      clearTimeout(productSearchTimeout);
      const query = this.value.trim().toLowerCase();
      
      if (query.length < 2) {
        resultsContainer.style.display = 'none';
        return;
      }

      productSearchTimeout = setTimeout(() => {
        searchMilkProducts(query);
      }, 300);
    });

    // Handle fallback dropdown selection
    if (fallbackDropdown) {
      fallbackDropdown.addEventListener('change', function() {
        if (this.value) {
          const product = availableProducts.find(p => p.id == this.value);
          if (product) {
            selectMilkProduct(product);
          }
        }
      });
    }

    // Hide results when clicking outside
    document.addEventListener('click', function(event) {
      if (!searchInput.contains(event.target) && !resultsContainer.contains(event.target)) {
        resultsContainer.style.display = 'none';
      }
    });
  }

  function searchMilkProducts(query) {
    const resultsContainer = document.getElementById('product-search-results');
    
    const filteredProducts = availableProducts.filter(product => 
      product.name.toLowerCase().includes(query) ||
      product.description.toLowerCase().includes(query) ||
      product.category.toLowerCase().includes(query) ||
      product.unit_type.toLowerCase().includes(query)
    );

    if (filteredProducts.length === 0) {
      resultsContainer.innerHTML = `
        <div class="card shadow-sm">
          <div class="card-body text-center py-4">
            <i class="fas fa-search fa-2x text-muted mb-2"></i>
            <p class="mb-0 text-muted">No products found for "${query}"</p>
            <small class="text-muted">Try searching with different keywords</small>
          </div>
        </div>
      `;
    } else {
      resultsContainer.innerHTML = `
        <div class="card shadow-lg border-primary">
          <div class="card-header bg-primary text-white py-2">
            <small><i class="fas fa-search me-1"></i>Found ${filteredProducts.length} product(s)</small>
          </div>
          <div class="list-group list-group-flush" style="max-height: 250px; overflow-y: auto;">
            ${filteredProducts.map(product => `
              <div class="list-group-item list-group-item-action cursor-pointer product-option" 
                   onclick="selectMilkProduct(${JSON.stringify(product).replace(/"/g, '&quot;')})">
                <div class="d-flex justify-content-between align-items-start">
                  <div class="flex-grow-1">
                    <h6 class="mb-1 text-primary fw-bold">${product.name}</h6>
                    <p class="mb-1 small text-muted">${product.description}</p>
                    <div class="d-flex gap-3 flex-wrap">
                      <small class="text-success"><i class="fas fa-tag me-1"></i><strong>₹${product.price}/${product.unit_type}</strong></small>
                      <small class="text-info"><i class="fas fa-box me-1"></i>${product.available_quantity} ${product.unit_type}</small>
                      <small class="text-warning"><i class="fas fa-folder me-1"></i>${product.category}</small>
                    </div>
                  </div>
                  <div class="text-end">
                    <span class="badge ${product.available_quantity > 0 ? 'bg-success' : 'bg-warning'}">
                      ${product.available_quantity > 0 ? 'Available' : 'Low Stock'}
                    </span>
                  </div>
                </div>
              </div>
            `).join('')}
          </div>
        </div>
      `;
    }
    
    resultsContainer.style.display = 'block';
  }

  window.selectMilkProduct = function(product) {
    const searchInput = document.getElementById('product-search');
    const resultsContainer = document.getElementById('product-search-results');
    const selectedDisplay = document.getElementById('selected-product-display');
    const selectedInfo = document.getElementById('selected-product-info');
    const selectedProductId = document.getElementById('selected-product-id');
    const dropdownContainer = document.getElementById('product-dropdown-container');
    const form = searchInput.closest('form');

    // Update hidden field
    selectedProductId.value = product.id;

    // Update search input
    searchInput.value = product.name;

    // Show selected product info
    selectedInfo.innerHTML = `
      <small class="text-success fw-bold">
        <i class="fas fa-check-circle me-1"></i>
        Selected: ${product.name} (${product.unit_type})
      </small>
    `;

    // Hide/show elements
    resultsContainer.style.display = 'none';
    selectedDisplay.style.display = 'block';
    dropdownContainer.style.display = 'none';

    // Auto-submit form and stay on dashboard
    if (form) {
      const hiddenTabField = form.querySelector('input[name="tab"]');
      if (hiddenTabField) {
        hiddenTabField.value = 'dashboard';
      }
      form.submit();
    }
  }

  window.clearMilkProductSelection = function() {
    const searchInput = document.getElementById('product-search');
    const selectedDisplay = document.getElementById('selected-product-display');
    const selectedProductId = document.getElementById('selected-product-id');
    const dropdownContainer = document.getElementById('product-dropdown-container');
    const fallbackDropdown = document.getElementById('product-dropdown-fallback');
    const form = searchInput.closest('form');

    // Clear values
    searchInput.value = '';
    selectedProductId.value = '';
    if (fallbackDropdown) fallbackDropdown.value = '';

    // Reset display
    selectedDisplay.style.display = 'none';
    dropdownContainer.style.display = 'block';

    // Auto-submit form to show all products and stay on dashboard
    if (form) {
      const hiddenTabField = form.querySelector('input[name="tab"]');
      if (hiddenTabField) {
        hiddenTabField.value = 'dashboard';
      }
      form.submit();
    }

    // Focus back to search
    searchInput.focus();
  }

  window.handleRegularDropdownChange = function() {
    const fallbackDropdown = document.getElementById('product-dropdown-fallback');
    if (fallbackDropdown && fallbackDropdown.value) {
      const product = availableProducts.find(p => p.id == fallbackDropdown.value);
      if (product) {
        selectMilkProduct(product);
      }
    }
  }
  
  window.handleDateRangeChange = function() {
    // Preserve selected product when changing date range
    const form = document.querySelector('form');
    const selectedProductId = document.getElementById('selected-product-id');
    const hiddenTabField = form.querySelector('input[name="tab"]');
    
    if (hiddenTabField) {
      hiddenTabField.value = 'dashboard';
    }
    
    // The product_id will be preserved through the hidden field
    // No additional action needed as the hidden field is already in the form
  }
  
  // Add styling for product search (from working version)
  const style = document.createElement('style');
  style.textContent = `
    .cursor-pointer {
      cursor: pointer;
    }
    
    /* Product Search Styling */
    #product-search {
      border: 2px solid #4e73df;
      font-size: 1.1rem;
      padding: 12px 16px;
      border-radius: 8px;
      background: linear-gradient(135deg, #f8f9fc 0%, #ffffff 100%);
      width: 100%;
    }

    #product-search:focus {
      border-color: #2e59d9;
      box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
    }

    #product-search-results {
      background: #fff;
      border-radius: 8px;
      box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
      border: 1px solid #dee2e6;
      left: 0 !important;
      right: 0 !important;
      width: 100% !important;
      margin-top: 2px;
    }

    .product-option {
      cursor: pointer;
      transition: all 0.2s ease;
      border: none !important;
    }

    .product-option:hover {
      background-color: rgba(78, 115, 223, 0.08) !important;
      transform: translateX(3px);
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    #selected-product-display {
      border: 2px solid #28a745;
      border-radius: 8px;
      background: linear-gradient(135deg, rgba(40, 167, 69, 0.1) 0%, rgba(40, 167, 69, 0.05) 100%);
    }
  `;
  document.head.appendChild(style);
  
  // Handle tab activation based on URL parameters
  const urlParams = new URLSearchParams(window.location.search);
  const activeTab = urlParams.get('tab');
  
  if (activeTab === 'dashboard') {
    // Activate dashboard tab
    const dashboardTab = document.getElementById('dashboard-tab');
    const dashboardPane = document.getElementById('dashboard');
    
    if (dashboardTab && dashboardPane) {
      // Remove active from all tabs
      document.querySelectorAll('.nav-link').forEach(tab => {
        tab.classList.remove('active');
        tab.setAttribute('aria-selected', 'false');
      });
      
      // Remove show active from all panes
      document.querySelectorAll('.tab-pane').forEach(pane => {
        pane.classList.remove('show', 'active');
      });
      
      // Activate dashboard tab
      dashboardTab.classList.add('active');
      dashboardTab.setAttribute('aria-selected', 'true');
      dashboardPane.classList.add('show', 'active');
    }
  }

// Schedule Management Functions
let currentEditingScheduleId = null;

// Add event listeners for schedule buttons when page loads
document.addEventListener('DOMContentLoaded', function() {
  console.log('Setting up schedule button event listeners...');
  
  // Wait a bit for the page to fully render
  setTimeout(function() {
    console.log('Setting up procurement schedule button handlers...');
    
    // Handle edit buttons
    document.addEventListener('click', function(e) {
      if (e.target.closest('.schedule-edit-btn')) {
        e.preventDefault();
        e.stopPropagation();
        const button = e.target.closest('.schedule-edit-btn');
        const scheduleId = button.getAttribute('data-schedule-id');
        console.log('Edit button clicked for schedule ID:', scheduleId);
        
        if (!scheduleId) {
          console.error('No schedule ID found on edit button');
          showAlert('danger', 'Schedule ID not found');
          return false;
        }
        
        editSchedule(parseInt(scheduleId));
        return false;
      }
    });
    
    // Handle delete buttons  
    document.addEventListener('click', function(e) {
      if (e.target.closest('.schedule-delete-btn')) {
        e.preventDefault();
        e.stopPropagation();
        const button = e.target.closest('.schedule-delete-btn');
        const scheduleId = button.getAttribute('data-schedule-id');
        console.log('Delete button clicked for schedule ID:', scheduleId);
        
        if (!scheduleId) {
          console.error('No schedule ID found on delete button');
          showAlert('danger', 'Schedule ID not found');
          return false;
        }
        
        deleteSchedule(parseInt(scheduleId));
        return false;
      }
    });
    
    // Also try direct button selection as backup
    const editButtons = document.querySelectorAll('.schedule-edit-btn');
    const deleteButtons = document.querySelectorAll('.schedule-delete-btn');
    
    console.log(`Found ${editButtons.length} edit buttons and ${deleteButtons.length} delete buttons`);
    
    editButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        const scheduleId = this.getAttribute('data-schedule-id');
        console.log('Direct edit button clicked for schedule ID:', scheduleId);
        editSchedule(parseInt(scheduleId));
      });
    });
    
    deleteButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        const scheduleId = this.getAttribute('data-schedule-id');
        console.log('Direct delete button clicked for schedule ID:', scheduleId);
        deleteSchedule(parseInt(scheduleId));
      });
    });
    
    console.log('Schedule button event listeners set up successfully');
  }, 500);
});

// Add CSS to ensure buttons are clickable
const scheduleButtonStyles = document.createElement('style');
scheduleButtonStyles.textContent = `
  .schedule-edit-btn, 
  .schedule-delete-btn {
    pointer-events: auto !important;
    position: relative !important;
    z-index: 100 !important;
    cursor: pointer !important;
    user-select: none !important;
    border: 1px solid !important;
    padding: 0.375rem 0.75rem !important;
    margin: 0.125rem !important;
  }
  
  .schedule-edit-btn:hover,
  .schedule-delete-btn:hover {
    transform: translateY(-1px) !important;
    box-shadow: 0 2px 8px rgba(0,0,0,0.15) !important;
    transition: all 0.2s ease !important;
  }
  
  .btn-group {
    position: relative !important;
    z-index: 100 !important;
  }
`;
document.head.appendChild(scheduleButtonStyles);

function openScheduleModal(scheduleId = null) {
  currentEditingScheduleId = scheduleId;
  const modal = document.getElementById('scheduleModal');
  const modalTitle = document.getElementById('scheduleModalLabel');
  const form = document.getElementById('scheduleForm');
  
  if (!modal || !modalTitle || !form) {
    console.error('Modal elements not found');
    showAlert('danger', 'Error: Modal not found');
    return;
  }
  
  if (scheduleId) {
    modalTitle.textContent = 'Edit Procurement Schedule';
    loadScheduleData(scheduleId);
  } else {
    modalTitle.textContent = 'Add New Procurement Schedule';
    form.reset();
    // Set default values
    document.getElementById('schedule_status').value = 'active';
    document.getElementById('schedule_unit').value = 'liters';
  }
  
  // Show modal using Bootstrap
  const bootstrapModal = new bootstrap.Modal(modal);
  bootstrapModal.show();
}

function loadScheduleData(scheduleId) {
  // Fetch schedule data from the server
  const csrfToken = document.querySelector('meta[name="csrf-token"]');
  if (!csrfToken) {
    console.error('CSRF token not found');
    showAlert('danger', 'CSRF token not found');
    return;
  }

  fetch(`/milk-supply-analytics/get_schedule?schedule_id=${scheduleId}`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': csrfToken.content
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.success && data.schedule) {
      const schedule = data.schedule;
      console.log('Loading schedule data:', schedule);
      
      // Populate form fields with schedule data - with error handling
      try {
        const vendorField = document.getElementById('schedule_vendor_name');
        const productField = document.getElementById('schedule_product_id');
        const fromDateField = document.getElementById('schedule_from_date');
        const toDateField = document.getElementById('schedule_to_date');
        const quantityField = document.getElementById('schedule_quantity');
        const buyingPriceField = document.getElementById('schedule_buying_price');
        const sellingPriceField = document.getElementById('schedule_selling_price');
        const statusField = document.getElementById('schedule_status');
        const unitField = document.getElementById('schedule_unit');
        const notesField = document.getElementById('schedule_notes');
        
        if (!vendorField || !productField || !fromDateField || !toDateField) {
          throw new Error('Required form fields not found');
        }
        
        vendorField.value = schedule.vendor_name || '';
        productField.value = schedule.product_id || '';
        fromDateField.value = schedule.from_date || '';
        toDateField.value = schedule.to_date || '';
        quantityField.value = schedule.quantity || '';
        buyingPriceField.value = schedule.buying_price || '';
        sellingPriceField.value = schedule.selling_price || '';
        statusField.value = schedule.status || 'active';
        unitField.value = schedule.unit || 'liters';
        if (notesField) notesField.value = schedule.notes || '';
        
        console.log('Form fields populated successfully');
      } catch (error) {
        console.error('Error populating form fields:', error);
        showAlert('danger', 'Error loading form data: ' + error.message);
      }
      
    } else {
      console.error('Failed to load schedule data:', data);
      showAlert('danger', data.error || 'Failed to load schedule data');
    }
  })
  .catch(error => {
    console.error('Error loading schedule:', error);
    showAlert('danger', 'An error occurred while loading schedule data');
  });
}

function saveSchedule() {
  const form = document.getElementById('scheduleForm');
  const formData = new FormData(form);
  
  const url = currentEditingScheduleId ? 
    '/milk-supply-analytics/update_schedule' : 
    '/milk-supply-analytics/create_schedule';
    
  const method = currentEditingScheduleId ? 'PATCH' : 'POST';
  
  if (currentEditingScheduleId) {
    formData.append('schedule_id', currentEditingScheduleId);
  }
  
  fetch(url, {
    method: method,
    body: formData,
    headers: {
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      showAlert('success', data.message);
      const modal = bootstrap.Modal.getInstance(document.getElementById('scheduleModal'));
      modal.hide();
      
      // Refresh the schedules table and calendar instead of full page reload
      setTimeout(() => {
        // Refresh calendar if we're on the calendar tab
        const calendarTab = document.getElementById('calendar-tab');
        if (calendarTab && calendarTab.classList.contains('active')) {
          console.log('Refreshing calendar after save');
          loadCalendarData();
        } else {
          location.reload();
        }
      }, 1000);
    } else {
      showAlert('danger', data.errors ? data.errors.join(', ') : data.error);
    }
  })
  .catch(error => {
    console.error('Error:', error);
    showAlert('danger', 'An error occurred while saving the schedule');
  });
}


function deleteSchedule(scheduleId) {
  console.log('deleteSchedule called with ID:', scheduleId);
  try {
    if (!scheduleId || isNaN(scheduleId)) {
      throw new Error('Invalid schedule ID provided');
    }
    
    if (!confirm('Are you sure you want to delete this schedule? This will also delete all related procurement assignments.')) {
      return;
    }
    
    console.log('Sending delete request for schedule ID:', scheduleId);
  
  const csrfToken = document.querySelector('meta[name="csrf-token"]');
  if (!csrfToken) {
    throw new Error('CSRF token not found');
  }

  fetch(`/milk-supply-analytics/destroy_schedule?schedule_id=${scheduleId}`, {
    method: 'DELETE',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': csrfToken.content
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      showAlert('success', data.message);
      // Remove the row from the table with animation
      const row = document.querySelector(`tr[data-schedule-id="${scheduleId}"]`);
      if (row) {
        row.style.opacity = '0.5';
        setTimeout(() => {
          row.remove();
          // If no more rows, show empty state
          const tbody = row.closest('tbody');
          if (tbody && tbody.children.length === 0) {
            tbody.innerHTML = `
              <tr>
                <td colspan="9" class="text-center text-muted py-4">
                  <i class="fas fa-calendar-alt fa-2x mb-2"></i><br>
                  No procurement schedules found for the selected filters
                </td>
              </tr>
            `;
          }
        }, 300);
      }
      
      // Refresh calendar if we're on the calendar tab
      const calendarTab = document.getElementById('calendar-tab');
      if (calendarTab && calendarTab.classList.contains('active')) {
        setTimeout(() => {
          console.log('Refreshing calendar after deletion');
          loadCalendarData();
        }, 500);
      }
    } else {
      showAlert('danger', data.error);
    }
  })
  .catch(error => {
    console.error('Error:', error);
    showAlert('danger', 'An error occurred while deleting the schedule');
  });
  
  } catch (error) {
    console.error('Error in deleteSchedule:', error);
    showAlert('danger', 'Error deleting schedule: ' + error.message);
  }
}


// Debug function to check tab switching
document.addEventListener('DOMContentLoaded', function() {
  const schedulesTab = document.getElementById('schedules-tab');
  if (schedulesTab) {
    schedulesTab.addEventListener('click', function() {
      console.log('Schedules tab clicked!');
      // Force reload with schedules tab parameter
      setTimeout(() => {
        const url = new URL(window.location.href);
        if (!url.searchParams.get('tab') || url.searchParams.get('tab') !== 'schedules') {
          url.searchParams.set('tab', 'schedules');
          window.location.href = url.toString();
        }
      }, 100);
    });
  }
});
});

// Global functions for schedule management (accessible from onclick handlers)
function deleteScheduleSimple(scheduleId) {
  console.log('Delete clicked for schedule ID:', scheduleId);
  
  if (!scheduleId) {
    showAlert('danger', 'Invalid schedule ID');
    return;
  }
  
  if (!confirm('Are you sure you want to delete this procurement schedule?')) {
    return;
  }
  
  // Show loading
  showAlert('info', 'Deleting schedule...');
  
  // Use AJAX to delete schedule
  const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content;
  
  fetch(`/milk-procurement/${scheduleId}.json`, {
    method: 'DELETE',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'X-CSRF-Token': csrfToken,
      'X-Requested-With': 'XMLHttpRequest'
    }
  })
  .then(response => {
    if (response.status === 401) {
      throw new Error('Authentication required - please refresh page');
    }
    if (response.ok) {
      // Remove row from table
      const row = document.getElementById(`schedule-row-${scheduleId}`);
      if (row) {
        row.style.opacity = '0.5';
        setTimeout(() => {
          row.remove();
          showAlert('success', 'Schedule deleted successfully');
        }, 300);
      } else {
        // Fallback: reload page
        window.location.reload();
      }
    } else {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
  })
  .catch(error => {
    console.error('Delete error:', error);
    if (error.message.includes('Authentication required')) {
      showAlert('danger', 'Session expired. Please refresh the page.');
      setTimeout(() => {
        window.location.reload();
      }, 2000);
    } else {
      showAlert('danger', 'Error deleting schedule');
    }
  });
}

function editSchedule(scheduleId) {
  console.log('Edit clicked for schedule ID:', scheduleId);
  
  if (!scheduleId) {
    showAlert('danger', 'Invalid schedule ID');
    return;
  }
  
  // Fetch schedule data from backend
  const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content;
  
  showAlert('info', 'Loading schedule data...');
  
  fetch(`/milk-procurement/${scheduleId}.json`, {
    method: 'GET',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'X-CSRF-Token': csrfToken,
      'X-Requested-With': 'XMLHttpRequest'
    }
  })
  .then(response => {
    if (response.status === 401) {
      throw new Error('Authentication required - please refresh page');
    }
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    // Check if response is actually JSON
    const contentType = response.headers.get('content-type');
    if (contentType && contentType.includes('application/json')) {
      return response.json();
    } else {
      throw new Error('Server returned non-JSON response');
    }
  })
  .then(data => {
    if (data.success || data.schedule) {
      const schedule = data.schedule || data;
      populateEditForm(schedule);
      
      // Show the edit modal
      const modal = new bootstrap.Modal(document.getElementById('editScheduleModal'));
      modal.show();
      
      // Hide loading message
      setTimeout(() => {
        const alerts = document.querySelectorAll('.alert');
        alerts.forEach(alert => {
          if (alert.textContent.includes('Loading schedule data')) {
            alert.remove();
          }
        });
      }, 500);
    } else {
      showAlert('danger', 'Failed to load schedule data');
    }
  })
  .catch(error => {
    console.error('Edit error:', error);
    if (error.message.includes('Authentication required')) {
      showAlert('danger', 'Session expired. Please refresh the page and try again.');
      setTimeout(() => {
        window.location.reload();
      }, 3000);
    } else if (error.message.includes('non-JSON response')) {
      showAlert('danger', 'Server error. Please refresh the page and try again.');
      setTimeout(() => {
        window.location.reload();
      }, 3000);
    } else {
      showAlert('danger', `Error loading schedule data: ${error.message}`);
    }
  });
}

function populateEditForm(schedule) {
  // Populate the edit form with schedule data
  document.getElementById('edit_schedule_id').value = schedule.id;
  document.getElementById('edit_vendor_name').value = schedule.vendor_name || '';
  document.getElementById('edit_from_date').value = schedule.from_date || '';
  document.getElementById('edit_to_date').value = schedule.to_date || '';
  document.getElementById('edit_quantity').value = schedule.quantity || '';
  document.getElementById('edit_buying_price').value = schedule.buying_price || '';
  document.getElementById('edit_selling_price').value = schedule.selling_price || '';
  document.getElementById('edit_unit').value = schedule.unit || 'liters';
  document.getElementById('edit_status').value = schedule.status || 'active';
  document.getElementById('edit_notes').value = schedule.notes || '';
}

function updateSchedule() {
  const scheduleId = document.getElementById('edit_schedule_id').value;
  const form = document.getElementById('editScheduleForm');
  
  if (!scheduleId) {
    showAlert('danger', 'Schedule ID is missing');
    return;
  }
  
  // Get form data
  const formData = new FormData(form);
  const scheduleData = {};
  
  // Convert FormData to regular object
  for (let [key, value] of formData.entries()) {
    if (key !== 'schedule_id') {
      scheduleData[key] = value;
    }
  }
  
  console.log('Updating schedule:', scheduleId, scheduleData);
  
  // Show loading
  const updateBtn = document.getElementById('updateScheduleBtn');
  updateBtn.disabled = true;
  updateBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Updating...';
  
  // Send update request
  const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content;
  
  fetch(`/milk-procurement/${scheduleId}.json`, {
    method: 'PATCH',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'X-CSRF-Token': csrfToken,
      'X-Requested-With': 'XMLHttpRequest'
    },
    body: JSON.stringify({ procurement_schedule: scheduleData })
  })
  .then(response => {
    if (response.status === 401) {
      throw new Error('Authentication required - please refresh page');
    }
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response.json();
  })
  .then(data => {
    if (data.success) {
      showAlert('success', 'Schedule updated successfully');
      
      // Close modal
      const modal = bootstrap.Modal.getInstance(document.getElementById('editScheduleModal'));
      modal.hide();
      
      // Refresh the table or update the specific row using server response data
      if (data.schedule) {
        refreshScheduleRow(scheduleId, data.schedule);
      } else {
        // Fallback to form data if server doesn't return schedule data
        refreshScheduleRow(scheduleId, scheduleData);
      }
      
    } else {
      showAlert('danger', data.error || 'Failed to update schedule');
    }
  })
  .catch(error => {
    console.error('Update error:', error);
    if (error.message.includes('Authentication required')) {
      showAlert('danger', 'Session expired. Please refresh the page.');
      setTimeout(() => {
        window.location.reload();
      }, 2000);
    } else {
      showAlert('danger', 'Error updating schedule');
    }
  })
  .finally(() => {
    // Reset button
    updateBtn.disabled = false;
    updateBtn.innerHTML = '<i class="fas fa-save me-1"></i>Update Schedule';
  });
}

function refreshScheduleRow(scheduleId, scheduleData) {
  // Update the table row with new data
  console.log('Refreshing schedule row with data:', scheduleData);
  const row = document.getElementById(`schedule-row-${scheduleId}`);
  if (row) {
    const cells = row.cells;
    if (cells.length >= 7) {
      // Update duration with better date handling
      try {
        const fromDateObj = new Date(scheduleData.from_date + 'T00:00:00');
        const toDateObj = new Date(scheduleData.to_date + 'T00:00:00');
        
        if (isNaN(fromDateObj.getTime()) || isNaN(toDateObj.getTime())) {
          // Fallback: use the original date strings
          cells[2].textContent = `${scheduleData.from_date} - ${scheduleData.to_date}`;
        } else {
          const fromDate = fromDateObj.toLocaleDateString('en-GB', {day: '2-digit', month: 'short'});
          const toDate = toDateObj.toLocaleDateString('en-GB', {day: '2-digit', month: 'short', year: 'numeric'});
          cells[2].textContent = `${fromDate} - ${toDate}`;
        }
      } catch (error) {
        console.error('Date formatting error:', error);
        // Fallback: use the original date strings
        cells[2].textContent = `${scheduleData.from_date} - ${scheduleData.to_date}`;
      }
      
      // Update quantity
      cells[3].textContent = `${scheduleData.quantity} ${scheduleData.unit}`;
      
      // Update buying price
      cells[4].textContent = `₹${scheduleData.buying_price}`;
      
      // Update selling price
      cells[5].textContent = `₹${scheduleData.selling_price}`;
      
      // Update status
      const statusBadge = cells[6].querySelector('.badge');
      if (statusBadge) {
        statusBadge.textContent = scheduleData.status.charAt(0).toUpperCase() + scheduleData.status.slice(1);
        statusBadge.className = `badge bg-${scheduleData.status === 'active' ? 'success' : 'secondary'}`;
      }
      
      // Highlight updated row briefly
      row.style.backgroundColor = '#d4edda';
      setTimeout(() => {
        row.style.backgroundColor = '';
      }, 2000);
    }
  }
}

function refreshSchedulesList() {
  // Reload the page with schedules tab active
  const url = new URL(window.location.href);
  url.searchParams.set('tab', 'schedules');
  window.location.href = url.toString();
}

// Global alert functions
function showAlert(type, message) {
  const alertContainer = document.getElementById('alert-container') || createAlertContainer();
  const alertDiv = document.createElement('div');
  alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
  alertDiv.innerHTML = `
    ${message}
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  `;
  alertContainer.appendChild(alertDiv);
  
  // Auto-dismiss after 5 seconds
  setTimeout(() => {
    alertDiv.remove();
  }, 5000);
}

function createAlertContainer() {
  const container = document.createElement('div');
  container.id = 'alert-container';
  container.style.position = 'fixed';
  container.style.top = '20px';
  container.style.right = '20px';
  container.style.zIndex = '1055';
  container.style.width = '300px';
  document.body.appendChild(container);
  return container;
}

</script>

<!-- Schedule Modal -->
<div class="modal fade" id="scheduleModal" tabindex="-1" aria-labelledby="scheduleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="scheduleModalLabel">Add New Procurement Schedule</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="scheduleForm">
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="schedule_vendor_name" class="form-label">Vendor Name</label>
              <input type="text" class="form-control" id="schedule_vendor_name" name="procurement_schedule[vendor_name]" required>
            </div>
            <div class="col-md-6 mb-3">
              <label for="schedule_product_id" class="form-label">Product</label>
              <select class="form-select" id="schedule_product_id" name="procurement_schedule[product_id]">
                <option value="">Select Product</option>
                <% Product.all.each do |product| %>
                  <option value="<%= product.id %>"><%= product.name %></option>
                <% end %>
              </select>
            </div>
          </div>
          
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="schedule_from_date" class="form-label">From Date</label>
              <input type="date" class="form-control" id="schedule_from_date" name="procurement_schedule[from_date]" required>
            </div>
            <div class="col-md-6 mb-3">
              <label for="schedule_to_date" class="form-label">To Date</label>
              <input type="date" class="form-control" id="schedule_to_date" name="procurement_schedule[to_date]" required>
            </div>
          </div>
          
          <div class="row">
            <div class="col-md-4 mb-3">
              <label for="schedule_quantity" class="form-label">Quantity per Day</label>
              <input type="number" step="0.01" class="form-control" id="schedule_quantity" name="procurement_schedule[quantity]" required>
            </div>
            <div class="col-md-4 mb-3">
              <label for="schedule_buying_price" class="form-label">Buying Price (₹)</label>
              <input type="number" step="0.01" class="form-control" id="schedule_buying_price" name="procurement_schedule[buying_price]" required>
            </div>
            <div class="col-md-4 mb-3">
              <label for="schedule_selling_price" class="form-label">Selling Price (₹)</label>
              <input type="number" step="0.01" class="form-control" id="schedule_selling_price" name="procurement_schedule[selling_price]" required>
            </div>
          </div>
          
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="schedule_unit" class="form-label">Unit</label>
              <select class="form-select" id="schedule_unit" name="procurement_schedule[unit]" required>
                <option value="liters">Liters</option>
                <option value="gallons">Gallons</option>
                <option value="kg">Kg</option>
                <option value="pounds">Pounds</option>
                <option value="pieces">Pieces</option>
              </select>
            </div>
            <div class="col-md-6 mb-3">
              <label for="schedule_status" class="form-label">Status</label>
              <select class="form-select" id="schedule_status" name="procurement_schedule[status]" required>
                <option value="active">Active</option>
                <option value="inactive">Inactive</option>
                <option value="completed">Completed</option>
                <option value="cancelled">Cancelled</option>
              </select>
            </div>
          </div>
          
          <div class="mb-3">
            <label for="schedule_notes" class="form-label">Notes</label>
            <textarea class="form-control" id="schedule_notes" name="procurement_schedule[notes]" rows="3"></textarea>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="saveSchedule()">Save Schedule</button>
      </div>
    </div>
  </div>
</div>

<!-- Edit Schedule Modal -->
<div class="modal fade" id="editScheduleModal" tabindex="-1" aria-labelledby="editScheduleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header bg-primary text-white">
        <h5 class="modal-title" id="editScheduleModalLabel">
          <i class="fas fa-edit me-2"></i>Edit Procurement Schedule
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="editScheduleForm">
          <input type="hidden" id="edit_schedule_id" name="schedule_id">
          
          <!-- Vendor Name (Read-only) -->
          <div class="mb-3">
            <label for="edit_vendor_name" class="form-label">Vendor Name</label>
            <input type="text" class="form-control" id="edit_vendor_name" readonly>
          </div>
          
          <!-- Duration -->
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="edit_from_date" class="form-label">From Date</label>
              <input type="date" class="form-control" id="edit_from_date" name="from_date" required>
            </div>
            <div class="col-md-6 mb-3">
              <label for="edit_to_date" class="form-label">To Date</label>
              <input type="date" class="form-control" id="edit_to_date" name="to_date" required>
            </div>
          </div>
          
          <!-- Quantity, Buying Price, Selling Price -->
          <div class="row">
            <div class="col-md-4 mb-3">
              <label for="edit_quantity" class="form-label">Quantity per Day</label>
              <input type="number" step="0.01" class="form-control" id="edit_quantity" name="quantity" required>
            </div>
            <div class="col-md-4 mb-3">
              <label for="edit_buying_price" class="form-label">Buying Price (₹)</label>
              <input type="number" step="0.01" class="form-control" id="edit_buying_price" name="buying_price" required>
            </div>
            <div class="col-md-4 mb-3">
              <label for="edit_selling_price" class="form-label">Selling Price (₹)</label>
              <input type="number" step="0.01" class="form-control" id="edit_selling_price" name="selling_price" required>
            </div>
          </div>
          
          <!-- Unit and Status -->
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="edit_unit" class="form-label">Unit</label>
              <select class="form-select" id="edit_unit" name="unit" required>
                <option value="liters">Liters</option>
                <option value="gallons">Gallons</option>
                <option value="kg">Kg</option>
                <option value="pounds">Pounds</option>
                <option value="pieces">Pieces</option>
              </select>
            </div>
            <div class="col-md-6 mb-3">
              <label for="edit_status" class="form-label">Status</label>
              <select class="form-select" id="edit_status" name="status" required>
                <option value="active">Active</option>
                <option value="inactive">Inactive</option>
                <option value="completed">Completed</option>
                <option value="cancelled">Cancelled</option>
              </select>
            </div>
          </div>
          
          <!-- Notes -->
          <div class="mb-3">
            <label for="edit_notes" class="form-label">Notes</label>
            <textarea class="form-control" id="edit_notes" name="notes" rows="3"></textarea>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="updateSchedule()" id="updateScheduleBtn">
          <i class="fas fa-save me-1"></i>Update Schedule
        </button>
      </div>
    </div>
  </div>
</div>