<!-- JavaScript for Tab and Form Functionality -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Initialize date range selector
  const dateRangeSelect = document.querySelector('select[name="date_range"]');
  if (dateRangeSelect) {
    toggleCustomDates();
  }

  // Initialize product search functionality
  initializeProductSearch();

  // Initialize procurement schedule tab
  initializeProcurementScheduleTab();
});

// Toggle custom date fields based on date range selection
function toggleCustomDates() {
  const dateRangeSelect = document.getElementById('date-range-select');
  const customDates = document.querySelector('.custom-dates');

  if (dateRangeSelect && customDates) {
    const isCustom = dateRangeSelect.value === 'custom';
    customDates.style.display = isCustom ? 'flex' : 'none';
  }
}

// Product search functionality
function initializeProductSearch() {
  const searchInput = document.getElementById('product-search');
  const searchResults = document.getElementById('product-search-results');
  const selectedDisplay = document.getElementById('selected-product-display');
  const dropdownContainer = document.getElementById('product-dropdown-container');
  const hiddenInput = document.getElementById('selected-product-id');

  if (!searchInput) return;

  let searchTimeout;

  searchInput.addEventListener('input', function() {
    clearTimeout(searchTimeout);
    const query = this.value.trim();

    if (query.length < 2) {
      searchResults.style.display = 'none';
      return;
    }

    searchTimeout = setTimeout(() => {
      performProductSearch(query);
    }, 300);
  });

  searchInput.addEventListener('blur', function() {
    setTimeout(() => {
      searchResults.style.display = 'none';
    }, 200);
  });
}

function performProductSearch(query) {
  // This would typically make an AJAX call to search products
  // For now, we'll use a simple client-side filter
  const dropdown = document.getElementById('product-dropdown');
  if (!dropdown) return;

  const options = Array.from(dropdown.options);
  const matches = options.filter(option =>
    option.text.toLowerCase().includes(query.toLowerCase()) && option.value !== ''
  );

  displaySearchResults(matches);
}

function displaySearchResults(matches) {
  const searchResults = document.getElementById('product-search-results');
  if (!searchResults) return;

  if (matches.length === 0) {
    searchResults.innerHTML = '<div class="list-group-item text-muted">No products found</div>';
  } else {
    const html = matches.map(option =>
      `<div class="list-group-item list-group-item-action" onclick="selectProduct('${option.value}', '${option.text}')">
        ${option.text}
      </div>`
    ).join('');
    searchResults.innerHTML = html;
  }

  searchResults.style.display = 'block';
}

function selectProduct(productId, productText) {
  const hiddenInput = document.getElementById('selected-product-id');
  const selectedDisplay = document.getElementById('selected-product-display');
  const selectedInfo = document.getElementById('selected-product-info');
  const searchInput = document.getElementById('product-search');
  const searchResults = document.getElementById('product-search-results');
  const dropdownContainer = document.getElementById('product-dropdown-container');

  if (hiddenInput) hiddenInput.value = productId;
  if (selectedInfo) selectedInfo.innerHTML = `<strong>Selected:</strong> ${productText}`;
  if (selectedDisplay) selectedDisplay.style.display = 'block';
  if (searchInput) searchInput.value = '';
  if (searchResults) searchResults.style.display = 'none';
  if (dropdownContainer) dropdownContainer.style.display = 'none';
}

function clearProductSelection() {
  const hiddenInput = document.getElementById('selected-product-id');
  const selectedDisplay = document.getElementById('selected-product-display');
  const dropdownContainer = document.getElementById('product-dropdown-container');
  const dropdown = document.getElementById('product-dropdown');

  if (hiddenInput) hiddenInput.value = '';
  if (selectedDisplay) selectedDisplay.style.display = 'none';
  if (dropdownContainer) dropdownContainer.style.display = 'block';
  if (dropdown) dropdown.selectedIndex = 0;
}

function resetProcurementForm() {
  const form = document.querySelector('form');
  if (form) {
    form.reset();
    clearProductSelection();
  }
}

// ===== Procurement Schedule Tab Functions =====

function initializeProcurementScheduleTab() {
  const procurementScheduleTab = document.getElementById('procurement-schedule-tab');
  const monthFilter = document.getElementById('monthFilter');
  const vendorFilter = document.getElementById('vendorFilter');

  if (procurementScheduleTab) {
    procurementScheduleTab.addEventListener('click', function() {
      loadProcurementSchedules();
    });
  }

  if (monthFilter) {
    monthFilter.addEventListener('change', function() {
      loadProcurementSchedules();
    });
  }

  if (vendorFilter) {
    vendorFilter.addEventListener('change', function() {
      loadProcurementSchedules();
    });
  }

  // Load procurement schedules if tab is active
  const urlParams = new URLSearchParams(window.location.search);
  if (urlParams.get('tab') === 'procurement_schedule' || procurementScheduleTab?.classList.contains('active')) {
    loadProcurementSchedules();
  }
}

// Load procurement schedules based on filters
function loadProcurementSchedules() {
  const monthFilter = document.getElementById('monthFilter');
  const vendorFilter = document.getElementById('vendorFilter');
  const tableBody = document.getElementById('procurementScheduleTableBody');
  const scheduleCount = document.getElementById('scheduleCount');

  if (!tableBody) return;

  const monthValue = monthFilter ? monthFilter.value : 'current';
  const vendorValue = vendorFilter ? vendorFilter.value : 'all';

  // Show loading state
  tableBody.innerHTML = `
    <tr>
      <td colspan="8" class="text-center py-4">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2 mb-0">Loading procurement schedules...</p>
      </td>
    </tr>
  `;

  // Prepare request data
  const requestData = {
    month_filter: monthValue,
    vendor_filter: vendorValue
  };

  // Make AJAX request
  fetch('/milk-supply-analytics/procurement_schedules_data', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
    },
    body: JSON.stringify(requestData)
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      updateProcurementScheduleTable(data.schedules);
      if (scheduleCount) {
        scheduleCount.innerHTML = `
          <i class="fas fa-info-circle me-1"></i>
          Showing ${data.schedules.length} procurement schedules
        `;
      }
    } else {
      showErrorMessage(data.message || 'Failed to load procurement schedules');
    }
  })
  .catch(error => {
    console.error('Error loading procurement schedules:', error);
    showErrorMessage('Failed to load procurement schedules. Please try again.');
  });
}

// Update procurement schedule table with data
function updateProcurementScheduleTable(schedules) {
  const tableBody = document.getElementById('procurementScheduleTableBody');
  if (!tableBody) return;

  if (!schedules || schedules.length === 0) {
    tableBody.innerHTML = `
      <tr>
        <td colspan="10" class="text-center py-4">
          <div class="text-muted">
            <i class="fas fa-clipboard-list fa-3x mb-3"></i>
            <h5>No Procurement Schedules Found</h5>
            <p>No schedules match the selected filters.</p>
          </div>
        </td>
      </tr>
    `;
    return;
  }

  const tableRows = schedules.map(schedule => {
    const statusBadge = getStatusBadge(schedule.status);
    const fromDate = new Date(schedule.from_date).toLocaleDateString('en-IN');
    const toDate = new Date(schedule.to_date).toLocaleDateString('en-IN');
    const duration = schedule.duration || Math.ceil((new Date(schedule.to_date) - new Date(schedule.from_date)) / (1000 * 60 * 60 * 24)) + 1;
    const totalAmount = (schedule.total_amount && typeof schedule.total_amount === 'number') ? schedule.total_amount.toFixed(2) : (parseFloat(schedule.quantity || 0) * parseFloat(schedule.buying_price || 0) * duration).toFixed(2);

    return `
      <tr data-schedule-id="${schedule.id}">
        <td>
          <div class="form-check">
            <input class="form-check-input schedule-checkbox" type="checkbox" value="${schedule.id}" onchange="updateSelectionState()">
            <label class="form-check-label">
              <span class="visually-hidden">Select schedule</span>
            </label>
          </div>
        </td>
        <td>
          <strong>${fromDate}</strong> - <strong>${toDate}</strong>
          <br>
          <small class="text-muted">${duration} day${duration > 1 ? 's' : ''}</small>
        </td>
        <td>
          <div class="d-flex align-items-center">
            <div class="avatar-sm bg-info text-white rounded-circle d-flex align-items-center justify-content-center me-2">
              <i class="fas fa-truck"></i>
            </div>
            <div>
              <strong>${schedule.vendor_name || 'Unknown'}</strong>
              <br>
              <small class="text-muted">${schedule.vendor_contact || ''}</small>
            </div>
          </div>
        </td>
        <td>
          <strong>${schedule.product_name || 'Generic Product'}</strong>
          <br>
          <small class="text-muted">${schedule.product_unit || 'unit'}</small>
        </td>
        <td>
          <span class="badge bg-secondary px-2 py-1">
            ${schedule.quantity} ${schedule.product_unit || 'units'}/day
          </span>
          <br>
          <small class="text-muted">Total: ${(schedule.quantity * duration).toFixed(2)} ${schedule.product_unit || 'units'}</small>
        </td>
        <td>
          <strong>₹${schedule.buying_price}</strong>
          <br>
          <small class="text-muted">per ${schedule.product_unit || 'unit'}</small>
        </td>
        <td>
          <strong class="text-success">₹${totalAmount}</strong>
        </td>
        <td>${statusBadge}</td>
        <td>
          <small>
            <strong>${schedule.created_by_name || 'System'}</strong>
            <br>
            <span class="text-muted">${schedule.created_at ? new Date(schedule.created_at).toLocaleDateString('en-IN') : ''}</span>
          </small>
        </td>
        <td>
          <div class="btn-group-vertical" style="gap: 2px;" id="actions-${schedule.id}">
            <button class="btn btn-outline-info btn-sm"
                    onclick="showProcurementAssignments(${schedule.id}, '${schedule.vendor_name}')"
                    title="Show Procurement Assignments">
              <i class="fas fa-clipboard-list"></i>
            </button>
            <button class="btn btn-outline-primary btn-sm"
                    onclick="generateInvoice(${schedule.id}, '${schedule.vendor_name}', this)"
                    title="Generate Invoice"
                    id="invoice-btn-${schedule.id}">
              <i class="fas fa-file-invoice-dollar"></i>
            </button>
            <button class="btn btn-outline-danger btn-sm"
                    onclick="deleteIndividualSchedule(${schedule.id}, '${schedule.vendor_name}', this)"
                    title="Delete Schedule">
              <i class="fas fa-trash"></i>
            </button>
          </div>
        </td>
      </tr>
    `;
  }).join('');

  tableBody.innerHTML = tableRows;

  // Check invoice status for each schedule
  schedules.forEach(schedule => {
    checkInvoiceStatus(schedule.id);
  });
}

// Get status badge HTML
function getStatusBadge(status) {
  const statusConfig = {
    'active': { class: 'bg-success', icon: 'fas fa-check-circle', text: 'Active' },
    'completed': { class: 'bg-primary', icon: 'fas fa-flag-checkered', text: 'Completed' },
    'pending': { class: 'bg-warning text-dark', icon: 'fas fa-clock', text: 'Pending' },
    'cancelled': { class: 'bg-danger', icon: 'fas fa-times-circle', text: 'Cancelled' },
    'inactive': { class: 'bg-secondary', icon: 'fas fa-pause-circle', text: 'Inactive' }
  };

  const config = statusConfig[status] || statusConfig['pending'];
  return `
    <span class="badge ${config.class} px-2 py-1">
      <i class="${config.icon} me-1"></i>${config.text}
    </span>
  `;
}

// Refresh procurement schedules
function refreshProcurementSchedules() {
  loadProcurementSchedules();
}

// Make function globally accessible
window.refreshProcurementSchedules = refreshProcurementSchedules;

// Show error message in table
function showErrorMessage(message) {
  const tableBody = document.getElementById('procurementScheduleTableBody');
  if (tableBody) {
    tableBody.innerHTML = `
      <tr>
        <td colspan="10" class="text-center py-4">
          <div class="text-danger">
            <i class="fas fa-exclamation-triangle fa-2x mb-3"></i>
            <h5>Error Loading Data</h5>
            <p>${message}</p>
            <button class="btn btn-outline-primary btn-sm" onclick="refreshProcurementSchedules()">
              <i class="fas fa-sync-alt me-1"></i>Try Again
            </button>
          </div>
        </td>
      </tr>
    `;
  }
}

// Checkbox selection functions
function toggleSelectAll() {
  const selectAllCheckbox = document.getElementById('selectAllCheckbox');
  const scheduleCheckboxes = document.querySelectorAll('.schedule-checkbox');

  scheduleCheckboxes.forEach(checkbox => {
    checkbox.checked = selectAllCheckbox.checked;
  });

  updateSelectionState();
}

function updateSelectionState() {
  const scheduleCheckboxes = document.querySelectorAll('.schedule-checkbox');
  const checkedBoxes = document.querySelectorAll('.schedule-checkbox:checked');
  const selectAllCheckbox = document.getElementById('selectAllCheckbox');
  const selectionInfoBar = document.getElementById('selectionInfoBar');
  const selectionCount = document.getElementById('selectionCount');
  const deleteSelectedBtn = document.getElementById('deleteSelectedBtn');

  // Update select all checkbox state
  if (scheduleCheckboxes.length > 0) {
    selectAllCheckbox.checked = checkedBoxes.length === scheduleCheckboxes.length;
    selectAllCheckbox.indeterminate = checkedBoxes.length > 0 && checkedBoxes.length < scheduleCheckboxes.length;
  }

  // Update selection info bar
  if (checkedBoxes.length > 0) {
    selectionInfoBar.style.display = 'block';
    selectionCount.textContent = checkedBoxes.length;
    deleteSelectedBtn.style.display = 'inline-block';
  } else {
    selectionInfoBar.style.display = 'none';
    deleteSelectedBtn.style.display = 'none';
  }
}

function clearSelection() {
  const scheduleCheckboxes = document.querySelectorAll('.schedule-checkbox');
  const selectAllCheckbox = document.getElementById('selectAllCheckbox');

  scheduleCheckboxes.forEach(checkbox => {
    checkbox.checked = false;
  });
  selectAllCheckbox.checked = false;
  selectAllCheckbox.indeterminate = false;

  updateSelectionState();
}

function getSelectedScheduleIds() {
  const checkedBoxes = document.querySelectorAll('.schedule-checkbox:checked');
  return Array.from(checkedBoxes).map(checkbox => parseInt(checkbox.value));
}

function deleteSelectedSchedules() {
  const selectedIds = getSelectedScheduleIds();

  if (selectedIds.length === 0) {
    alert('Please select at least one schedule to delete.');
    return;
  }

  if (!confirm(`Are you sure you want to delete ${selectedIds.length} selected schedule(s)? This action cannot be undone.`)) {
    return;
  }

  // TODO: Implement batch delete functionality
  console.log('Deleting schedules:', selectedIds);
  alert('Delete functionality will be implemented in the next update.');
}

// Copy from Last Month functionality
function copySchedulesFromLastMonth() {
  if (!confirm('This will copy all procurement schedules from last month (August 2025) to current month (September 2025) and create delivery assignments. Continue?')) {
    return;
  }

  const copyFromLastMonthBtn = document.getElementById('copyFromLastMonthBtn');
  const originalText = copyFromLastMonthBtn.innerHTML;

  // Show loading state on button
  copyFromLastMonthBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Processing...';
  copyFromLastMonthBtn.disabled = true;

  // Show attractive loading overlay
  showCopyLoadingOverlay();

  // Make API request to copy schedules
  fetch('/milk-supply-analytics/copy_schedules_from_last_month', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
    },
    body: JSON.stringify({
      from_month: '2025-08',
      to_month: '2025-09'
    })
  })
  .then(response => response.json())
  .then(data => {
    // Hide loading overlay
    hideCopyLoadingOverlay();

    if (data.success) {
      showSuccessMessage(`Successfully copied ${data.copied_schedules || 0} schedule(s) and created ${data.created_assignments || 0} delivery assignment(s)!`);
      // Refresh the table to show new data
      loadProcurementSchedules();
    } else {
      showErrorAlert(`Error: ${data.message || 'Failed to copy schedules from last month'}`);
    }
  })
  .catch(error => {
    console.error('Error copying schedules:', error);
    hideCopyLoadingOverlay();
    showErrorAlert('Failed to copy schedules. Please try again.');
  })
  .finally(() => {
    // Restore button state
    copyFromLastMonthBtn.innerHTML = originalText;
    copyFromLastMonthBtn.disabled = false;
  });
}

// Loading overlay functions
function showCopyLoadingOverlay() {
  // Remove existing overlay if any
  hideCopyLoadingOverlay();

  // Create overlay
  const overlay = document.createElement('div');
  overlay.id = 'copyLoadingOverlay';
  overlay.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.75);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
    backdrop-filter: blur(3px);
  `;

  // Create loading content
  const loadingContent = document.createElement('div');
  loadingContent.style.cssText = `
    background: white;
    padding: 3rem;
    border-radius: 15px;
    text-align: center;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    max-width: 400px;
    animation: fadeInScale 0.3s ease-out;
  `;

  loadingContent.innerHTML = `
    <div style="margin-bottom: 1.5rem;">
      <div style="width: 80px; height: 80px; margin: 0 auto 1rem; position: relative;">
        <div class="spinner-border text-primary" role="status" style="width: 80px; height: 80px; border-width: 6px;">
          <span class="visually-hidden">Loading...</span>
        </div>
        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); font-size: 24px;">
          <i class="fas fa-copy text-primary"></i>
        </div>
      </div>
    </div>

    <h5 class="mb-3 text-primary fw-bold">
      <i class="fas fa-magic me-2"></i>
      Copying Schedules
    </h5>

    <div class="mb-3">
      <div class="progress mb-2" style="height: 8px;">
        <div class="progress-bar progress-bar-striped progress-bar-animated bg-primary"
             role="progressbar" style="width: 100%"></div>
      </div>
    </div>

    <p class="text-muted mb-0" id="loadingStatusText">
      <i class="fas fa-calendar-alt me-2"></i>
      Copying schedules from August 2025 to September 2025...
    </p>

    <div class="mt-3">
      <small class="text-muted">
        <i class="fas fa-clock me-1"></i>
        This may take a few moments
      </small>
    </div>
  `;

  // Add CSS animation
  if (!document.getElementById('copyLoadingStyles')) {
    const style = document.createElement('style');
    style.id = 'copyLoadingStyles';
    style.textContent = `
      @keyframes fadeInScale {
        from {
          opacity: 0;
          transform: scale(0.8);
        }
        to {
          opacity: 1;
          transform: scale(1);
        }
      }

      @keyframes pulseIcon {
        0%, 100% { transform: translate(-50%, -50%) scale(1); }
        50% { transform: translate(-50%, -50%) scale(1.1); }
      }

      #copyLoadingOverlay .fas.fa-copy {
        animation: pulseIcon 2s ease-in-out infinite;
      }

      @keyframes rotateBackground {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
      }
    `;
    document.head.appendChild(style);
  }

  overlay.appendChild(loadingContent);
  document.body.appendChild(overlay);

  // Add status text animation
  animateLoadingText();
}

function hideCopyLoadingOverlay() {
  const overlay = document.getElementById('copyLoadingOverlay');
  if (overlay) {
    overlay.style.animation = 'fadeOut 0.3s ease-in';
    setTimeout(() => {
      overlay.remove();
    }, 300);
  }

  // Clear any running animations
  if (window.loadingTextInterval) {
    clearInterval(window.loadingTextInterval);
  }
}

function animateLoadingText() {
  const statusMessages = [
    '<i class="fas fa-search me-2"></i>Finding schedules from August 2025...',
    '<i class="fas fa-copy me-2"></i>Copying schedule details...',
    '<i class="fas fa-calendar-plus me-2"></i>Creating delivery assignments...',
    '<i class="fas fa-check-circle me-2"></i>Validating copied data...',
    '<i class="fas fa-cog fa-spin me-2"></i>Finalizing process...'
  ];

  let currentIndex = 0;
  const statusElement = document.getElementById('loadingStatusText');

  if (statusElement) {
    window.loadingTextInterval = setInterval(() => {
      statusElement.innerHTML = statusMessages[currentIndex];
      currentIndex = (currentIndex + 1) % statusMessages.length;
    }, 1500);
  }
}

// Enhanced alert functions
function showSuccessMessage(message) {
  // Create success modal instead of basic alert
  const successOverlay = document.createElement('div');
  successOverlay.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10000;
  `;

  successOverlay.innerHTML = `
    <div style="background: white; padding: 2rem; border-radius: 10px; text-align: center; max-width: 400px; box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);">
      <div style="color: #28a745; font-size: 3rem; margin-bottom: 1rem;">
        <i class="fas fa-check-circle"></i>
      </div>
      <h5 class="text-success mb-3">Success!</h5>
      <p class="mb-3">${message}</p>
      <button class="btn btn-success" onclick="this.closest('div').parentElement.remove()">
        <i class="fas fa-thumbs-up me-2"></i>Great!
      </button>
    </div>
  `;

  document.body.appendChild(successOverlay);

  // Auto remove after 5 seconds
  setTimeout(() => {
    if (successOverlay.parentElement) {
      successOverlay.remove();
    }
  }, 5000);
}

function showErrorAlert(message) {
  // Create error modal instead of basic alert
  const errorOverlay = document.createElement('div');
  errorOverlay.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10000;
  `;

  errorOverlay.innerHTML = `
    <div style="background: white; padding: 2rem; border-radius: 10px; text-align: center; max-width: 400px; box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);">
      <div style="color: #dc3545; font-size: 3rem; margin-bottom: 1rem;">
        <i class="fas fa-exclamation-triangle"></i>
      </div>
      <h5 class="text-danger mb-3">Error</h5>
      <p class="mb-3">${message}</p>
      <button class="btn btn-danger" onclick="this.closest('div').parentElement.remove()">
        <i class="fas fa-times me-2"></i>Close
      </button>
    </div>
  `;

  document.body.appendChild(errorOverlay);
}

// Delete Individual Schedule functionality
function deleteIndividualSchedule(scheduleId, vendorName, buttonElement) {
  if (!confirm(`Are you sure you want to delete the schedule for "${vendorName}"?\n\nThis will permanently delete:\n• The procurement schedule\n• All associated procurement assignments\n• All related delivery assignments\n\nThis action cannot be undone.`)) {
    return;
  }

  // Show loading state on the specific button
  const originalContent = buttonElement.innerHTML;
  buttonElement.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
  buttonElement.disabled = true;

  // Show attractive delete loading overlay
  showDeleteLoadingOverlay(vendorName);

  // Make API request to delete schedule
  fetch(`/milk-supply-analytics/delete_individual_schedule`, {
    method: 'DELETE',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
    },
    body: JSON.stringify({
      schedule_id: scheduleId
    })
  })
  .then(response => response.json())
  .then(data => {
    // Hide loading overlay
    hideDeleteLoadingOverlay();

    if (data.success) {
      const records = data.deleted_records;
      showDeleteSuccessMessage(`Schedule for "${vendorName}" deleted successfully!`, records);

      // Remove the row from the table immediately for better UX
      const row = buttonElement.closest('tr');
      if (row) {
        row.style.transition = 'all 0.3s ease';
        row.style.opacity = '0';
        row.style.transform = 'translateX(-20px)';
        setTimeout(() => {
          row.remove();
          // Update selection state in case this row was selected
          updateSelectionState();
        }, 300);
      }

      // Refresh the table to ensure data consistency
      setTimeout(() => {
        loadProcurementSchedules();
      }, 1000);
    } else {
      showErrorAlert(`Error: ${data.message || 'Failed to delete schedule'}`);
      // Restore button state on error
      buttonElement.innerHTML = originalContent;
      buttonElement.disabled = false;
    }
  })
  .catch(error => {
    console.error('Error deleting schedule:', error);
    hideDeleteLoadingOverlay();
    showErrorAlert('Failed to delete schedule. Please try again.');

    // Restore button state on error
    buttonElement.innerHTML = originalContent;
    buttonElement.disabled = false;
  });
}

// Delete loading overlay functions
function showDeleteLoadingOverlay(vendorName) {
  // Remove existing overlay if any
  hideDeleteLoadingOverlay();

  // Create overlay
  const overlay = document.createElement('div');
  overlay.id = 'deleteLoadingOverlay';
  overlay.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(220, 53, 69, 0.8);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
    backdrop-filter: blur(3px);
  `;

  // Create loading content
  const loadingContent = document.createElement('div');
  loadingContent.style.cssText = `
    background: white;
    padding: 3rem;
    border-radius: 15px;
    text-align: center;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    max-width: 400px;
    animation: fadeInScale 0.3s ease-out;
    border: 3px solid #dc3545;
  `;

  loadingContent.innerHTML = `
    <div style="margin-bottom: 1.5rem;">
      <div style="width: 80px; height: 80px; margin: 0 auto 1rem; position: relative;">
        <div class="spinner-border text-danger" role="status" style="width: 80px; height: 80px; border-width: 6px;">
          <span class="visually-hidden">Loading...</span>
        </div>
        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); font-size: 24px;">
          <i class="fas fa-trash text-danger"></i>
        </div>
      </div>
    </div>

    <h5 class="mb-3 text-danger fw-bold">
      <i class="fas fa-exclamation-triangle me-2"></i>
      Deleting Schedule
    </h5>

    <div class="mb-3">
      <div class="progress mb-2" style="height: 8px;">
        <div class="progress-bar progress-bar-striped progress-bar-animated bg-danger"
             role="progressbar" style="width: 100%"></div>
      </div>
    </div>

    <p class="text-muted mb-0" id="deleteLoadingStatusText">
      <i class="fas fa-user me-2"></i>
      Deleting schedule for "${vendorName}"...
    </p>

    <div class="mt-3">
      <small class="text-muted">
        <i class="fas fa-clock me-1"></i>
        Removing all associated data
      </small>
    </div>
  `;

  overlay.appendChild(loadingContent);
  document.body.appendChild(overlay);

  // Add status text animation
  animateDeleteLoadingText(vendorName);
}

function hideDeleteLoadingOverlay() {
  const overlay = document.getElementById('deleteLoadingOverlay');
  if (overlay) {
    overlay.style.animation = 'fadeOut 0.3s ease-in';
    setTimeout(() => {
      overlay.remove();
    }, 300);
  }

  // Clear any running animations
  if (window.deleteLoadingTextInterval) {
    clearInterval(window.deleteLoadingTextInterval);
  }
}

function animateDeleteLoadingText(vendorName) {
  const statusMessages = [
    `<i class="fas fa-search me-2"></i>Finding schedule for "${vendorName}"...`,
    `<i class="fas fa-unlink me-2"></i>Removing procurement assignments...`,
    `<i class="fas fa-calendar-times me-2"></i>Deleting delivery assignments...`,
    `<i class="fas fa-file-invoice me-2"></i>Clearing invoice records...`,
    `<i class="fas fa-trash me-2"></i>Finalizing deletion...`
  ];

  let currentIndex = 0;
  const statusElement = document.getElementById('deleteLoadingStatusText');

  if (statusElement) {
    window.deleteLoadingTextInterval = setInterval(() => {
      statusElement.innerHTML = statusMessages[currentIndex];
      currentIndex = (currentIndex + 1) % statusMessages.length;
    }, 1200);
  }
}

// Enhanced delete success message
function showDeleteSuccessMessage(message, deletedRecords) {
  const successOverlay = document.createElement('div');
  successOverlay.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10000;
  `;

  const recordsInfo = deletedRecords ? `
    <div class="mt-3 text-start">
      <small class="text-muted">
        <strong>Deleted Records:</strong><br>
        • Procurement assignments: ${deletedRecords.deleted_assignments || 0}<br>
        • Delivery assignments: ${deletedRecords.deleted_delivery_assignments || 0}<br>
        • Product: ${deletedRecords.product_name || 'N/A'}
      </small>
    </div>
  ` : '';

  successOverlay.innerHTML = `
    <div style="background: white; padding: 2rem; border-radius: 10px; text-align: center; max-width: 450px; box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);">
      <div style="color: #28a745; font-size: 3rem; margin-bottom: 1rem;">
        <i class="fas fa-check-circle"></i>
      </div>
      <h5 class="text-success mb-3">Successfully Deleted!</h5>
      <p class="mb-3">${message}</p>
      ${recordsInfo}
      <button class="btn btn-success mt-3" onclick="this.closest('div').parentElement.remove()">
        <i class="fas fa-thumbs-up me-2"></i>Got it!
      </button>
    </div>
  `;

  document.body.appendChild(successOverlay);

  // Auto remove after 8 seconds
  setTimeout(() => {
    if (successOverlay.parentElement) {
      successOverlay.remove();
    }
  }, 8000);
}

// Make functions globally accessible
window.toggleSelectAll = toggleSelectAll;
// Invoice Generation Function
function generateInvoice(scheduleId, vendorName, button) {
  // Show attractive loading overlay
  showInvoiceLoadingOverlay(vendorName);

  // Disable the button and show loading state
  const originalHTML = button.innerHTML;
  button.disabled = true;
  button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';

  // Make AJAX request to generate invoice
  fetch(`/milk-supply-analytics/generate_procurement_invoice?schedule_id=${scheduleId}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
    }
  })
  .then(response => {
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return response.json();
  })
  .then(data => {
    if (data.success) {
      // Hide loading overlay
      hideInvoiceLoadingOverlay();

      // Show success message
      showSuccessToast(`Invoice generated successfully for ${vendorName}!`);

      // Update the actions to show view button
      updateInvoiceActions(scheduleId, true, data.invoice_number, data.invoice_date);

      // If there's a PDF URL, trigger download
      if (data.pdf_url) {
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = data.pdf_url;
        a.download = `procurement_invoice_${vendorName.replace(/\s+/g, '_')}_${scheduleId}.pdf`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
      }
    } else {
      throw new Error(data.error || 'Failed to generate invoice');
    }
  })
  .catch(error => {
    console.error('Error generating invoice:', error);
    hideInvoiceLoadingOverlay();
    showErrorToast('Failed to generate invoice. Please try again.');
  })
  .finally(() => {
    // Restore button state
    button.disabled = false;
    button.innerHTML = originalHTML;
  });
}

// Show invoice loading overlay
function showInvoiceLoadingOverlay(vendorName, title = 'Generating Invoice') {
  // Remove existing overlay if any
  const existingOverlay = document.getElementById('invoiceLoadingOverlay');
  if (existingOverlay) {
    existingOverlay.remove();
  }

  // Create overlay
  const overlay = document.createElement('div');
  overlay.id = 'invoiceLoadingOverlay';
  overlay.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
    backdrop-filter: blur(5px);
  `;

  // Create loading content
  const loadingContent = document.createElement('div');
  loadingContent.style.cssText = `
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 3rem;
    border-radius: 20px;
    text-align: center;
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.4);
    max-width: 450px;
    color: white;
    animation: fadeInScale 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  `;

  loadingContent.innerHTML = `
    <div style="margin-bottom: 2rem;">
      <div style="width: 100px; height: 100px; margin: 0 auto 1.5rem; position: relative;">
        <div class="spinner-border" role="status" style="width: 100px; height: 100px; border-width: 8px; border-color: rgba(255,255,255,0.3); border-top-color: white;">
          <span class="visually-hidden">Loading...</span>
        </div>
        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); font-size: 30px;">
          <i class="fas fa-file-invoice-dollar" style="color: white; animation: pulseInvoice 2s ease-in-out infinite;"></i>
        </div>
      </div>
    </div>

    <h4 class="mb-3 fw-bold">
      <i class="fas fa-magic me-2"></i>
      ${title}
    </h4>

    <div class="mb-3">
      <div class="progress mb-2" style="height: 10px; background: rgba(255,255,255,0.2);">
        <div class="progress-bar progress-bar-striped progress-bar-animated"
             role="progressbar" style="width: 100%; background: linear-gradient(90deg, #ffd700, #ff6b6b);"></div>
      </div>
    </div>

    <p class="mb-2" style="font-size: 1.1rem;">
      <i class="fas fa-user-tie me-2"></i>
      <strong>${vendorName}</strong>
    </p>

    <p class="text-light mb-0" style="opacity: 0.9;">
      <i class="fas fa-clock me-2"></i>
      Creating procurement invoice...
    </p>

    <div class="mt-3">
      <small style="opacity: 0.8;">
        <i class="fas fa-info-circle me-1"></i>
        This may take a few moments
      </small>
    </div>
  `;

  // Add CSS animation for invoice loading
  if (!document.getElementById('invoiceLoadingStyles')) {
    const style = document.createElement('style');
    style.id = 'invoiceLoadingStyles';
    style.textContent = `
      @keyframes fadeInScale {
        from {
          opacity: 0;
          transform: scale(0.7) translateY(50px);
        }
        to {
          opacity: 1;
          transform: scale(1) translateY(0);
        }
      }

      @keyframes pulseInvoice {
        0%, 100% {
          transform: translate(-50%, -50%) scale(1);
          opacity: 1;
        }
        50% {
          transform: translate(-50%, -50%) scale(1.2);
          opacity: 0.8;
        }
      }
    `;
    document.head.appendChild(style);
  }

  overlay.appendChild(loadingContent);
  document.body.appendChild(overlay);
}

// Hide invoice loading overlay
function hideInvoiceLoadingOverlay() {
  const overlay = document.getElementById('invoiceLoadingOverlay');
  if (overlay) {
    overlay.style.animation = 'fadeOut 0.3s ease-out forwards';
    setTimeout(() => {
      overlay.remove();
    }, 300);
  }
}

// Show success toast
function showSuccessToast(message) {
  showToast(message, 'success');
}

// Show error toast
function showErrorToast(message) {
  showToast(message, 'error');
}

// Generic toast function
function showToast(message, type = 'info') {
  const toast = document.createElement('div');
  const bgColor = type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : '#007bff';
  const icon = type === 'success' ? 'fas fa-check-circle' : type === 'error' ? 'fas fa-exclamation-circle' : 'fas fa-info-circle';

  toast.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    background: ${bgColor};
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 10px;
    box-shadow: 0 10px 25px rgba(0,0,0,0.3);
    z-index: 10000;
    animation: slideInRight 0.4s ease-out forwards;
    max-width: 350px;
  `;

  toast.innerHTML = `
    <div style="display: flex; align-items: center;">
      <i class="${icon} me-2" style="font-size: 1.2rem;"></i>
      <span>${message}</span>
    </div>
  `;

  // Add slide animation
  if (!document.getElementById('toastStyles')) {
    const style = document.createElement('style');
    style.id = 'toastStyles';
    style.textContent = `
      @keyframes slideInRight {
        from {
          transform: translateX(100%);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }
      @keyframes slideOutRight {
        from {
          transform: translateX(0);
          opacity: 1;
        }
        to {
          transform: translateX(100%);
          opacity: 0;
        }
      }
    `;
    document.head.appendChild(style);
  }

  document.body.appendChild(toast);

  // Auto remove after 4 seconds
  setTimeout(() => {
    toast.style.animation = 'slideOutRight 0.4s ease-out forwards';
    setTimeout(() => {
      if (toast.parentNode) {
        toast.parentNode.removeChild(toast);
      }
    }, 400);
  }, 4000);
}

window.updateSelectionState = updateSelectionState;
window.clearSelection = clearSelection;
window.deleteSelectedSchedules = deleteSelectedSchedules;
window.copySchedulesFromLastMonth = copySchedulesFromLastMonth;
window.deleteIndividualSchedule = deleteIndividualSchedule;
window.showCopyLoadingOverlay = showCopyLoadingOverlay;
window.hideCopyLoadingOverlay = hideCopyLoadingOverlay;
window.showDeleteLoadingOverlay = showDeleteLoadingOverlay;
window.hideDeleteLoadingOverlay = hideDeleteLoadingOverlay;
// Check invoice status for a schedule
function checkInvoiceStatus(scheduleId) {
  fetch(`/milk-supply-analytics/get_schedule_invoice_status?schedule_id=${scheduleId}`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.has_invoice) {
      updateInvoiceActions(scheduleId, true, data.invoice_number, data.invoice_date);
    }
  })
  .catch(error => {
    console.log('Error checking invoice status:', error);
  });
}

// View existing invoice
function viewInvoice(scheduleId, vendorName) {
  // Show loading overlay
  showInvoiceLoadingOverlay(vendorName, 'Viewing Invoice');

  // Open invoice in new tab using existing method
  const url = `/milk-supply-analytics/view_schedule_invoice?schedule_id=${scheduleId}`;
  window.open(url, '_blank');

  // Hide loading overlay after a short delay
  setTimeout(() => {
    hideInvoiceLoadingOverlay();
  }, 1000);
}

// Update invoice actions to show appropriate buttons
function updateInvoiceActions(scheduleId, hasInvoice, invoiceNumber = '', invoiceDate = '') {
  const actionsContainer = document.getElementById(`actions-${scheduleId}`);
  if (!actionsContainer) return;

  const invoiceBtn = document.getElementById(`invoice-btn-${scheduleId}`);
  if (!invoiceBtn) return;

  if (hasInvoice) {
    // Update the generate button to show it's generated and add view button
    invoiceBtn.className = 'btn btn-success btn-sm';
    invoiceBtn.title = `Invoice Generated: ${invoiceNumber}`;
    invoiceBtn.innerHTML = '<i class="fas fa-check-circle"></i>';

    // Add view button if it doesn't exist
    const existingViewBtn = document.getElementById(`view-btn-${scheduleId}`);
    if (!existingViewBtn) {
      const viewBtn = document.createElement('button');
      viewBtn.className = 'btn btn-outline-info btn-sm';
      viewBtn.id = `view-btn-${scheduleId}`;
      viewBtn.title = 'View Invoice';
      viewBtn.innerHTML = '<i class="fas fa-eye"></i>';
      viewBtn.onclick = function() {
        const vendorName = this.closest('tr').querySelector('td:nth-child(2)').textContent.trim();
        viewInvoice(scheduleId, vendorName);
      };

      // Insert before the delete button
      const deleteBtn = actionsContainer.querySelector('button:last-child');
      actionsContainer.insertBefore(viewBtn, deleteBtn);
    }

    // Add invoice info tooltip
    if (invoiceNumber && invoiceDate) {
      invoiceBtn.setAttribute('data-bs-toggle', 'tooltip');
      invoiceBtn.setAttribute('data-bs-placement', 'left');
      invoiceBtn.setAttribute('title', `Invoice: ${invoiceNumber}\nDate: ${invoiceDate}`);
    }
  } else {
    // Reset to generate button
    invoiceBtn.className = 'btn btn-outline-primary btn-sm';
    invoiceBtn.title = 'Generate Invoice';
    invoiceBtn.innerHTML = '<i class="fas fa-file-invoice-dollar"></i>';

    // Remove view button if it exists
    const viewBtn = document.getElementById(`view-btn-${scheduleId}`);
    if (viewBtn) {
      viewBtn.remove();
    }
  }
}

// Global variable to store current schedule ID
let currentScheduleId = null;

// Show procurement assignments in simple overlay (no modal)
function showProcurementAssignments(scheduleId, vendorName) {
  try {
    currentScheduleId = scheduleId;
    const overlay = document.getElementById('procurementAssignmentsOverlay');
    const content = document.getElementById('procurementAssignmentsContent');
    const title = document.getElementById('procurementAssignmentsTitle');

    if (!overlay || !content || !title) {
      console.error('Overlay elements not found');
      return;
    }

    // Update title
    title.textContent = `Procurement Assignments - ${vendorName}`;

    // Show loading state
    content.innerHTML = `
      <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
          <span class="visually-hidden">Loading...</span>
        </div>
        <h4 class="mt-3 mb-2" style="color: #2c3e50;">Loading Assignments...</h4>
        <p class="text-muted mb-0">Please wait while we fetch data for ${vendorName}</p>
      </div>
    `;

    // Show overlay with smooth animation
    overlay.style.display = 'block';
    overlay.style.opacity = '0';
    setTimeout(() => {
      overlay.style.transition = 'opacity 0.3s ease';
      overlay.style.opacity = '1';
    }, 10);

    // Show refresh button
    const refreshBtn = document.getElementById('refreshAssignmentsBtn');
    if (refreshBtn) {
      refreshBtn.style.display = 'inline-block';
    }

    // Add click outside to close
    overlay.onclick = function(e) {
      if (e.target === overlay) {
        closeProcurementAssignmentsOverlay();
      }
    };

    // Add escape key to close
    document.addEventListener('keydown', handleEscapeKey);

    // Fetch assignments data
    fetch(`/milk-supply-analytics/show_procurement_assignments?id=${scheduleId}`, {
      method: 'GET',
      headers: {
        'Accept': 'text/html',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      }
    })
    .then(response => {
      if (!response.ok) {
        throw new Error(`Server error: ${response.status}`);
      }
      return response.text();
    })
    .then(html => {
      content.innerHTML = html;
    })
    .catch(error => {
      console.error('Error loading assignments:', error);
      content.innerHTML = `
        <div class="alert alert-danger text-center m-4">
          <i class="fas fa-exclamation-triangle fa-3x mb-3 text-danger"></i>
          <h5>Error Loading Assignments</h5>
          <p>Unable to load procurement assignments for ${vendorName}.</p>
          <button class="btn btn-primary" onclick="showProcurementAssignments(${scheduleId}, '${vendorName}')">
            <i class="fas fa-redo me-1"></i>Try Again
          </button>
        </div>
      `;
    });
  } catch (error) {
    console.error('Error in showProcurementAssignments:', error);
    showErrorToast('Failed to open assignments overlay');
  }
}

// Refresh current assignments
function refreshCurrentAssignments() {
  if (currentScheduleId) {
    try {
      const vendorName = document.querySelector(`#actions-${currentScheduleId}`).closest('tr').querySelector('td:nth-child(2)').textContent.trim();
      showProcurementAssignments(currentScheduleId, vendorName);
    } catch (error) {
      console.error('Error refreshing assignments:', error);
      showErrorToast('Unable to refresh assignments');
    }
  }
}

// Edit procurement assignment with modal
function editProcurementAssignment(assignmentId) {
  console.log('Editing procurement assignment:', assignmentId);

  // Get modal elements
  const modal = document.getElementById('editProcurementModal');
  const content = document.getElementById('editProcurementModalContent');
  const title = document.getElementById('editProcurementModalTitle');

  if (!modal || !content || !title) {
    showErrorToast('Modal elements not found. Please refresh the page.');
    return;
  }

  // Update title
  title.innerHTML = `<i class="fas fa-edit me-2"></i>Edit Assignment #${assignmentId}`;

  // Show modal with proper display and positioning
  modal.style.display = 'flex';
  modal.style.position = 'fixed';
  modal.style.top = '0';
  modal.style.left = '0';
  modal.style.width = '100%';
  modal.style.height = '100%';
  modal.style.zIndex = '100000';
  modal.style.justifyContent = 'center';
  modal.style.alignItems = 'center';

  // Ensure body doesn't scroll when modal is open
  document.body.style.overflow = 'hidden';

  // Show loading
  content.innerHTML = `
    <div class="text-center py-4">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
      <p class="mt-2">Loading edit form...</p>
    </div>
  `;

  // Add click outside to close
  modal.onclick = function(e) {
    if (e.target === modal) {
      closeProcurementEditModal();
    }
  };

  // Load edit form
  fetch(`/milk-assignments/${assignmentId}/edit.json`, {
    method: 'GET',
    headers: {
      'Accept': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
    }
  })
  .then(response => {
    if (!response.ok) {
      // For 422 errors, try to get specific error details
      if (response.status === 422) {
        return response.json().then(errorData => {
          throw new Error(errorData.error || 'This assignment cannot be edited');
        }).catch(() => {
          throw new Error('This assignment cannot be edited');
        });
      } else {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
    }
    return response.json();
  })
  .then(data => {
    if (data.success && data.assignment) {
      const assignment = data.assignment;

      // Create edit form
      content.innerHTML = `
        <form id="editProcurementForm" onsubmit="updateProcurementAssignment(event, ${assignmentId})">
          <div class="row">
            <div class="col-md-6 mb-3">
              <label class="form-label fw-semibold">
                <i class="fas fa-calendar me-1 text-primary"></i>Date
              </label>
              <input type="date" class="form-control" name="date" value="${assignment.date || ''}" required>
            </div>
            <div class="col-md-6 mb-3">
              <label class="form-label fw-semibold">
                <i class="fas fa-truck me-1 text-primary"></i>Vendor Name
              </label>
              <input type="text" class="form-control" name="vendor_name" value="${assignment.vendor_name || ''}" required>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6 mb-3">
              <label class="form-label fw-semibold">
                <i class="fas fa-box me-1 text-primary"></i>Quantity
              </label>
              <div class="input-group">
                <input type="number" class="form-control" name="planned_quantity" value="${assignment.planned_quantity || ''}" step="0.1" min="0" required>
                <span class="input-group-text">${assignment.unit || 'L'}</span>
              </div>
            </div>
            <div class="col-md-6 mb-3">
              <label class="form-label fw-semibold">
                <i class="fas fa-weight me-1 text-primary"></i>Unit
              </label>
              <input type="text" class="form-control" name="unit" value="${assignment.unit || 'Liters'}" required>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6 mb-3">
              <label class="form-label fw-semibold">
                <i class="fas fa-rupee-sign me-1 text-success"></i>Buying Price
              </label>
              <div class="input-group">
                <span class="input-group-text">₹</span>
                <input type="number" class="form-control" name="buying_price" value="${assignment.buying_price || ''}" step="0.01" min="0" required>
                <span class="input-group-text">per ${assignment.unit || 'L'}</span>
              </div>
            </div>
            <div class="col-md-6 mb-3">
              <label class="form-label fw-semibold">
                <i class="fas fa-tag me-1 text-info"></i>Selling Price
              </label>
              <div class="input-group">
                <span class="input-group-text">₹</span>
                <input type="number" class="form-control" name="selling_price" value="${assignment.selling_price || ''}" step="0.01" min="0">
                <span class="input-group-text">per ${assignment.unit || 'L'}</span>
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-12 mb-3">
              <label class="form-label fw-semibold">
                <i class="fas fa-info-circle me-1 text-primary"></i>Status
              </label>
              <select class="form-select" name="status" required>
                <option value="pending" ${assignment.status === 'pending' ? 'selected' : ''}>Pending</option>
                <option value="completed" ${assignment.status === 'completed' ? 'selected' : ''}>Completed</option>
                <option value="cancelled" ${assignment.status === 'cancelled' ? 'selected' : ''}>Cancelled</option>
              </select>
            </div>
          </div>

          <div class="mb-3">
            <label class="form-label fw-semibold">
              <i class="fas fa-sticky-note me-1 text-warning"></i>Notes
            </label>
            <textarea class="form-control" name="notes" rows="2" placeholder="Add any notes...">${assignment.notes || ''}</textarea>
          </div>

          <div class="d-flex justify-content-end gap-2 pt-3 border-top">
            <button type="button" class="btn btn-secondary" onclick="closeProcurementEditModal()">
              <i class="fas fa-times me-1"></i>Cancel
            </button>
            <button type="submit" class="btn btn-primary" id="updateProcurementBtn">
              <i class="fas fa-save me-1"></i>Update Assignment
            </button>
          </div>
        </form>
      `;
    } else {
      throw new Error(data.error || 'Failed to load assignment data');
    }
  })
  .catch(error => {
    console.error('Error loading edit form:', error);
    content.innerHTML = `
      <div class="alert alert-danger text-center">
        <i class="fas fa-exclamation-triangle fa-2x mb-3"></i>
        <h6>Error Loading Edit Form</h6>
        <p class="mb-3">${error.message}</p>
        <button class="btn btn-primary" onclick="editProcurementAssignment(${assignmentId})">
          <i class="fas fa-redo me-1"></i>Try Again
        </button>
      </div>
    `;
  });
}

// Update procurement assignment form submit
function updateProcurementAssignment(event, assignmentId) {
  event.preventDefault();

  const form = event.target;
  const submitBtn = document.getElementById('updateProcurementBtn');
  const originalBtnText = submitBtn.innerHTML;

  // Show loading on button
  submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Updating...';
  submitBtn.disabled = true;

  // Collect form data
  const formData = new FormData(form);
  const assignment = Object.fromEntries(formData);

  // Ensure required fields have values
  if (!assignment.vendor_name || assignment.vendor_name.trim() === '') {
    showErrorToast('Vendor name is required');
    submitBtn.innerHTML = originalBtnText;
    submitBtn.disabled = false;
    return;
  }

  if (!assignment.planned_quantity || parseFloat(assignment.planned_quantity) <= 0) {
    showErrorToast('Planned quantity must be greater than 0');
    submitBtn.innerHTML = originalBtnText;
    submitBtn.disabled = false;
    return;
  }

  if (!assignment.buying_price || parseFloat(assignment.buying_price) <= 0) {
    showErrorToast('Buying price must be greater than 0');
    submitBtn.innerHTML = originalBtnText;
    submitBtn.disabled = false;
    return;
  }

  if (!assignment.selling_price || parseFloat(assignment.selling_price) <= 0) {
    showErrorToast('Selling price must be greater than 0');
    submitBtn.innerHTML = originalBtnText;
    submitBtn.disabled = false;
    return;
  }

  if (!assignment.unit || assignment.unit.trim() === '') {
    showErrorToast('Unit is required');
    submitBtn.innerHTML = originalBtnText;
    submitBtn.disabled = false;
    return;
  }

  const data = {
    procurement_assignment: assignment
  };

  fetch(`/milk-assignments/${assignmentId}.json`, {
    method: 'PATCH',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
    },
    body: JSON.stringify(data)
  })
  .then(response => {
    if (!response.ok) {
      // For 422 errors, try to get validation error details
      if (response.status === 422) {
        return response.json().then(errorData => {
          if (errorData && typeof errorData === 'object') {
            const errorMessages = [];
            for (const [field, messages] of Object.entries(errorData)) {
              if (Array.isArray(messages)) {
                errorMessages.push(`${field}: ${messages.join(', ')}`);
              } else {
                errorMessages.push(`${field}: ${messages}`);
              }
            }
            throw new Error('Validation errors: ' + errorMessages.join('; '));
          } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
          }
        }).catch(() => {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        });
      } else {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
    }
    return response.json();
  })
  .then(data => {
    showSuccessToast('✅ Assignment updated successfully!');
    closeProcurementEditModal();

    // Refresh the current assignments view
    if (typeof refreshCurrentAssignments === 'function') {
      refreshCurrentAssignments();
    }

    // If the procurement assignments modal is open, refresh it as well
    const procurementModal = document.getElementById('procurementAssignmentsOverlay');
    if (procurementModal && procurementModal.style.display !== 'none') {
      // Refresh the modal content by triggering a reload of the assignments
      setTimeout(() => {
        location.reload(); // Simple reload to refresh all data
      }, 1000);
    }
  })
  .catch(error => {
    console.error('Error updating assignment:', error);
    showErrorToast('Failed to update assignment: ' + error.message);
  })
  .finally(() => {
    submitBtn.innerHTML = originalBtnText;
    submitBtn.disabled = false;
  });
}

// Complete procurement assignment
function completeProcurementAssignment(assignmentId) {
  if (confirm('Mark this assignment as completed?')) {
    const button = event.target.closest('button');
    const originalContent = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
    button.disabled = true;

    fetch(`/milk-assignments/${assignmentId}/complete.json`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      }
    })
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      return response.json();
    })
    .then(data => {
      if (data.success) {
        showSuccessToast('✅ Assignment marked as completed!');
        refreshCurrentAssignments();
      } else {
        throw new Error(data.message || 'Failed to complete assignment');
      }
    })
    .catch(error => {
      console.error('Error completing assignment:', error);
      showErrorToast('Failed to complete assignment: ' + error.message);
    })
    .finally(() => {
      button.innerHTML = originalContent;
      button.disabled = false;
    });
  }
}

// Complete assignments till today for a vendor
function completeTillToday(vendorName) {
  if (!vendorName) {
    showErrorToast('Vendor name is required');
    return;
  }

  if (!confirm(`Are you sure you want to mark all pending assignments for "${vendorName}" till today as completed?\n\nThis will set the actual quantity equal to planned quantity for each assignment.`)) {
    return;
  }

  // Find the button and show loading state
  const button = event.target.closest('button');
  const originalContent = button.innerHTML;
  button.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Completing...';
  button.disabled = true;

  fetch('/milk-assignments/complete_till_today.json', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
    },
    body: JSON.stringify({
      vendor_name: vendorName
    })
  })
  .then(response => {
    if (!response.ok) {
      return response.json().then(errorData => {
        throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);
      });
    }
    return response.json();
  })
  .then(data => {
    if (data.success) {
      showSuccessToast(`✅ ${data.message}`);

      // Refresh the current assignments view
      if (typeof refreshCurrentAssignments === 'function') {
        refreshCurrentAssignments();
      }

      // If we're in the modal, close it and reopen to show updated data
      if (typeof closeProcurementAssignmentsModal === 'function') {
        closeProcurementAssignmentsModal();
        // Small delay before reopening to ensure data is refreshed
        setTimeout(() => {
          if (typeof refreshAndReopenModal === 'function') {
            refreshAndReopenModal();
          }
        }, 500);
      }
    } else {
      showErrorToast(`❌ ${data.message}`);
    }
  })
  .catch(error => {
    console.error('Error completing assignments till today:', error);
    showErrorToast(`Failed to complete assignments: ${error.message}`);
  })
  .finally(() => {
    button.innerHTML = originalContent;
    button.disabled = false;
  });
}

// Delete procurement assignment
function deleteProcurementAssignment(assignmentId) {
  if (confirm('Are you sure you want to delete this assignment? This action cannot be undone.')) {
    const button = event.target.closest('button');
    const originalContent = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
    button.disabled = true;

    fetch(`/milk-assignments/${assignmentId}.json`, {
      method: 'DELETE',
      headers: {
        'Accept': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      }
    })
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      return response.json();
    })
    .then(data => {
      if (data.success) {
        showSuccessToast('✅ Assignment deleted successfully!');
        refreshCurrentAssignments();
      } else {
        throw new Error(data.message || 'Failed to delete assignment');
      }
    })
    .catch(error => {
      console.error('Error deleting assignment:', error);
      showErrorToast('Failed to delete assignment: ' + error.message);
    })
    .finally(() => {
      button.innerHTML = originalContent;
      button.disabled = false;
    });
  }
}

// Close procurement edit modal
function closeProcurementEditModal() {
  const modal = document.getElementById('editProcurementModal');
  if (modal) {
    modal.style.display = 'none';
  }

  // Restore body scrolling
  document.body.style.overflow = '';
}

// Mark all assignments completed with loader and backend update
function markAllCompleted(scheduleId) {
  if (!confirm('Are you sure you want to mark all pending assignments as completed for this vendor in current month?')) {
    return;
  }

  const overlay = document.getElementById('procurementAssignmentsOverlay');
  const content = document.getElementById('procurementAssignmentsContent');

  if (!overlay || !content) {
    showErrorToast('Unable to access overlay elements');
    return;
  }

  // Show attractive loader with CSS animation
  content.innerHTML = `
    <style>
      .rotating-check {
        animation: pulse 2s ease-in-out infinite;
      }
      @keyframes pulse {
        0%, 100% { transform: scale(1); opacity: 0.8; }
        50% { transform: scale(1.1); opacity: 1; }
      }
    </style>
    <div class="text-center py-5">
      <div class="loader-container mb-4">
        <div class="spinner-border text-success" role="status" style="width: 4rem; height: 4rem;">
          <span class="visually-hidden">Processing...</span>
        </div>
        <div class="rotating-check mt-3">
          <i class="fas fa-check-circle" style="font-size: 2rem; color: #28a745;"></i>
        </div>
      </div>

      <h4 class="mt-3 mb-2" style="color: #28a745; font-weight: 600;">
        🚀 Completing Assignments
      </h4>

      <p class="text-muted mb-3">
        Marking all pending assignments as completed for current month...
      </p>

      <div class="progress mx-auto mb-3" style="width: 300px; height: 8px; border-radius: 10px;">
        <div class="progress-bar progress-bar-striped progress-bar-animated bg-success"
             role="progressbar"
             style="width: 100%; border-radius: 10px;">
        </div>
      </div>

      <small class="text-muted">Please wait while we update the assignments...</small>
    </div>
  `;

  // Make API call to mark assignments as completed
  fetch(`/milk-supply-analytics/mark_assignments_completed`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
    },
    body: JSON.stringify({
      id: scheduleId
    })
  })
  .then(response => {
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    return response.json();
  })
  .then(data => {
    if (data.success) {
      // Show success message
      showSuccessToast(`✅ Successfully marked ${data.updated_count} assignment(s) as completed!`);

      // Wait a moment to show success, then refresh
      setTimeout(() => {
        refreshCurrentAssignments();
      }, 1500);
    } else {
      throw new Error(data.message || 'Failed to update assignments');
    }
  })
  .catch(error => {
    console.error('Error marking assignments as completed:', error);

    // Show error state
    content.innerHTML = `
      <div class="alert alert-danger text-center m-4">
        <i class="fas fa-exclamation-triangle fa-3x mb-3 text-danger"></i>
        <h5>Error Completing Assignments</h5>
        <p class="mb-3">${error.message}</p>
        <div class="btn-group">
          <button class="btn btn-primary" onclick="markAllCompleted(${scheduleId})">
            <i class="fas fa-redo me-1"></i>Try Again
          </button>
          <button class="btn btn-secondary" onclick="refreshCurrentAssignments()">
            <i class="fas fa-times me-1"></i>Cancel
          </button>
        </div>
      </div>
    `;

    showErrorToast('Failed to complete assignments: ' + error.message);
  });
}

// Create new procurement assignment
function createProcurementAssignment(scheduleId = null) {
  const id = scheduleId || currentScheduleId;
  showSuccessToast('Create assignment functionality coming soon!');
}

// Export assignments function (placeholder)
function exportAssignments(scheduleId) {
  // This could be implemented to export assignments to CSV/Excel
  showSuccessToast('Export functionality coming soon!');
}

// Close procurement assignments overlay
function closeProcurementAssignmentsOverlay() {
  const overlay = document.getElementById('procurementAssignmentsOverlay');
  if (overlay) {
    // Smooth fade out
    overlay.style.transition = 'opacity 0.3s ease';
    overlay.style.opacity = '0';

    setTimeout(() => {
      overlay.style.display = 'none';
      overlay.style.transition = '';
    }, 300);

    // Clean up
    currentScheduleId = null;
    const refreshBtn = document.getElementById('refreshAssignmentsBtn');
    if (refreshBtn) {
      refreshBtn.style.display = 'none';
    }

    // Remove escape key listener
    document.removeEventListener('keydown', handleEscapeKey);
  }
}

// Handle escape key press
function handleEscapeKey(e) {
  if (e.key === 'Escape') {
    closeProcurementAssignmentsOverlay();
  }
}

window.generateInvoice = generateInvoice;
window.viewInvoice = viewInvoice;
window.checkInvoiceStatus = checkInvoiceStatus;
window.updateInvoiceActions = updateInvoiceActions;
window.showProcurementAssignments = showProcurementAssignments;
window.refreshCurrentAssignments = refreshCurrentAssignments;
window.editProcurementAssignment = editProcurementAssignment;
window.completeProcurementAssignment = completeProcurementAssignment;
window.deleteProcurementAssignment = deleteProcurementAssignment;
window.markAllCompleted = markAllCompleted;
window.createProcurementAssignment = createProcurementAssignment;
window.exportAssignments = exportAssignments;
window.closeProcurementAssignmentsOverlay = closeProcurementAssignmentsOverlay;
window.handleEscapeKey = handleEscapeKey;
window.updateProcurementAssignment = updateProcurementAssignment;
window.closeProcurementEditModal = closeProcurementEditModal;

// Global loader functionality for slow API calls
let loadingTimer;
let isLoading = false;

function showLoader() {
  if (isLoading) return;
  isLoading = true;

  const loader = document.getElementById('global-loader');
  if (loader) {
    loader.classList.add('show');
  }
}

function hideLoader() {
  isLoading = false;
  const loader = document.getElementById('global-loader');
  if (loader) {
    loader.classList.remove('show');
  }
  if (loadingTimer) {
    clearTimeout(loadingTimer);
  }
}

function startLoadingTimer() {
  loadingTimer = setTimeout(() => {
    if (!isLoading) {
      showLoader();
    }
  }, 1000); // Show loader after 1 second
}

// Intercept all forms and AJAX requests to show loader
document.addEventListener('DOMContentLoaded', function() {
  // Intercept form submissions
  const forms = document.querySelectorAll('form');
  forms.forEach(form => {
    form.addEventListener('submit', function(e) {
      startLoadingTimer();
    });
  });

  // Intercept jQuery AJAX requests if jQuery is available
  if (typeof $ !== 'undefined') {
    $(document).ajaxStart(function() {
      startLoadingTimer();
    });

    $(document).ajaxComplete(function() {
      hideLoader();
    });

    $(document).ajaxError(function() {
      hideLoader();
    });
  }

  // Intercept fetch requests
  const originalFetch = window.fetch;
  window.fetch = function(...args) {
    startLoadingTimer();
    return originalFetch.apply(this, args)
      .then(response => {
        hideLoader();
        return response;
      })
      .catch(error => {
        hideLoader();
        throw error;
      });
  };

  // Intercept navigation and link clicks
  const links = document.querySelectorAll('a[href*="milk_analytics"]');
  links.forEach(link => {
    link.addEventListener('click', function(e) {
      // Only show loader for same-page navigation
      if (this.getAttribute('href').includes('milk_analytics')) {
        startLoadingTimer();
      }
    });
  });
});

// Make functions globally available
window.showLoader = showLoader;
window.hideLoader = hideLoader;
window.startLoadingTimer = startLoadingTimer;

</script>