<% content_for :title, "Procurement Calendar" %>

<div class="container-fluid">
  <!-- Header with Filters -->
  <div class="d-flex justify-content-between align-items-center mb-4">
    <div>
    </div>
    
    <div class="d-flex gap-2 align-items-center">
      <!-- Add New Assignment Button -->
      <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#newAssignmentModal">
        <i class="fas fa-plus me-1"></i>
        New Assignment
      </button>
    </div>
  </div>

  <!-- Filters Row -->
  <div class="row mb-4">
    <div class="col-12">
      <div class="card shadow">
        <div class="card-body">
          <%= form_with url: calendar_view_milk_analytics_path, method: :get, local: true, class: "row g-3 align-items-end" do |form| %>
            <div class="col-md-3">
              <%= form.label :view_type, "View Type", class: "form-label fw-bold" %>
              <%= form.select :view_type, 
                  options_for_select([
                    ['Monthly View', 'month'],
                    ['Weekly View', 'week'],
                    ['Today Only', 'today'],
                    ['Custom Range', 'custom']
                  ], params[:view_type] || 'month'), 
                  {}, 
                  {class: "form-select", id: "view_type_select", onchange: "handleViewTypeChange()"} %>
            </div>
            
            <!-- Single date field - only shown for Today Only -->
            <div class="col-md-2" id="single_date_field" style="<%= 'display: none;' unless params[:view_type] == 'today' %>">
              <%= form.label :date, "Select Date", class: "form-label fw-bold" %>
              <%= form.date_field :date, 
                  value: params[:date] || Date.current, 
                  class: "form-control", 
                  onchange: "this.form.submit()" %>
            </div>
            
            <!-- Custom date range fields -->
            <div class="col-md-2" id="start_date_field" style="<%= 'display: none;' unless params[:view_type] == 'custom' %>">
              <%= form.label :start_date, "Start Date", class: "form-label fw-bold" %>
              <%= form.date_field :start_date, 
                  value: params[:start_date], 
                  class: "form-control" %>
            </div>
            
            <div class="col-md-2" id="end_date_field" style="<%= 'display: none;' unless params[:view_type] == 'custom' %>">
              <%= form.label :end_date, "End Date", class: "form-label fw-bold" %>
              <%= form.date_field :end_date, 
                  value: params[:end_date], 
                  class: "form-control" %>
            </div>
            
            <div class="col-md-3">
              <%= form.label :vendor_filter, "Filter by Customer/Vendor", class: "form-label fw-bold" %>
              <%= form.select :vendor_filter, 
                  options_for_select([['All Customers', '']] + 
                    (@assignments.map(&:vendor_name).compact.uniq.sort.map { |v| [v, v] }), 
                    params[:vendor_filter]), 
                  {}, 
                  {class: "form-select", onchange: "this.form.submit()"} %>
            </div>
            
            <div class="col-md-2">
              <div class="d-flex gap-2">
                <button type="submit" class="btn btn-primary">
                  <i class="fas fa-search me-1"></i>
                  Apply Filters
                </button>
                <%= link_to calendar_view_milk_analytics_path, class: "btn btn-outline-secondary" do %>
                  <i class="fas fa-refresh me-1"></i>
                  Reset
                <% end %>
              </div>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>

  <!-- Current Period Display -->
  <div class="row mb-4">
    <div class="col-12">
      <div class="card shadow">
        <div class="card-body text-center">
          <h4 class="mb-2">
            <% case params[:view_type] || 'month' %>
            <% when 'week' %>
              <i class="fas fa-calendar-week text-primary me-2"></i>
              Week of <%= @start_date.strftime('%d.%m.%Y') %> - <%= @end_date.strftime('%d.%m.%Y') %>
            <% when 'today' %>
              <i class="fas fa-calendar-day text-primary me-2"></i>
              <%= Date.current.strftime('%A, %d.%m.%Y') %>
            <% when 'custom' %>
              <i class="fas fa-calendar-range text-primary me-2"></i>
              <%= @start_date.strftime('%d.%m.%Y') %> - <%= @end_date.strftime('%d.%m.%Y') %>
            <% else %>
              <i class="fas fa-calendar-month text-primary me-2"></i>
              <%= @date.strftime('%B %Y') %>
            <% end %>
          </h4>
          <div class="row">
            <div class="col-md-3">
              <div class="metric-summary">
                <div class="metric-value text-primary"><%= @assignments.count %></div>
                <div class="metric-label">Total Assignments</div>
              </div>
            </div>
            <div class="col-md-3">
              <div class="metric-summary">
                <div class="metric-value text-success"><%= @assignments.sum { |a| a.actual_quantity || a.planned_quantity || 0 } %>L</div>
                <div class="metric-label">Total Quantity</div>
              </div>
            </div>
            <div class="col-md-3">
              <div class="metric-summary">
                <div class="metric-value text-info">₹<%= @assignments.sum { |a| a.actual_quantity ? (a.actual_cost || 0) : (a.planned_cost || 0) } %></div>
                <div class="metric-label">Total Cost</div>
              </div>
            </div>
            <div class="col-md-3">
              <div class="metric-summary">
                <div class="metric-value <%= @assignments.sum { |a| a.actual_quantity ? (a.actual_profit || 0) : (a.planned_profit || 0) } >= 0 ? 'text-success' : 'text-danger' %>">
                  ₹<%= @assignments.sum { |a| a.actual_quantity ? (a.actual_profit || 0) : (a.planned_profit || 0) } %>
                </div>
                <div class="metric-label">Total Profit</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Assignment Details Panel -->
  <div class="row">
    <div class="col-12">
      <div class="card shadow">
        <div class="card-header">
          <h6 class="m-0 font-weight-bold text-primary">Assignment Details</h6>
        </div>
        <div class="card-body" id="assignmentDetails">
          <% if @assignments_by_date.any? %>
            <% @assignments_by_date.each do |date, assignments| %>
              <div class="assignment-day-section mb-4" data-date="<%= date.strftime('%Y-%m-%d') %>">
                <div class="d-flex justify-content-between align-items-center mb-3">
                  <h6 class="text-primary mb-0">
                    <%= date.strftime('%A, %B %d, %Y') %>
                    <span class="text-muted small">(<%= assignments.count %> assignments)</span>
                  </h6>
                  <button class="btn btn-sm btn-outline-primary" 
                          onclick="openNewAssignmentModal('<%= date.strftime('%Y-%m-%d') %>')">
                    <i class="fas fa-plus me-1"></i>Add Assignment
                  </button>
                </div>
                
                <div class="assignments-grid">
                  <% assignments.each do |assignment| %>
                    <div class="assignment-card <%= assignment.status %>" data-id="<%= assignment.id %>">
                      <div class="assignment-header">
                        <div class="vendor-info">
                          <div class="vendor-name">
                            <i class="fas fa-store me-2 text-primary"></i>
                            <%= assignment.vendor_name %>
                          </div>
                          <div class="assignment-date">
                            <i class="fas fa-calendar-day me-1"></i>
                            <%= assignment.date.strftime('%b %d') %>
                          </div>
                        </div>
                        <div class="assignment-actions">
                          <div class="btn-group" role="group">
                            <button class="btn btn-sm btn-outline-primary" 
                                    onclick="editAssignmentModal(<%= assignment.id %>)" 
                                    title="Edit Assignment">
                              <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" 
                                    onclick="deleteAssignmentConfirm(<%= assignment.id %>, '<%= assignment.vendor_name %>')" 
                                    title="Delete Assignment">
                              <i class="fas fa-trash"></i>
                            </button>
                          </div>
                        </div>
                      </div>
                      
                      <div class="assignment-body">
                        <div class="metrics-row">
                          <div class="metric-box delivery">
                            <div class="metric-details">
                              <div class="metric-value"><%= (assignment.actual_quantity || assignment.planned_quantity || 0).to_f %>L</div>
                              <div class="metric-label">
                                <%= assignment.actual_quantity.present? ? 'Actual Received (L)' : 'Planned Quantity (L)' %>
                              </div>
                              <div class="metric-price">Buying Price: ₹<%= assignment.buying_price %>/L</div>
                            </div>
                          </div>
                          
                          <div class="metric-box pricing">
                            <div class="metric-details">
                              <div class="metric-value">₹<%= assignment.selling_price %>/L</div>
                              <div class="metric-label">Selling Price</div>
                              <div class="metric-profit">
                                <% qty_for_profit = (assignment.actual_quantity || assignment.planned_quantity || 0).to_f %>
                                Profit: ₹<%= (qty_for_profit * (assignment.selling_price - assignment.buying_price)).round(2) %>
                              </div>
                            </div>
                          </div>
                        </div>
                        
                        <div class="summary-row">
                          <div class="profit-summary">
                            <div class="profit-value <%= (assignment.actual_quantity.present? ? assignment.actual_profit : assignment.planned_profit) >= 0 ? 'text-success' : 'text-danger' %>">
                              ₹<%= number_with_delimiter((assignment.actual_quantity.present? ? assignment.actual_profit : assignment.planned_profit).round(2)) %>
                            </div>
                            <div class="profit-label">
                              <%= assignment.actual_quantity.present? ? 'Actual' : 'Expected' %> Profit
                            </div>
                          </div>
                          
                          <div class="status-summary">
                            <span class="status-badge status-<%= assignment.status %>">
                              <i class="fas fa-<%= case assignment.status
                                               when 'completed' then 'check'
                                               when 'pending' then 'clock'
                                               when 'cancelled' then 'times'
                                               else 'question'
                                               end %> me-1"></i>
                              <%= assignment.status.humanize %>
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                  <% end %>
                </div>
              </div>
            <% end %>
          <% else %>
            <div class="text-center py-5">
              <i class="fas fa-calendar-times fa-3x text-muted mb-3"></i>
              <p class="text-muted">No assignments found for this month.</p>
              <button class="btn btn-primary" onclick="openNewAssignmentModal()">
                <i class="fas fa-plus me-1"></i>
                Create New Assignment
              </button>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- New Assignment Modal -->
<div class="modal fade" id="newAssignmentModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">New Procurement Assignment</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <%= form_with model: ProcurementAssignment.new, 
                      url: procurement_assignments_path, 
                      id: 'newAssignmentForm', 
                      local: true do |form| %>
          <div class="row">
            <div class="col-md-6 mb-3">
              <%= form.label :date, class: 'form-label' %>
              <%= form.date_field :date, class: 'form-control', required: true %>
            </div>
            <div class="col-md-6 mb-3">
              <%= form.label :vendor_name, class: 'form-label' %>
              <%= form.text_field :vendor_name, class: 'form-control', required: true %>
            </div>
          </div>
          
          <div class="row">
            <div class="col-md-4 mb-3">
              <%= form.label :planned_quantity, "Planned Quantity (L)", class: 'form-label' %>
              <%= form.number_field :planned_quantity, step: 0.01, class: 'form-control', required: true %>
            </div>
            <div class="col-md-4 mb-3">
              <%= form.label :buying_price, "Buying Price (₹/L)", class: 'form-label' %>
              <%= form.number_field :buying_price, step: 0.01, class: 'form-control', required: true %>
            </div>
            <div class="col-md-4 mb-3">
              <%= form.label :selling_price, "Selling Price (₹/L)", class: 'form-label' %>
              <%= form.number_field :selling_price, step: 0.01, class: 'form-control', required: true %>
            </div>
          </div>
          
          <div class="row">
            <div class="col-md-6 mb-3">
              <%= form.label :unit, class: 'form-label' %>
              <%= form.select :unit, options_for_select([['Liters', 'L'], ['Kilograms', 'Kg']]), {}, 
                              {class: 'form-select', required: true} %>
            </div>
            <div class="col-md-6 mb-3">
              <%= form.label :status, class: 'form-label' %>
              <%= form.select :status, options_for_select([['Pending', 'pending'], ['Completed', 'completed']]), {}, 
                              {class: 'form-select', required: true} %>
            </div>
          </div>
          
          <div class="mb-3">
            <%= form.label :actual_quantity, "Actual Quantity (L)", class: 'form-label' %>
            <%= form.number_field :actual_quantity, step: 0.01, class: 'form-control' %>
          </div>
          
          <%= form.hidden_field :procurement_schedule_id, value: 1 %>
          <%= form.hidden_field :user_id, value: current_user&.id %>
        <% end %>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="submit" form="newAssignmentForm" class="btn btn-primary">Create Assignment</button>
      </div>
    </div>
  </div>
</div>

<!-- Edit Assignment Modal -->
<div class="modal fade" id="editAssignmentModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Procurement Assignment</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="editAssignmentForm">
          <div class="row">
            <div class="col-md-6 mb-3">
              <label class="form-label">Date</label>
              <input type="date" name="date" class="form-control" required>
            </div>
            <div class="col-md-6 mb-3">
              <label class="form-label">Vendor Name</label>
              <input type="text" name="vendor_name" class="form-control" required>
            </div>
          </div>
          
          <div class="row">
            <div class="col-md-4 mb-3">
              <label class="form-label">Planned Quantity (L)</label>
              <input type="number" name="planned_quantity" step="0.01" class="form-control" required>
            </div>
            <div class="col-md-4 mb-3">
              <label class="form-label">Buying Price (₹/L)</label>
              <input type="number" name="buying_price" step="0.01" class="form-control" required>
            </div>
            <div class="col-md-4 mb-3">
              <label class="form-label">Selling Price (₹/L)</label>
              <input type="number" name="selling_price" step="0.01" class="form-control" required>
            </div>
          </div>
          
          <div class="row">
            <div class="col-md-4 mb-3">
              <label class="form-label">Actual Quantity (L)</label>
              <input type="number" name="actual_quantity" step="0.01" class="form-control">
            </div>
            <div class="col-md-4 mb-3">
              <label class="form-label">Unit</label>
              <select name="unit" class="form-select" required>
                <option value="L">Liters</option>
                <option value="Kg">Kilograms</option>
              </select>
            </div>
            <div class="col-md-4 mb-3">
              <label class="form-label">Status</label>
              <select name="status" class="form-select" required>
                <option value="pending">Pending</option>
                <option value="completed">Completed</option>
                <option value="cancelled">Cancelled</option>
              </select>
            </div>
          </div>
          
          <input type="hidden" name="assignment_id" id="editAssignmentId">
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="updateAssignment()">Update Assignment</button>
      </div>
    </div>
  </div>
</div>

<style>
/* Metric Summary Styles */
.metric-summary {
  text-align: center;
  padding: 1rem;
}

.metric-value {
  font-size: 1.5rem;
  font-weight: 700;
  margin-bottom: 0.25rem;
}

.metric-label {
  font-size: 0.85rem;
  color: #6c757d;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  font-weight: 500;
}

/* Assignment Cards */
.assignments-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));
  gap: 20px;
}

.assignment-card {
  background: white;
  border: 1px solid #e3e6f0;
  border-radius: 12px;
  overflow: hidden;
  transition: all 0.3s ease;
  box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

.assignment-card:hover {
  box-shadow: 0 8px 25px rgba(0,0,0,0.15);
  transform: translateY(-3px);
}

.assignment-card.completed {
  border-left: 4px solid #1cc88a;
}

.assignment-card.pending {
  border-left: 4px solid #f6c23e;
}

.assignment-card.cancelled {
  border-left: 4px solid #e74a3b;
}

.assignment-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px;
  background: #f8f9fc;
  border-bottom: 1px solid #e3e6f0;
}

.vendor-name {
  font-size: 1.1rem;
  font-weight: 600;
  color: #2c3e50;
  margin-bottom: 4px;
}

.assignment-date {
  font-size: 0.85rem;
  color: #6c757d;
}

.assignment-body {
  padding: 20px;
}

.metrics-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
  margin-bottom: 20px;
}

.metric-box {
  padding: 15px;
  background: #f8f9fc;
  border-radius: 8px;
  border: 1px solid #e3e6f0;
}

.metric-details .metric-value {
  font-size: 1.1rem;
  font-weight: bold;
  color: #2c3e50;
  margin-bottom: 4px;
}

.metric-details .metric-label {
  font-size: 0.8rem;
  color: #6c757d;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  margin-bottom: 4px;
}

.metric-price, .metric-selling {
  font-size: 0.85rem;
  color: #858796;
}

.summary-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.profit-value {
  font-size: 1.2rem;
  font-weight: bold;
  margin-bottom: 4px;
}

.profit-label {
  font-size: 0.8rem;
  color: #6c757d;
}

.status-badge {
  padding: 8px 15px;
  border-radius: 20px;
  font-size: 0.8rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.status-badge.status-completed {
  background: #d1eddf;
  color: #155724;
}

.status-badge.status-pending {
  background: #fef3cd;
  color: #856404;
}

.status-badge.status-cancelled {
  background: #f8d7da;
  color: #721c24;
}

.editable-field {
  cursor: pointer;
  padding: 4px 8px;
  border-radius: 4px;
  transition: background 0.2s ease;
}

.editable-field:hover {
  background: rgba(78, 115, 223, 0.1);
}

.click-to-edit {
  font-style: italic;
  cursor: pointer;
}

.click-to-edit:hover {
  color: #4e73df !important;
}

/* Responsive Design */
@media (max-width: 768px) {
  .calendar-month-grid {
    min-height: 400px;
  }
  
  .calendar-day-cell {
    min-height: 80px;
    padding: 8px;
  }
  
  .assignments-grid {
    grid-template-columns: 1fr;
  }
  
  .metrics-row {
    grid-template-columns: 1fr;
    gap: 10px;
  }
}
</style>

<script>
// Store CSRF token globally for easy access
window.csrfToken = '<%= form_authenticity_token %>';

// Initialize when document is ready
document.addEventListener('DOMContentLoaded', function() {
  // Add click handlers for editable fields
  document.querySelectorAll('.editable-field').forEach(field => {
    field.addEventListener('click', function() {
      const assignmentId = this.dataset.assignmentId;
      const fieldName = this.dataset.field;
      quickEditField(assignmentId, fieldName);
    });
  });
});

// Handle view type change to show/hide date fields
function handleViewTypeChange() {
  const viewType = document.getElementById('view_type_select').value;
  const singleDateField = document.getElementById('single_date_field');
  const startDateField = document.getElementById('start_date_field');
  const endDateField = document.getElementById('end_date_field');
  
  if (viewType === 'custom') {
    // Show custom date range fields
    singleDateField.style.display = 'none';
    startDateField.style.display = 'block';
    endDateField.style.display = 'block';
  } else if (viewType === 'today') {
    // Show single date field only for today view
    singleDateField.style.display = 'block';
    startDateField.style.display = 'none';
    endDateField.style.display = 'none';
    
    // Auto-submit for today view
    document.querySelector('form').submit();
  } else {
    // For monthly and weekly views, hide all date fields
    singleDateField.style.display = 'none';
    startDateField.style.display = 'none';
    endDateField.style.display = 'none';
    
    // Auto-submit for monthly and weekly views
    document.querySelector('form').submit();
  }
}


function openNewAssignmentModal(date = null) {
  // Pre-fill the date if provided
  const dateField = document.querySelector('#newAssignmentForm input[name="date"]');
  if (date && dateField) {
    dateField.value = date;
  }
  
  // Show the modal
  const modal = new bootstrap.Modal(document.getElementById('newAssignmentModal'));
  modal.show();
}

function editAssignmentModal(assignmentId) {
  // Fetch assignment data and populate the edit modal
  fetch(`/milk-assignments/${assignmentId}.json`)
    .then(response => response.json())
    .then(data => {
      // Populate edit form with current values
      const form = document.getElementById('editAssignmentForm');
      Object.keys(data).forEach(key => {
        const input = form.querySelector(`[name="${key}"]`);
        if (input) {
          input.value = data[key];
        }
      });
      
      document.getElementById('editAssignmentId').value = assignmentId;
      
      // Show the modal
      const modal = new bootstrap.Modal(document.getElementById('editAssignmentModal'));
      modal.show();
    })
    .catch(error => {
      console.error('Error fetching assignment data:', error);
      showNotification('Error loading assignment data', 'error');
    });
}

function quickEditField(assignmentId, fieldName) {
  const fieldElement = document.querySelector(`[data-assignment-id="${assignmentId}"] [data-field="${fieldName}"]`);
  const currentValue = fieldElement.textContent.replace('L', '').replace('Click to add', '').trim();
  
  // Create inline input
  const input = document.createElement('input');
  input.type = fieldName === 'actual_quantity' ? 'number' : 'text';
  input.value = currentValue;
  input.style.width = '80px';
  input.style.padding = '4px 8px';
  input.style.border = '1px solid #4e73df';
  input.style.borderRadius = '4px';
  input.style.fontSize = '0.9rem';
  
  // Replace content with input
  const originalContent = fieldElement.innerHTML;
  fieldElement.innerHTML = '';
  fieldElement.appendChild(input);
  input.focus();
  input.select();
  
  // Handle save/cancel
  function saveField() {
    const newValue = input.value;
    if (newValue !== currentValue) {
      const data = {};
      data[fieldName] = parseFloat(newValue) || newValue;
      
      updateAssignmentField(assignmentId, data)
        .then(() => {
          fieldElement.innerHTML = newValue ? `${newValue}L` : '<span class="text-muted click-to-edit">Click to add</span>';
        })
        .catch(() => {
          fieldElement.innerHTML = originalContent;
        });
    } else {
      fieldElement.innerHTML = originalContent;
    }
  }
  
  function cancelEdit() {
    fieldElement.innerHTML = originalContent;
  }
  
  input.addEventListener('blur', saveField);
  input.addEventListener('keydown', function(e) {
    if (e.key === 'Enter') {
      saveField();
    } else if (e.key === 'Escape') {
      cancelEdit();
    }
  });
}

function updateAssignmentField(assignmentId, data) {
  const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || window.csrfToken;
  
  if (!csrfToken) {
    showNotification('Security token not found. Please refresh the page.', 'error');
    return Promise.reject(new Error('CSRF token not found'));
  }
  
  return fetch(`/milk-assignments/${assignmentId}`, {
    method: 'PATCH',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': csrfToken,
      'Accept': 'application/json'
    },
    body: JSON.stringify({ procurement_assignment: data })
  })
  .then(response => {
    if (!response.ok) {
      throw new Error(`Update failed: ${response.status}`);
    }
    
    const contentType = response.headers.get('content-type');
    if (contentType && contentType.includes('application/json')) {
      return response.json();
    } else {
      return {};
    }
  })
  .then(data => {
    showNotification('Assignment updated successfully!', 'success');
    return data;
  })
  .catch(error => {
    showNotification(`Error updating assignment: ${error.message}`, 'error');
    throw error;
  });
}

function updateAssignment() {
  const form = document.getElementById('editAssignmentForm');
  const formData = new FormData(form);
  const assignmentId = document.getElementById('editAssignmentId').value;
  
  // Convert FormData to JSON
  const data = {};
  formData.forEach((value, key) => {
    if (value !== '') data[key] = value;
  });
  
  updateAssignmentField(assignmentId, data)
    .then(() => {
      // Close modal
      const modal = bootstrap.Modal.getInstance(document.getElementById('editAssignmentModal'));
      modal.hide();
      
      // Refresh the page to show all updates
      setTimeout(() => {
        location.reload();
      }, 500);
    })
    .catch(error => {
      // Error already handled in updateAssignmentField
    });
}

function deleteAssignmentConfirm(assignmentId, vendorName) {
  if (confirm(`Are you sure you want to delete the assignment for "${vendorName}"?\n\nThis action cannot be undone.`)) {
    deleteAssignment(assignmentId);
  }
}

function deleteAssignment(assignmentId) {
  const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || window.csrfToken;
  
  if (!csrfToken) {
    showNotification('Security token not found. Please refresh the page.', 'error');
    return;
  }
  
  // Add loading state
  const assignmentCard = document.querySelector(`[data-id="${assignmentId}"]`);
  if (assignmentCard) {
    assignmentCard.style.opacity = '0.5';
    assignmentCard.style.pointerEvents = 'none';
  }
  
  fetch(`/milk-assignments/${assignmentId}`, {
    method: 'DELETE',
    headers: {
      'X-CSRF-Token': csrfToken,
      'Accept': 'application/json'
    }
  })
  .then(response => {
    if (response.ok) {
      // Animate card removal
      if (assignmentCard) {
        assignmentCard.style.transform = 'scale(0.8)';
        assignmentCard.style.transition = 'all 0.3s ease';
        
        setTimeout(() => {
          assignmentCard.remove();
          showNotification('Assignment deleted successfully!', 'success');
          
          // Refresh to update counters
          setTimeout(() => {
            location.reload();
          }, 1000);
        }, 300);
      } else {
        showNotification('Assignment deleted successfully!', 'success');
        setTimeout(() => {
          location.reload();
        }, 1000);
      }
    } else {
      throw new Error(`Delete failed: ${response.status}`);
    }
  })
  .catch(error => {
    showNotification(`Error deleting assignment: ${error.message}`, 'error');
    
    // Restore card state
    if (assignmentCard) {
      assignmentCard.style.opacity = '1';
      assignmentCard.style.pointerEvents = 'auto';
    }
  });
}

function showNotification(message, type = 'info') {
  // Create a toast notification
  const toastContainer = document.querySelector('.toast-container') || createToastContainer();
  
  const toast = document.createElement('div');
  toast.className = `toast align-items-center text-white bg-${type === 'error' ? 'danger' : type === 'success' ? 'success' : 'primary'} border-0`;
  toast.setAttribute('role', 'alert');
  toast.innerHTML = `
    <div class="d-flex">
      <div class="toast-body">
        <i class="fas fa-${type === 'error' ? 'times-circle' : type === 'success' ? 'check-circle' : 'info-circle'} me-2"></i>
        ${message}
      </div>
      <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
    </div>
  `;
  
  toastContainer.appendChild(toast);
  
  const bsToast = new bootstrap.Toast(toast, { delay: 3000 });
  bsToast.show();
  
  // Remove toast element after it's hidden
  toast.addEventListener('hidden.bs.toast', () => {
    toast.remove();
  });
}

function createToastContainer() {
  const container = document.createElement('div');
  container.className = 'toast-container position-fixed top-0 end-0 p-3';
  container.style.zIndex = '1050';
  document.body.appendChild(container);
  return container;
}
</script>