<div class="container-fluid">
  <div class="row">
    <div class="col-12">
      <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="h3 mb-0">
          <i class="fas fa-plus-circle text-primary me-2"></i>
          Create Sales Invoice
        </h2>
        <%= link_to sales_invoices_path, class: 'btn btn-outline-secondary' do %>
          <i class="fas fa-arrow-left me-2"></i>Back to Invoices
        <% end %>
      </div>
      
      <%= form_with model: @sales_invoice, local: true, class: 'needs-validation', novalidate: true do |form| %>
        <div class="row">
          <!-- Left Column -->
          <div class="col-lg-8">
            <!-- Customer Details -->
            <div class="card mb-4">
              <div class="card-header">
                <h5 class="mb-0">Customer Details</h5>
              </div>
              <div class="card-body">
                <div class="row">
                  <div class="col-md-6">
                    <div class="mb-3">
                      <label class="form-label">Customer</label>
                      <div class="input-group">
                        <div data-controller="searchable-select" data-searchable-select-search-type-value="local" data-searchable-select-placeholder-value="Search customers (e.g., 'pr' for Pramod, Pradeep)..." class="flex-grow-1">
                          <select class="form-select customer-select" id="customer_select" data-searchable-select-target="select">
                            <option value="">Search and select customer...</option>
                            <optgroup label="Regular Customers">
                              <% @customers.each do |customer| %>
                                <option value="<%= customer.id %>" 
                                        data-type="Customer"
                                        data-name="<%= customer.name %>"
                                        data-address="<%= customer.address %>"
                                        data-phone="<%= customer.phone_number %>"
                                        data-email="<%= customer.email %>"
                                        data-gst="<%= customer.gst_number %>"
                                        <%= 'selected' if @sales_invoice.customer_id == customer.id %>>
                                  <%= customer.name %> - <%= customer.phone_number %>
                                </option>
                              <% end %>
                            </optgroup>
                            <optgroup label="Sales Customers">
                              <% @sales_customers.each do |sales_customer| %>
                                <option value="<%= sales_customer.id %>" 
                                        data-type="SalesCustomer"
                                        data-name="<%= sales_customer.name %>"
                                        data-address="<%= sales_customer.full_address %>"
                                        data-phone="<%= sales_customer.phone_number %>"
                                        data-email="<%= sales_customer.email %>"
                                        data-gst="<%= sales_customer.gst_number %>"
                                        <%= 'selected' if @sales_invoice.sales_customer_id == sales_customer.id %>>
                                  <%= sales_customer.name %> - <%= sales_customer.phone_number %>
                                </option>
                              <% end %>
                            </optgroup>
                          </select>
                        </div>
                        <button type="button" class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#createSalesCustomerModal">
                          <i class="fas fa-plus"></i>
                        </button>
                      </div>
                      <div class="form-text">
                        <small>Start typing to search customers or click + to add new</small>
                      </div>
                      
                      <!-- Hidden fields for customer selection -->
                      <%= form.hidden_field :customer_id, id: 'hidden_customer_id' %>
                      <%= form.hidden_field :sales_customer_id, id: 'hidden_sales_customer_id' %>
                    </div>
                  </div>
                  <div class="col-md-6">
                    <div class="mb-3">
                      <%= form.label :customer_name, 'Customer Name', class: 'form-label' %>
                      <%= form.text_field :customer_name, class: 'form-control', required: true, placeholder: 'Enter customer name' %>
                    </div>
                  </div>
                </div>
                
                <div class="row">
                  <div class="col-md-6">
                    <div class="mb-3">
                      <%= form.label :bill_to, 'Bill To', class: 'form-label' %>
                      <%= form.text_area :bill_to, rows: 3, class: 'form-control', placeholder: 'Billing address will be auto-filled' %>
                    </div>
                  </div>
                  <div class="col-md-6">
                    <div class="mb-3">
                      <%= form.label :ship_to, 'Ship To', class: 'form-label' %>
                      <%= form.text_area :ship_to, rows: 3, class: 'form-control', placeholder: 'Shipping address will be auto-filled' %>
                      <div class="form-check mt-2">
                        <input class="form-check-input" type="checkbox" id="sameAsBilling">
                        <label class="form-check-label" for="sameAsBilling">
                          Same as billing address
                        </label>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Invoice Items -->
            <div class="card mb-4">
              <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Items / Services</h5>
                <button type="button" class="btn btn-sm btn-primary" id="addItemBtn">
                  <i class="fas fa-plus me-1"></i>Add Item
                </button>
              </div>
              <div class="card-body">
                <div class="table-responsive">
                  <table class="table table-bordered" id="itemsTable">
                    <thead class="table-light">
                      <tr>
                        <th width="22%">Items / Services</th>
                        <th width="8%">HSN/SAC</th>
                        <th width="8%">QTY</th>
                        <th width="12%">Price/Item (₹)</th>
                        <th width="8%">Tax (%)</th>
                        <th width="10%">Discount (₹)</th>
                        <th width="12%">Subtotal (₹)</th>
                        <th width="15%">Final Amount (₹)</th>
                        <th width="5%">Action</th>
                      </tr>
                    </thead>
                    <tbody id="itemsTableBody">
                      <%= form.fields_for :sales_invoice_items do |item_form| %>
                        <tr class="item-row">
                          <td>
                            <div class="mb-2">
                              <label class="form-label small">Item/Service Type</label>
                              <select class="form-select form-select-sm item-type-select" name="<%= item_form.object_name %>[item_type]" onchange="toggleProductOptions(this)">
                                <option value="SalesProduct" <%= 'selected' if item_form.object.item_type == 'SalesProduct' || item_form.object.item_type.blank? %>>Sales Product</option>
                                <option value="Product" <%= 'selected' if item_form.object.item_type == 'Product' %>>Regular Product</option>
                              </select>
                            </div>
                            <div class="input-group">
                              <div data-controller="searchable-select" data-searchable-select-search-type-value="local" data-searchable-select-placeholder-value="Search sales products..." class="flex-grow-1">
                                <select class="form-select product-select sales-product-select" name="<%= item_form.object_name %>[sales_product_id]" onchange="updateProductDetails(this)" data-searchable-select-target="select" style="<%= 'display: none;' if item_form.object.item_type == 'Product' %>">
                                  <option value="">Search sales products...</option>
                                  <% @sales_products.each do |product| %>
                                    <option value="<%= product.id %>" 
                                            data-type="SalesProduct"
                                            data-price="<%= product.sales_price %>"
                                            data-tax="<%= product.tax_rate || 0 %>"
                                            data-hsn="<%= product.hsn_sac || '' %>"
                                            data-stock="<%= product.current_stock %>"
                                            <%= 'selected' if item_form.object.sales_product_id == product.id %>>
                                      <%= product.display_name %> (Stock: <%= product.current_stock %>)
                                    </option>
                                  <% end %>
                                </select>
                              </div>
                              <div data-controller="searchable-select" data-searchable-select-search-type-value="local" data-searchable-select-placeholder-value="Search regular products..." class="flex-grow-1">
                                <select class="form-select product-select regular-product-select" name="<%= item_form.object_name %>[product_id]" onchange="updateProductDetails(this)" data-searchable-select-target="select" style="<%= 'display: none;' if item_form.object.item_type != 'Product' %>">
                                  <option value="">Search regular products...</option>
                                  <% @products.each do |product| %>
                                    <option value="<%= product.id %>" 
                                            data-type="Product"
                                            data-price="<%= product.price %>"
                                            data-tax="0"
                                            data-hsn=""
                                            data-stock="<%= product.available_quantity %>"
                                            <%= 'selected' if item_form.object.product_id == product.id %>>
                                      <%= product.display_name %>
                                    </option>
                                  <% end %>
                                </select>
                              </div>
                              <button type="button" class="btn btn-outline-primary btn-sm" onclick="openAddProductModal(this)">
                                <i class="fas fa-plus"></i>
                              </button>
                            </div>
                          </td>
                          <td>
                            <%= item_form.text_field :hsn_sac, class: 'form-control hsn-input', readonly: true %>
                          </td>
                          <td>
                            <%= item_form.number_field :quantity, class: 'form-control quantity-input', 
                                                       value: 1, min: 1, step: 0.01, onchange: 'calculateRowTotal(this)' %>
                          </td>
                          <td>
                            <%= item_form.number_field :price, class: 'form-control price-input', 
                                                       step: 0.01, onchange: 'calculateRowTotal(this)' %>
                          </td>
                          <td>
                            <%= item_form.number_field :tax_rate, class: 'form-control tax-input', 
                                                       step: 0.01, onchange: 'calculateRowTotal(this)' %>
                          </td>
                          <td>
                            <%= item_form.number_field :discount, class: 'form-control discount-input', 
                                                       step: 0.01, value: 0, min: 0, placeholder: '0.00', 
                                                       onchange: 'calculateRowTotal(this)', oninput: 'validateDiscount(this)' %>
                            <div class="invalid-feedback discount-error" style="display: none;">
                              Discount cannot exceed subtotal
                            </div>
                          </td>
                          <td>
                            <input type="text" class="form-control subtotal-display" readonly placeholder="₹0.00" style="background-color: #f8f9fc;">
                          </td>
                          <td>
                            <input type="text" class="form-control amount-display final-amount-highlight" readonly placeholder="₹0.00" style="background-color: #e8f5e8; font-weight: bold; color: #155724;">
                          </td>
                          <td>
                            <button type="button" class="btn btn-sm btn-danger remove-item">
                              <i class="fas fa-trash"></i>
                            </button>
                          </td>
                        </tr>
                      <% end %>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
            
            <!-- Terms and Notes -->
            <div class="card">
              <div class="card-header">
                <h5 class="mb-0">Terms and Notes</h5>
              </div>
              <div class="card-body">
                <div class="mb-3">
                  <%= form.label :terms_and_conditions, 'Terms and Conditions', class: 'form-label' %>
                  <%= form.text_area :terms_and_conditions, rows: 4, class: 'form-control' %>
                </div>
                <div class="mb-3">
                  <%= form.label :notes, 'Notes', class: 'form-label' %>
                  <%= form.text_area :notes, rows: 3, class: 'form-control' %>
                </div>
                <div class="mb-3">
                  <%= form.label :authorized_signature, 'Authorized Signature', class: 'form-label' %>
                  <%= form.text_field :authorized_signature, class: 'form-control', placeholder: 'Enter signatory name' %>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Right Column -->
          <div class="col-lg-4">
            <!-- Invoice Meta -->
            <div class="card mb-4">
              <div class="card-header">
                <h5 class="mb-0">Invoice Details</h5>
              </div>
              <div class="card-body">
                <div class="mb-3">
                  <%= form.label :invoice_number, 'Invoice Number', class: 'form-label' %>
                  <%= form.text_field :invoice_number, class: 'form-control', 
                                      placeholder: 'Auto-generated', readonly: true %>
                </div>
                <div class="mb-3">
                  <%= form.label :invoice_date, 'Invoice Date', class: 'form-label' %>
                  <%= form.date_field :invoice_date, class: 'form-control', required: true %>
                </div>
                <div class="mb-3">
                  <%= form.label :payment_terms, 'Payment Terms (Days)', class: 'form-label' %>
                  <%= form.number_field :payment_terms, class: 'form-control', 
                                        value: 30, min: 0, onchange: 'calculateDueDate()' %>
                </div>
                <div class="mb-3">
                  <%= form.label :due_date, 'Due Date', class: 'form-label' %>
                  <%= form.date_field :due_date, class: 'form-control', id: 'due_date_field' %>
                </div>
              </div>
            </div>
            
            <!-- Invoice Summary -->
            <div class="card mb-4">
              <div class="card-header">
                <h5 class="mb-0">Invoice Summary</h5>
              </div>
              <div class="card-body">
                <div class="d-flex justify-content-between mb-2">
                  <span>Subtotal:</span>
                  <span id="subtotal">₹0.00</span>
                </div>
                <div class="d-flex justify-content-between mb-2">
                  <span>Tax Amount:</span>
                  <span id="taxAmount">₹0.00</span>
                </div>
                <div class="d-flex justify-content-between mb-2">
                  <span>Discount:</span>
                  <span id="discountAmount">₹0.00</span>
                </div>
                
                <!-- Additional Charges -->
                <div class="mb-3">
                  <%= form.label :additional_charges, 'Additional Charges', class: 'form-label' %>
                  <%= form.number_field :additional_charges, class: 'form-control', 
                                        step: 0.01, value: 0, onchange: 'calculateTotals()' %>
                </div>
                
                <!-- Additional Discount -->
                <div class="mb-3">
                  <%= form.label :additional_discount, 'Additional Discount', class: 'form-label' %>
                  <%= form.number_field :additional_discount, class: 'form-control', 
                                        step: 0.01, value: 0, onchange: 'calculateTotals()' %>
                </div>
                
                <!-- TCS -->
                <div class="form-check mb-3">
                  <%= form.check_box :apply_tcs, class: 'form-check-input', onchange: 'calculateTotals()' %>
                  <%= form.label :apply_tcs, 'Apply TCS', class: 'form-check-label' %>
                </div>
                <div class="mb-3" id="tcsRateDiv" style="display: none;">
                  <%= form.label :tcs_rate, 'TCS Rate (%)', class: 'form-label' %>
                  <%= form.number_field :tcs_rate, class: 'form-control', 
                                        step: 0.01, value: 0, onchange: 'calculateTotals()' %>
                </div>
                
                <!-- Auto Round Off -->
                <div class="form-check mb-3">
                  <%= form.check_box :auto_round_off, class: 'form-check-input', onchange: 'calculateTotals()' %>
                  <%= form.label :auto_round_off, 'Auto Round Off', class: 'form-check-label' %>
                </div>
                
                <hr>
                <div class="d-flex justify-content-between mb-3">
                  <strong>Total Amount:</strong>
                  <strong id="totalAmount">₹0.00</strong>
                </div>
                
                <!-- Payment -->
                <div class="form-check mb-3">
                  <input class="form-check-input" type="checkbox" id="markAsFullyPaid" onchange="togglePaymentFields()">
                  <label class="form-check-label" for="markAsFullyPaid">
                    Mark as fully paid
                  </label>
                </div>
                
                <div id="paymentFields" style="display: none;">
                  <div class="mb-3">
                    <%= form.label :payment_type, 'Payment Type', class: 'form-label' %>
                    <%= form.select :payment_type, 
                                    options_for_select([
                                      ['Cash', 'cash'],
                                      ['Bank Transfer', 'bank'],
                                      ['UPI', 'upi'],
                                      ['Card', 'card']
                                    ], 'cash'), 
                                    {}, { class: 'form-select' } %>
                  </div>
                  <div class="mb-3">
                    <%= form.label :amount_paid, 'Amount Received', class: 'form-label' %>
                    <%= form.number_field :amount_paid, class: 'form-control', 
                                          step: 0.01, value: 0, onchange: 'calculateBalance()' %>
                  </div>
                  <div class="d-flex justify-content-between">
                    <span>Balance Amount:</span>
                    <span id="balanceAmount">₹0.00</span>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Action Buttons -->
            <div class="card">
              <div class="card-body">
                <div class="d-grid gap-2">
                  <%= form.submit 'Save & New', class: 'btn btn-primary' %>
                  <%= form.submit 'Save', class: 'btn btn-success' %>
                  <%= link_to 'Cancel', sales_invoices_path, class: 'btn btn-outline-secondary' %>
                </div>
              </div>
            </div>
          </div>
        </div>
      <% end %>
    </div>
  </div>
</div>

<!-- Create Customer Modal -->
<div class="modal fade" id="createCustomerModal" tabindex="-1" aria-labelledby="createCustomerModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="createCustomerModalLabel">Add New Customer</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="newCustomerForm">
          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label for="newCustomerName" class="form-label">Customer Name *</label>
                <input type="text" class="form-control" id="newCustomerName" required>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label for="newCustomerPhone" class="form-label">Phone Number *</label>
                <input type="tel" class="form-control" id="newCustomerPhone" required>
              </div>
            </div>
          </div>
          <div class="mb-3">
            <label for="newCustomerAddress" class="form-label">Address *</label>
            <textarea class="form-control" id="newCustomerAddress" rows="3" required></textarea>
          </div>
          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label for="newCustomerEmail" class="form-label">Email</label>
                <input type="email" class="form-control" id="newCustomerEmail">
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label for="newCustomerGST" class="form-label">GST Number</label>
                <input type="text" class="form-control" id="newCustomerGST">
              </div>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="createNewCustomer()">Add Customer</button>
      </div>
    </div>
  </div>
</div>

<!-- Add Product Modal -->
<div class="modal fade" id="addProductModal" tabindex="-1" aria-labelledby="addProductModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addProductModalLabel">Add New Product</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="newProductForm">
          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label for="newProductName" class="form-label">Product Name *</label>
                <input type="text" class="form-control" id="newProductName" required>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label for="newProductCategory" class="form-label">Category *</label>
                <input type="text" class="form-control" id="newProductCategory" required>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-md-4">
              <div class="mb-3">
                <label for="newProductSalesPrice" class="form-label">Sales Price *</label>
                <input type="number" class="form-control" id="newProductSalesPrice" step="0.01" required>
              </div>
            </div>
            <div class="col-md-4">
              <div class="mb-3">
                <label for="newProductPurchasePrice" class="form-label">Purchase Price *</label>
                <input type="number" class="form-control" id="newProductPurchasePrice" step="0.01" required>
              </div>
            </div>
            <div class="col-md-4">
              <div class="mb-3">
                <label for="newProductUnit" class="form-label">Unit *</label>
                <select class="form-select" id="newProductUnit" required>
                  <option value="">Select Unit</option>
                  <option value="pieces">Pieces</option>
                  <option value="kg">Kg</option>
                  <option value="liters">Liters</option>
                  <option value="meters">Meters</option>
                  <option value="boxes">Boxes</option>
                </select>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-md-4">
              <div class="mb-3">
                <label for="newProductStock" class="form-label">Opening Stock *</label>
                <input type="number" class="form-control" id="newProductStock" min="0" required>
              </div>
            </div>
            <div class="col-md-4">
              <div class="mb-3">
                <label for="newProductTax" class="form-label">Tax Rate (%)</label>
                <input type="number" class="form-control" id="newProductTax" step="0.01" min="0" max="100">
              </div>
            </div>
            <div class="col-md-4">
              <div class="mb-3">
                <label for="newProductHSN" class="form-label">HSN/SAC Code</label>
                <input type="text" class="form-control" id="newProductHSN">
              </div>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="createNewProduct()">Add Product</button>
      </div>
    </div>
  </div>
</div>

<script>
let currentProductRow = null;

document.addEventListener('DOMContentLoaded', function() {
  // Initialize form
  calculateDueDate();
  calculateTotals();
  
  // Initialize searchable customer dropdown
  initializeCustomerSearch();
  
  // Initialize product selects
  initializeProductSelects();
  
  // Customer selection
  document.getElementById('customer_select').addEventListener('change', function() {
    const selectedOption = this.options[this.selectedIndex];
    if (selectedOption.value) {
      const customerData = {
        name: selectedOption.dataset.name,
        address: selectedOption.dataset.address,
        phone: selectedOption.dataset.phone,
        email: selectedOption.dataset.email,
        gst: selectedOption.dataset.gst
      };
      
      fillCustomerDetails(customerData);
    } else {
      clearCustomerDetails();
    }
  });
  
  // Same as billing checkbox
  document.getElementById('sameAsBilling').addEventListener('change', function() {
    if (this.checked) {
      const billTo = document.getElementById('sales_invoice_bill_to').value;
      document.getElementById('sales_invoice_ship_to').value = billTo;
    }
  });
  
  // Add item button
  document.getElementById('addItemBtn').addEventListener('click', function() {
    addNewItemRow();
  });
  
  // Remove item buttons
  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('remove-item') || e.target.closest('.remove-item')) {
      e.preventDefault();
      const row = e.target.closest('.item-row');
      row.remove();
      calculateTotals();
    }
  });
  
  // TCS checkbox
  document.getElementById('sales_invoice_apply_tcs').addEventListener('change', function() {
    const tcsDiv = document.getElementById('tcsRateDiv');
    tcsDiv.style.display = this.checked ? 'block' : 'none';
  });
});

function initializeCustomerSearch() {
  const customerSelect = document.getElementById('customer_select');
  
  // Make it searchable by converting to a searchable input
  customerSelect.addEventListener('input', function() {
    // This would be enhanced with a proper search library like Select2 or Choices.js
    // For now, we'll use the basic functionality
  });
}

function initializeProductSelects() {
  document.querySelectorAll('.product-select').forEach(select => {
    // Make product selects searchable
    // This would be enhanced with a proper search library
  });
}

function fillCustomerDetails(customerData) {
  document.getElementById('sales_invoice_customer_name').value = customerData.name || '';
  document.getElementById('sales_invoice_bill_to').value = customerData.address || '';
  document.getElementById('sales_invoice_ship_to').value = customerData.address || '';
}

function clearCustomerDetails() {
  document.getElementById('sales_invoice_customer_name').value = '';
  document.getElementById('sales_invoice_bill_to').value = '';
  document.getElementById('sales_invoice_ship_to').value = '';
}

function createNewCustomer() {
  const form = document.getElementById('newCustomerForm');
  const formData = new FormData(form);
  
  const customerData = {
    name: document.getElementById('newCustomerName').value,
    phone_number: document.getElementById('newCustomerPhone').value,
    address: document.getElementById('newCustomerAddress').value,
    email: document.getElementById('newCustomerEmail').value,
    gst_number: document.getElementById('newCustomerGST').value
  };
  
  // Validate required fields
  if (!customerData.name || !customerData.phone_number || !customerData.address) {
    alert('Please fill in all required fields (Name, Phone, Address)');
    return;
  }
  
  // Create customer via AJAX
  fetch('/customers', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
    },
    body: JSON.stringify({ customer: customerData })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      // Add new customer to dropdown
      const customerSelect = document.getElementById('customer_select');
      const newOption = document.createElement('option');
      newOption.value = data.customer.id;
      newOption.textContent = `${data.customer.name} - ${data.customer.phone_number}`;
      newOption.dataset.name = data.customer.name;
      newOption.dataset.address = data.customer.address;
      newOption.dataset.phone = data.customer.phone_number;
      newOption.dataset.email = data.customer.email || '';
      newOption.dataset.gst = data.customer.gst_number || '';
      newOption.selected = true;
      
      customerSelect.appendChild(newOption);
      
      // Fill customer details
      fillCustomerDetails(data.customer);
      
      // Close modal
      const modal = bootstrap.Modal.getInstance(document.getElementById('createCustomerModal'));
      modal.hide();
      
      // Reset form
      form.reset();
      
      alert('Customer created successfully!');
    } else {
      alert('Error creating customer: ' + (data.message || 'Unknown error'));
    }
  })
  .catch(error => {
    console.error('Error:', error);
    alert('Error creating customer. Please try again.');
  });
}

function openAddProductModal(button) {
  currentProductRow = button.closest('.item-row');
  const modal = new bootstrap.Modal(document.getElementById('addProductModal'));
  modal.show();
}

function createNewProduct() {
  const form = document.getElementById('newProductForm');
  
  const productData = {
    name: document.getElementById('newProductName').value,
    category: document.getElementById('newProductCategory').value,
    sales_price: document.getElementById('newProductSalesPrice').value,
    purchase_price: document.getElementById('newProductPurchasePrice').value,
    measuring_unit: document.getElementById('newProductUnit').value,
    opening_stock: document.getElementById('newProductStock').value,
    current_stock: document.getElementById('newProductStock').value,
    tax_rate: document.getElementById('newProductTax').value || 0,
    hsn_sac: document.getElementById('newProductHSN').value
  };
  
  // Validate required fields
  if (!productData.name || !productData.category || !productData.sales_price || 
      !productData.purchase_price || !productData.measuring_unit || !productData.opening_stock) {
    alert('Please fill in all required fields');
    return;
  }
  
  // Create product via AJAX
  fetch('/sales_products', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
    },
    body: JSON.stringify({ sales_product: productData })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      // Add new product to all product dropdowns
      document.querySelectorAll('.product-select').forEach(select => {
        const newOption = document.createElement('option');
        newOption.value = data.product.id;
        newOption.textContent = `${data.product.name} (${data.product.measuring_unit}) (Stock: ${data.product.current_stock})`;
        newOption.dataset.price = data.product.sales_price;
        newOption.dataset.tax = data.product.tax_rate || 0;
        newOption.dataset.hsn = data.product.hsn_sac || '';
        newOption.dataset.stock = data.product.current_stock;
        
        select.appendChild(newOption);
      });
      
      // Select the new product in the current row if available
      if (currentProductRow) {
        const productSelect = currentProductRow.querySelector('.product-select');
        productSelect.value = data.product.id;
        updateProductDetails(productSelect);
      }
      
      // Close modal
      const modal = bootstrap.Modal.getInstance(document.getElementById('addProductModal'));
      modal.hide();
      
      // Reset form
      form.reset();
      currentProductRow = null;
      
      alert('Product created successfully!');
    } else {
      alert('Error creating product: ' + (data.message || 'Unknown error'));
    }
  })
  .catch(error => {
    console.error('Error:', error);
    alert('Error creating product. Please try again.');
  });
}

function updateProductDetails(select) {
  const selectedOption = select.options[select.selectedIndex];
  const row = select.closest('.item-row');
  
  if (selectedOption.value) {
    const productData = {
      price: selectedOption.dataset.price,
      tax_rate: selectedOption.dataset.tax,
      hsn_sac: selectedOption.dataset.hsn,
      stock: selectedOption.dataset.stock
    };
    
    row.querySelector('.hsn-input').value = productData.hsn_sac || '';
    row.querySelector('.price-input').value = productData.price || '';
    row.querySelector('.tax-input').value = productData.tax_rate || '';
    
    calculateRowTotal(row.querySelector('.quantity-input'));
  } else {
    // Clear fields if no product selected
    row.querySelector('.hsn-input').value = '';
    row.querySelector('.price-input').value = '';
    row.querySelector('.tax-input').value = '';
    row.querySelector('.amount-display').value = '';
    calculateTotals();
  }
}

function calculateRowTotal(input) {
  const row = input.closest('.item-row');
  const quantity = parseFloat(row.querySelector('.quantity-input').value) || 0;
  const price = parseFloat(row.querySelector('.price-input').value) || 0;
  const taxRate = parseFloat(row.querySelector('.tax-input').value) || 0;
  const discount = parseFloat(row.querySelector('.discount-input').value) || 0;
  
  const lineTotal = quantity * price;
  const taxAmount = lineTotal * taxRate / 100;
  const subtotal = lineTotal + taxAmount;
  const finalAmount = Math.max(subtotal - discount, 0);
  
  // Update subtotal display
  const subtotalDisplay = row.querySelector('.subtotal-display');
  if (subtotalDisplay) {
    subtotalDisplay.value = '₹' + subtotal.toFixed(2);
  }
  
  // Update final amount display with visual highlight
  const amountDisplay = row.querySelector('.amount-display');
  amountDisplay.value = '₹' + finalAmount.toFixed(2);
  
  // Add visual feedback for discount
  if (discount > 0) {
    amountDisplay.style.borderColor = '#28a745';
    amountDisplay.style.boxShadow = '0 0 0 0.2rem rgba(40, 167, 69, 0.25)';
  } else {
    amountDisplay.style.borderColor = '';
    amountDisplay.style.boxShadow = '';
  }
  
  calculateTotals();
}

function validateDiscount(input) {
  const row = input.closest('.item-row');
  const quantity = parseFloat(row.querySelector('.quantity-input').value) || 0;
  const price = parseFloat(row.querySelector('.price-input').value) || 0;
  const taxRate = parseFloat(row.querySelector('.tax-input').value) || 0;
  const discount = parseFloat(input.value) || 0;
  
  const lineTotal = quantity * price;
  const taxAmount = lineTotal * taxRate / 100;
  const subtotal = lineTotal + taxAmount;
  
  const discountError = row.querySelector('.discount-error');
  
  if (discount > subtotal && subtotal > 0) {
    input.style.borderColor = '#dc3545';
    input.style.boxShadow = '0 0 0 0.2rem rgba(220, 53, 69, 0.25)';
    if (discountError) {
      discountError.style.display = 'block';
    }
    input.setCustomValidity('Discount cannot exceed subtotal');
  } else {
    input.style.borderColor = '';
    input.style.boxShadow = '';
    if (discountError) {
      discountError.style.display = 'none';
    }
    input.setCustomValidity('');
  }
  
  calculateRowTotal(input);
}

function calculateTotals() {
  let subtotal = 0;
  let taxAmount = 0;
  let discountAmount = 0;
  let totalItemsDiscount = 0;
  
  document.querySelectorAll('.item-row').forEach(row => {
    const quantity = parseFloat(row.querySelector('.quantity-input').value) || 0;
    const price = parseFloat(row.querySelector('.price-input').value) || 0;
    const taxRate = parseFloat(row.querySelector('.tax-input').value) || 0;
    const discount = parseFloat(row.querySelector('.discount-input').value) || 0;
    
    const lineTotal = quantity * price;
    const lineTaxAmount = lineTotal * taxRate / 100;
    
    subtotal += lineTotal;
    taxAmount += lineTaxAmount;
    totalItemsDiscount += discount;
  });
  
  // Additional charges and discounts
  const additionalCharges = parseFloat(document.getElementById('sales_invoice_additional_charges').value) || 0;
  const additionalDiscount = parseFloat(document.getElementById('sales_invoice_additional_discount').value) || 0;
  
  // Calculate total discount (items + additional)
  const totalDiscount = totalItemsDiscount + additionalDiscount;
  
  let total = subtotal + taxAmount - totalDiscount + additionalCharges;
  
  // TCS
  if (document.getElementById('sales_invoice_apply_tcs').checked) {
    const tcsRate = parseFloat(document.getElementById('sales_invoice_tcs_rate').value) || 0;
    total += total * tcsRate / 100;
  }
  
  // Auto round off
  if (document.getElementById('sales_invoice_auto_round_off').checked) {
    total = Math.round(total);
  }
  
  // Update display with enhanced styling
  document.getElementById('subtotal').textContent = '₹' + subtotal.toFixed(2);
  document.getElementById('taxAmount').textContent = '₹' + taxAmount.toFixed(2);
  document.getElementById('discountAmount').textContent = '₹' + totalDiscount.toFixed(2);
  
  const totalAmountElement = document.getElementById('totalAmount');
  totalAmountElement.textContent = '₹' + total.toFixed(2);
  
  // Add visual highlighting for discounts
  const discountElement = document.getElementById('discountAmount');
  if (totalDiscount > 0) {
    discountElement.style.color = '#28a745';
    discountElement.style.fontWeight = 'bold';
  } else {
    discountElement.style.color = '';
    discountElement.style.fontWeight = '';
  }
  
  calculateBalance();
}

function calculateDueDate() {
  const invoiceDate = document.getElementById('sales_invoice_invoice_date').value;
  const paymentTerms = parseInt(document.getElementById('sales_invoice_payment_terms').value) || 0;
  
  if (invoiceDate) {
    const date = new Date(invoiceDate);
    date.setDate(date.getDate() + paymentTerms);
    document.getElementById('due_date_field').value = date.toISOString().split('T')[0];
  }
}

function togglePaymentFields() {
  const checkbox = document.getElementById('markAsFullyPaid');
  const paymentFields = document.getElementById('paymentFields');
  
  if (checkbox.checked) {
    paymentFields.style.display = 'block';
    const totalText = document.getElementById('totalAmount').textContent;
    const totalAmount = parseFloat(totalText.replace('₹', '').replace(',', ''));
    document.getElementById('sales_invoice_amount_paid').value = totalAmount.toFixed(2);
    calculateBalance();
  } else {
    paymentFields.style.display = 'none';
    document.getElementById('sales_invoice_amount_paid').value = 0;
    calculateBalance();
  }
}

function calculateBalance() {
  const totalText = document.getElementById('totalAmount').textContent;
  const totalAmount = parseFloat(totalText.replace('₹', '').replace(',', ''));
  const amountPaid = parseFloat(document.getElementById('sales_invoice_amount_paid').value) || 0;
  const balance = totalAmount - amountPaid;
  
  document.getElementById('balanceAmount').textContent = '₹' + balance.toFixed(2);
}

function addNewItemRow() {
  const tbody = document.getElementById('itemsTableBody');
  const newRow = document.createElement('tr');
  newRow.className = 'item-row';
  
  const itemsCount = tbody.children.length;
  
  newRow.innerHTML = `
    <td>
      <div class="mb-2">
        <label class="form-label small">Item/Service Type</label>
        <select class="form-select form-select-sm item-type-select" name="sales_invoice[sales_invoice_items_attributes][${itemsCount}][item_type]" onchange="toggleProductOptions(this)">
          <option value="SalesProduct">Sales Product</option>
          <option value="Product">Regular Product</option>
        </select>
      </div>
      <div class="input-group">
        <select name="sales_invoice[sales_invoice_items_attributes][${itemsCount}][sales_product_id]" 
                class="form-select product-select sales-product-select" onchange="updateProductDetails(this)">
          <option value="">Select sales product...</option>
          ${getSalesProductOptionsHTML()}
        </select>
        <select name="sales_invoice[sales_invoice_items_attributes][${itemsCount}][product_id]" 
                class="form-select product-select regular-product-select" onchange="updateProductDetails(this)" style="display: none;">
          <option value="">Select regular product...</option>
          ${getRegularProductOptionsHTML()}
        </select>
        <button type="button" class="btn btn-outline-primary btn-sm" onclick="openAddProductModal(this)">
          <i class="fas fa-plus"></i>
        </button>
      </div>
    </td>
    <td>
      <input type="text" name="sales_invoice[sales_invoice_items_attributes][${itemsCount}][hsn_sac]" 
             class="form-control hsn-input" readonly>
    </td>
    <td>
      <input type="number" name="sales_invoice[sales_invoice_items_attributes][${itemsCount}][quantity]" 
             class="form-control quantity-input" value="1" min="1" step="0.01" onchange="calculateRowTotal(this)">
    </td>
    <td>
      <input type="number" name="sales_invoice[sales_invoice_items_attributes][${itemsCount}][price]" 
             class="form-control price-input" step="0.01" onchange="calculateRowTotal(this)">
    </td>
    <td>
      <input type="number" name="sales_invoice[sales_invoice_items_attributes][${itemsCount}][tax_rate]" 
             class="form-control tax-input" step="0.01" onchange="calculateRowTotal(this)">
    </td>
    <td>
      <input type="number" name="sales_invoice[sales_invoice_items_attributes][${itemsCount}][discount]" 
             class="form-control discount-input" step="0.01" value="0" min="0" placeholder="0.00"
             onchange="calculateRowTotal(this)" oninput="validateDiscount(this)">
      <div class="invalid-feedback discount-error" style="display: none;">
        Discount cannot exceed subtotal
      </div>
    </td>
    <td>
      <input type="text" class="form-control subtotal-display" readonly placeholder="₹0.00" style="background-color: #f8f9fc;">
    </td>
    <td>
      <input type="text" class="form-control amount-display final-amount-highlight" readonly placeholder="₹0.00" style="background-color: #e8f5e8; font-weight: bold; color: #155724;">
    </td>
    <td>
      <button type="button" class="btn btn-sm btn-danger remove-item">
        <i class="fas fa-trash"></i>
      </button>
    </td>
  `;
  
  tbody.appendChild(newRow);
}

function getSalesProductOptionsHTML() {
  const firstSalesProductSelect = document.querySelector('.sales-product-select');
  if (firstSalesProductSelect) {
    return firstSalesProductSelect.innerHTML;
  }
  return '';
}

function getRegularProductOptionsHTML() {
  const firstRegularProductSelect = document.querySelector('.regular-product-select');
  if (firstRegularProductSelect) {
    return firstRegularProductSelect.innerHTML;
  }
  return '';
}

// Function to toggle product options based on item type
function toggleProductOptions(selectElement) {
  const row = selectElement.closest('tr');
  const salesProductSelect = row.querySelector('.sales-product-select');
  const regularProductSelect = row.querySelector('.regular-product-select');
  
  if (selectElement.value === 'Product') {
    salesProductSelect.style.display = 'none';
    regularProductSelect.style.display = 'block';
    salesProductSelect.value = '';
  } else {
    salesProductSelect.style.display = 'block';
    regularProductSelect.style.display = 'none';
    regularProductSelect.value = '';
  }
}

// Update customer selection
document.getElementById('customer_select').addEventListener('change', function() {
  const selectedOption = this.options[this.selectedIndex];
  const customerType = selectedOption.getAttribute('data-type');
  
  if (customerType === 'SalesCustomer') {
    document.getElementById('hidden_sales_customer_id').value = selectedOption.value;
    document.getElementById('hidden_customer_id').value = '';
  } else if (customerType === 'Customer') {
    document.getElementById('hidden_customer_id').value = selectedOption.value;
    document.getElementById('hidden_sales_customer_id').value = '';
  } else {
    document.getElementById('hidden_customer_id').value = '';
    document.getElementById('hidden_sales_customer_id').value = '';
  }
  
  // Update customer details
  if (selectedOption.value) {
    document.querySelector('input[name="sales_invoice[customer_name]"]').value = selectedOption.getAttribute('data-name') || '';
    document.querySelector('textarea[name="sales_invoice[bill_to]"]').value = selectedOption.getAttribute('data-address') || '';
    document.querySelector('textarea[name="sales_invoice[ship_to]"]').value = selectedOption.getAttribute('data-address') || '';
  }
});
</script>

<!-- Sales Customer Modal -->
<%= render 'sales_customers/modal_form', sales_customer: SalesCustomer.new %>

<!-- Sales Product Modal -->
<%= render 'sales_products/modal_form' %>