<%= form_with(model: customer, local: true, class: "needs-validation", novalidate: true) do |form| %>
  <% if customer.errors.any? %>
    <div class="alert alert-danger">
      <h4><i class="fas fa-exclamation-triangle me-2"></i>Please fix the following errors:</h4>
      <ul class="mb-0">
        <% customer.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="row">
    <div class="col-md-6">
      <div class="mb-3">
        <%= form.label :customer_name, class: "form-label fw-bold" do %>
          <i class="fas fa-user me-1"></i>Customer Name *
        <% end %>
        <%= form.text_field :name, class: "form-control", required: true, placeholder: "Enter customer name" %>
        <div class="invalid-feedback">Please provide a customer name.</div>
      </div>
    </div>
    <div class="col-md-6">
      <div class="mb-3">
        <%= form.label :phone_number, class: "form-label fw-bold" do %>
          <i class="fas fa-phone me-1"></i>Phone Number *
        <% end %>
        <%= form.text_field :phone_number, class: "form-control", required: true, placeholder: "Enter phone number" %>
        <div class="invalid-feedback">Please provide a phone number.</div>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col-md-6">
      <div class="mb-3">
        <%= form.label :email, class: "form-label fw-bold" do %>
          <i class="fas fa-envelope me-1"></i>Email
        <% end %>
        <%= form.email_field :email, class: "form-control", placeholder: "Enter email address" %>
      </div>
    </div>
    <div class="col-md-6">
      <div class="mb-3">
        <%= form.label :gst_number, class: "form-label fw-bold" do %>
          <i class="fas fa-file-invoice me-1"></i>GST Number
        <% end %>
        <%= form.text_field :gst_number, class: "form-control", placeholder: "Enter GST number" %>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col-md-6">
      <div class="mb-3">
        <%= form.label :pan_number, class: "form-label fw-bold" do %>
          <i class="fas fa-id-card me-1"></i>PAN Number
        <% end %>
        <%= form.text_field :pan_number, class: "form-control", placeholder: "Enter PAN number" %>
      </div>
    </div>
    <div class="col-md-6">
      <div class="mb-3">
        <%= form.label :member_id, class: "form-label fw-bold" do %>
          <i class="fas fa-users me-1"></i>Member ID
        <% end %>
        <%= form.text_field :member_id, class: "form-control", placeholder: "Enter member ID (if any)" %>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col-md-12">
      <div class="mb-3">
        <%= form.label :address, class: "form-label fw-bold" do %>
          <i class="fas fa-map-marker-alt me-1"></i>Address *
        <% end %>
        <%= form.text_field :address, class: "form-control", required: true, placeholder: "Enter address" %>
        <div class="invalid-feedback">Please provide an address.</div>
      </div>
    </div>
  </div>

  <!-- Image Upload Section -->
  <div class="row">
    <div class="col-md-6">
      <div class="mb-3">
        <%= form.label :image_url, class: "form-label fw-bold" do %>
          <i class="fas fa-image me-1"></i>Customer Photo
        <% end %>
        <%= form.hidden_field :image_url, id: "customer_image_url" %>
        
        <div class="image-upload-container">
          <div class="image-preview-container" id="customerImagePreviewContainer" style="<%= customer.image_url.present? ? '' : 'display: none;' %>">
            <img id="customerImagePreview" src="<%= customer.image_url %>" alt="Customer Photo" class="img-thumbnail" style="max-width: 200px; max-height: 200px;">
            <button type="button" class="btn btn-sm btn-outline-danger mt-2" onclick="removeCustomerImage()">
              <i class="fas fa-trash me-1"></i>Remove Photo
            </button>
          </div>
          
          <div class="upload-area" id="customerUploadArea" style="<%= customer.image_url.present? ? 'display: none;' : '' %>">
            <input type="file" id="customerImageInput" accept="image/*" style="display: none;">
            <div class="upload-placeholder" onclick="document.getElementById('customerImageInput').click();">
              <i class="fas fa-user-circle fa-2x text-muted mb-2"></i>
              <p class="text-muted mb-0">Click to upload photo</p>
              <small class="text-muted">JPG, PNG, GIF up to 5MB</small>
            </div>
          </div>
          
          <div class="upload-progress" id="customerUploadProgress" style="display: none;">
            <div class="progress mb-2">
              <div class="progress-bar" role="progressbar" style="width: 0%"></div>
            </div>
            <small class="text-muted">Uploading...</small>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col-md-6">
      <div class="mb-3">
        <%= form.label :latitude, class: "form-label fw-bold" do %>
          <i class="fas fa-map me-1"></i>Latitude
        <% end %>
        <%= form.number_field :latitude, 
            class: "form-control", 
            step: 0.000001,
            placeholder: "e.g., 40.712776" %>
        <div class="form-text">
          <i class="fas fa-info-circle me-1"></i>Optional: GPS latitude coordinate
        </div>
      </div>
    </div>
    <div class="col-md-6">
      <div class="mb-3">
        <%= form.label :longitude, class: "form-label fw-bold" do %>
          <i class="fas fa-map me-1"></i>Longitude
        <% end %>
        <%= form.number_field :longitude, 
            class: "form-control", 
            step: 0.000001,
            placeholder: "e.g., -74.005974" %>
        <div class="form-text">
          <i class="fas fa-info-circle me-1"></i>Optional: GPS longitude coordinate
        </div>
      </div>
    </div>
  </div>

  <div class="alert alert-info">
    <i class="fas fa-lightbulb me-2"></i>
    <strong>Tip:</strong> You can get GPS coordinates by searching the address on Google Maps and copying the coordinates from the URL.
  </div>

  <!-- Multiple Products Delivery Setup -->
  <div class="card mt-4">
    <div class="card-header bg-light d-flex justify-content-between align-items-center">
      <strong><i class="fas fa-truck me-2"></i>Optional: Create Initial Delivery Plans</strong>
      <button type="button" class="btn btn-sm btn-primary" id="addProductBtn">
        <i class="fas fa-plus me-1"></i>Add Product
      </button>
    </div>
    <div class="card-body">
      <!-- Common delivery details -->
      <div class="row mb-4">
        <div class="col-md-4">
          <div class="mb-3">
            <label class="form-label fw-bold"><i class="fas fa-user-tag me-1"></i>Delivery Person</label>
            <select name="delivery_details[delivery_person_id]" class="form-select" id="delivery_details_delivery_person_id">
              <option value="">Select delivery person (optional)</option>
              <% (@delivery_people || User.delivery_people.order(:name)).each do |dp| %>
                <option value="<%= dp.id %>"><%= dp.name %></option>
              <% end %>
            </select>
          </div>
        </div>
        <div class="col-md-4">
          <div class="mb-3">
            <label class="form-label fw-bold"><i class="fas fa-calendar-day me-1"></i>From Date</label>
            <input type="date" name="delivery_details[start_date]" class="form-control" id="common_start_date">
          </div>
        </div>
        <div class="col-md-4">
          <div class="mb-3">
            <label class="form-label fw-bold"><i class="fas fa-calendar-check me-1"></i>To Date</label>
            <input type="date" name="delivery_details[end_date]" class="form-control" id="common_end_date">
          </div>
        </div>
      </div>

      <!-- Products Section -->
      <div class="products-section">
        <h6 class="mb-3"><i class="fas fa-boxes me-2"></i>Products & Quantities</h6>
        <div id="productsContainer">
          <!-- Product rows will be added here -->
        </div>
        
        <div class="empty-products-message text-center text-muted py-4" id="emptyProductsMessage">
          <i class="fas fa-box-open fa-2x mb-2"></i>
          <p class="mb-1">No products added yet</p>
          <small>Click "Add Product" to create delivery schedules for specific products</small>
        </div>
      </div>

      <div class="form-text mt-3">
        <i class="fas fa-info-circle me-1"></i>
        Leave all fields empty if you don't want to auto-create delivery assignments now. You can add products and schedules later.
      </div>
    </div>
  </div>

  <!-- Hidden fields for filter persistence -->
  <input type="hidden" name="return_to_index" id="returnToIndex" value="">
  <input type="hidden" name="filters" id="filtersData" value="">

  <div class="d-flex justify-content-between align-items-center mt-4">
    <div class="form-actions">
      <%= form.submit class: "btn btn-primary me-2", id: "updateCustomerBtn" do %>
        <i class="fas fa-save me-2"></i><%= customer.new_record? ? 'Create Customer' : 'Update Customer' %>
      <% end %>
      <% unless customer.new_record? %>
        <button type="button" class="btn btn-success me-2" id="updateAndReturnBtn">
          <i class="fas fa-save me-2"></i>Update & Return to List
        </button>
      <% end %>
      <a href="#" id="cancelBtn" class="btn btn-secondary">
        <i class="fas fa-times me-2"></i>Cancel
      </a>
    </div>
    <small class="text-muted">
      <i class="fas fa-info-circle me-1"></i>
      Fields marked with * are required
    </small>
  </div>
<% end %>

<script>
(function() {
  'use strict';
  window.addEventListener('load', function() {
    var forms = document.getElementsByClassName('needs-validation');
    var validation = Array.prototype.filter.call(forms, function(form) {
      form.addEventListener('submit', function(event) {
        if (form.checkValidity() === false) {
          event.preventDefault();
          event.stopPropagation();
        }
        form.classList.add('was-validated');
      }, false);
    });
  }, false);
})();

document.addEventListener('DOMContentLoaded', function() {
  const addressField = document.getElementById('customer_address');
  const latField = document.getElementById('customer_latitude');
  const lngField = document.getElementById('customer_longitude');
  if (addressField && latField && lngField) {
    addressField.addEventListener('blur', function() {
      // Placeholder for geocoding functionality
      // You can integrate with Google Maps Geocoding API here
      console.log('Address changed:', this.value);
    });
  }
  
  // Setup customer image upload
  setupCustomerImageUpload();

  // Initialize multi-product functionality
  initializeMultiProductDelivery();

  // Initialize filter persistence for forms
  initializeFormFilterPersistence();
});

function initializeFormFilterPersistence() {
  const updateAndReturnBtn = document.getElementById('updateAndReturnBtn');
  const cancelBtn = document.getElementById('cancelBtn');
  const returnToIndexField = document.getElementById('returnToIndex');
  const filtersDataField = document.getElementById('filtersData');

  // Handle "Update & Return to List" button
  if (updateAndReturnBtn && returnToIndexField && filtersDataField) {
    updateAndReturnBtn.addEventListener('click', function() {
      const savedFilters = sessionStorage.getItem('customer_index_filters');
      
      returnToIndexField.value = 'true';
      if (savedFilters) {
        filtersDataField.value = savedFilters;
      }
      
      // Submit the form
      const form = this.closest('form');
      if (form) {
        form.submit();
      }
    });
  }

  // Handle cancel button
  if (cancelBtn) {
    cancelBtn.addEventListener('click', function(e) {
      e.preventDefault();
      
      // Try to get saved filters from sessionStorage
      const savedFilters = sessionStorage.getItem('customer_index_filters');
      let url = '<%= customers_path %>';
      
      if (savedFilters) {
        try {
          const filters = JSON.parse(savedFilters);
          const params = new URLSearchParams();
          
          if (filters.search && filters.search.trim()) {
            params.append('search', filters.search);
          }
          
          if (filters.delivery_person_id && filters.delivery_person_id !== 'all') {
            params.append('delivery_person_id', filters.delivery_person_id);
          }
          
          if (params.toString()) {
            url += '?' + params.toString();
          }
        } catch (e) {
          // If there's an error parsing, just go to the default customers path
        }
      }
      
      window.location.href = url;
    });
  }
}

// Multi-product delivery functionality
let productRowCounter = 0;
const availableProducts = [
  <% (@products || Product.order(:name)).each_with_index do |p, index| %>
    {
      id: <%= p.id %>,
      name: "<%= j(p.name) %>",
      unit_type: "<%= p.unit_type %>",
      price: <%= p.price || 0 %>
    }<%= index < (@products || Product.order(:name)).count - 1 ? ',' : '' %>
  <% end %>
];

const unitTypes = [
  <% Product.unit_types_for_select.each_with_index do |(label, value), index| %>
    {
      label: "<%= j(label) %>",
      value: "<%= value %>"
    }<%= index < Product.unit_types_for_select.count - 1 ? ',' : '' %>
  <% end %>
];

function initializeMultiProductDelivery() {
  const addProductBtn = document.getElementById('addProductBtn');
  if (addProductBtn) {
    addProductBtn.addEventListener('click', addProductRow);
  }
  
  updateEmptyMessage();
}

function addProductRow() {
  productRowCounter++;
  const container = document.getElementById('productsContainer');
  const rowId = `product-row-${productRowCounter}`;
  
  const productRow = document.createElement('div');
  productRow.className = 'product-row border rounded p-3 mb-3 bg-light';
  productRow.id = rowId;
  
  productRow.innerHTML = `
    <div class="row align-items-center">
      <div class="col-md-3">
        <div class="mb-3 mb-md-0">
          <label class="form-label fw-bold"><i class="fas fa-box me-1"></i>Product</label>
          <select name="products[${productRowCounter}][product_id]" class="form-select product-select" data-row="${productRowCounter}" required>
            <option value="">Select product</option>
            ${availableProducts.map(p => `<option value="${p.id}" data-unit="${p.unit_type}" data-price="${p.price || 0}">${p.name} - Rs${p.price || 0}</option>`).join('')}
          </select>
        </div>
      </div>
      <div class="col-md-2">
        <div class="mb-3 mb-md-0">
          <label class="form-label fw-bold"><i class="fas fa-sort-numeric-up me-1"></i>Quantity</label>
          <input type="number" step="0.01" min="0.01" name="products[${productRowCounter}][quantity]" class="form-control" placeholder="1.0" required>
        </div>
      </div>
      <div class="col-md-2">
        <div class="mb-3 mb-md-0">
          <label class="form-label fw-bold"><i class="fas fa-balance-scale me-1"></i>Unit</label>
          <select name="products[${productRowCounter}][unit]" class="form-select unit-select" data-row="${productRowCounter}">
            <option value="">Auto (from product)</option>
            ${unitTypes.map(u => `<option value="${u.value}">${u.label}</option>`).join('')}
          </select>
        </div>
      </div>
      <div class="col-md-2">
        <div class="mb-3 mb-md-0">
          <label class="form-label fw-bold"><i class="fas fa-percent me-1"></i>Discount (Rs)</label>
          <input type="number" step="0.01" min="0" name="products[${productRowCounter}][discount_amount]" class="form-control discount-input" data-row="${productRowCounter}" placeholder="0.00">
        </div>
      </div>
      <div class="col-md-2">
        <div class="mb-3 mb-md-0">
          <label class="form-label fw-bold"><i class="fas fa-calculator me-1"></i>Final Amount</label>
          <input type="text" class="form-control final-amount-display" data-row="${productRowCounter}" readonly placeholder="Rs 0.00" style="background-color: #f8f9fc;">
        </div>
      </div>
      <div class="col-md-1">
        <div class="d-flex justify-content-end">
          <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeProductRow('${rowId}')">
            <i class="fas fa-trash me-1"></i>Remove
          </button>
        </div>
      </div>
    </div>
  `;
  
  container.appendChild(productRow);
  
  // Setup auto-unit selection and amount calculation for this row
  const productSelect = productRow.querySelector('.product-select');
  const unitSelect = productRow.querySelector('.unit-select');
  const quantityInput = productRow.querySelector('input[name*="[quantity]"]');
  const discountInput = productRow.querySelector('.discount-input');
  const finalAmountDisplay = productRow.querySelector('.final-amount-display');
  
  function calculateFinalAmount() {
    const selectedOption = productSelect.options[productSelect.selectedIndex];
    const price = selectedOption ? parseFloat(selectedOption.getAttribute('data-price')) || 0 : 0;
    const quantity = parseFloat(quantityInput.value) || 0;
    const discount = parseFloat(discountInput.value) || 0;
    
    const totalAmount = price * quantity;
    const finalAmount = Math.max(totalAmount - discount, 0);
    
    finalAmountDisplay.value = `Rs ${finalAmount.toFixed(2)}`;
    
    // Update discount input validation
    discountInput.max = totalAmount;
    
    if (discount > totalAmount) {
      discountInput.setCustomValidity('Discount cannot exceed total amount');
    } else {
      discountInput.setCustomValidity('');
    }
  }
  
  productSelect.addEventListener('change', function() {
    const selected = productSelect.options[productSelect.selectedIndex];
    const unit = selected && selected.getAttribute('data-unit');
    if (unit && unitSelect.value === '') {
      unitSelect.value = unit;
    }
    calculateFinalAmount();
  });
  
  quantityInput.addEventListener('input', calculateFinalAmount);
  discountInput.addEventListener('input', calculateFinalAmount);
  
  // Initial calculation
  calculateFinalAmount();
  
  updateEmptyMessage();
}

function removeProductRow(rowId) {
  const row = document.getElementById(rowId);
  if (row) {
    row.remove();
    updateEmptyMessage();
  }
}

function updateEmptyMessage() {
  const container = document.getElementById('productsContainer');
  const emptyMessage = document.getElementById('emptyProductsMessage');
  const hasProducts = container && container.children.length > 0;
  
  if (emptyMessage) {
    emptyMessage.style.display = hasProducts ? 'none' : 'block';
  }
}

// Customer Image upload functions
function setupCustomerImageUpload() {
  const imageInput = document.getElementById('customerImageInput');
  if (imageInput) {
    imageInput.addEventListener('change', handleCustomerFileUpload);
  }
}

async function handleCustomerFileUpload(event) {
  const file = event.target.files[0];
  if (!file) return;

  // Validate file type
  if (!file.type.startsWith('image/')) {
    alert('Please select an image file.');
    return;
  }

  // Validate file size (5MB max)
  const maxSize = 5 * 1024 * 1024;
  if (file.size > maxSize) {
    alert('File is too large. Maximum size is 5MB.');
    return;
  }

  const formData = new FormData();
  formData.append('file', file);

  const progressContainer = document.getElementById('customerUploadProgress');
  const progressBar = progressContainer?.querySelector('.progress-bar');
  const previewContainer = document.getElementById('customerImagePreviewContainer');
  const previewImg = document.getElementById('customerImagePreview');
  const uploadArea = document.getElementById('customerUploadArea');

  try {
    if (progressContainer && uploadArea) {
      progressContainer.style.display = 'block';
      uploadArea.style.display = 'none';
    }

    const response = await fetch('/uploads', {
      method: 'POST',
      body: formData
    });

    if (!response.ok) throw new Error('Upload failed');

    const data = await response.json();
    const url = data.url;

    const hiddenField = document.getElementById('customer_image_url');
    if (hiddenField) hiddenField.value = url;

    if (previewContainer && previewImg) {
      previewImg.src = url;
      previewContainer.style.display = 'block';
    }

    if (progressContainer) {
      progressContainer.style.display = 'none';
    }
  } catch (err) {
    alert('Failed to upload image. Please try again.');
    if (progressContainer && uploadArea) {
      progressContainer.style.display = 'none';
      uploadArea.style.display = 'block';
    }
  }
}

function removeCustomerImage() {
  const hiddenField = document.getElementById('customer_image_url');
  const previewContainer = document.getElementById('customerImagePreviewContainer');
  const uploadArea = document.getElementById('customerUploadArea');
  if (hiddenField) hiddenField.value = '';
  if (previewContainer) previewContainer.style.display = 'none';
  if (uploadArea) uploadArea.style.display = 'block';
}
</script>

<style>
.form-label {
  color: #5a5c69;
  margin-bottom: 0.5rem;
}
.form-control:focus, .form-select:focus {
  border-color: #4e73df;
  box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
}
.btn {
  border-radius: 0.35rem;
  font-weight: 500;
}
.was-validated .form-control:invalid {
  border-color: #e74a3b;
}
.was-validated .form-control:valid {
  border-color: #1cc88a;
}
.form-text {
  font-size: 0.875em;
  color: #6c757d;
}
.alert-info {
  background-color: #d1ecf1;
  border-color: #bee5eb;
  color: #0c5460;
}

/* Image Upload Styles */
.image-upload-container {
  border: 2px dashed #d1d3e2;
  border-radius: 0.35rem;
  padding: 20px;
  text-align: center;
  transition: border-color 0.3s ease;
}

.image-upload-container:hover {
  border-color: #4e73df;
}

.upload-placeholder {
  cursor: pointer;
  padding: 20px;
  transition: background-color 0.3s ease;
}

.upload-placeholder:hover {
  background-color: #f8f9fc;
  border-radius: 0.35rem;
}

.image-preview-container {
  text-align: center;
}

.image-preview-container img {
  border-radius: 0.35rem;
  box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
}

.upload-progress .progress {
  height: 8px;
  background-color: #f8f9fc;
}

.upload-progress .progress-bar {
  background-color: #4e73df;
  transition: width 0.3s ease;
}

/* Multi-product styles */
.product-row {
  background-color: #f8f9fc !important;
  border: 1px solid #e3e6f0 !important;
  transition: all 0.3s ease;
}

.product-row:hover {
  border-color: #4e73df !important;
  box-shadow: 0 0.15rem 1.75rem 0 rgba(78, 115, 223, 0.15) !important;
}

.products-section h6 {
  color: #5a5c69;
  font-weight: 600;
}

.empty-products-message {
  background-color: #f8f9fc;
  border: 2px dashed #d1d3e2;
  border-radius: 0.35rem;
}

.btn-outline-danger:hover {
  background-color: #e74a3b;
  border-color: #e74a3b;
}
</style>