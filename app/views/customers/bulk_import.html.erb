<!-- app/views/customers/bulk_import.html.erb -->
<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
  <h1 class="h2">
    <i class="fas fa-upload me-2"></i>Bulk Add Customers
  </h1>
  <%= link_to customers_path, class: "btn btn-outline-secondary" do %>
    <i class="fas fa-arrow-left me-2"></i>Back to Customers
  <% end %>
</div>

<div class="row">
  <div class="col-12">
    <!-- Instructions Card -->
    <div class="card shadow mb-4">
      <div class="card-header bg-info text-white py-3">
        <h6 class="m-0 font-weight-bold">
          <i class="fas fa-info-circle me-2"></i>How to Use
        </h6>
      </div>
      <div class="card-body">
        <div class="row">
          <div class="col-md-6">
            <h6 class="text-primary mb-3">Upload Instructions:</h6>
            <ul class="list-unstyled">
              <li class="mb-2">
                <i class="fas fa-check text-success me-2"></i>
                You can upload up to <strong>4000 customers</strong> at once
              </li>
              <li class="mb-2">
                <i class="fas fa-check text-success me-2"></i>
                Use CSV format (.csv) with proper headers
              </li>
              <li class="mb-2">
                <i class="fas fa-check text-success me-2"></i>
                Upload a CSV file or paste your CSV data directly
              </li>
              <li class="mb-2">
                <i class="fas fa-check text-success me-2"></i>
                Ensure data aligns with required fields to avoid upload errors
              </li>
            </ul>
          </div>
          <div class="col-md-6">
            <h6 class="text-primary mb-3">Required Fields:</h6>
            <div class="row">
              <div class="col-6">
                <span class="badge bg-danger mb-1">Required</span>
                <ul class="list-unstyled small text-muted">
                  <li>• name</li>
                  <li>• phone_number</li>
                  <li>• address</li>
                </ul>
              </div>
              <div class="col-6">
                <span class="badge bg-secondary mb-1">Optional</span>
                <ul class="list-unstyled small text-muted">
                  <li>• email</li>
                  <li>• gst_number</li>
                  <li>• pan_number</li>
                  <li>• member_id</li>
                  <li>• latitude</li>
                  <li>• longitude</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Upload Format Selection -->
    <div class="card shadow mb-4">
      <div class="card-header bg-primary text-white py-3">
        <h6 class="m-0 font-weight-bold">
          <i class="fas fa-cog me-2"></i>Select Upload Format
        </h6>
      </div>
      <div class="card-body">
        <div class="row">
          <div class="col-md-6">
            <div class="upload-option">
              <input type="radio" class="btn-check" name="uploadFormat" id="csvFileOption" value="file" checked>
              <label class="btn btn-outline-primary w-100 p-3" for="csvFileOption">
                <i class="fas fa-file-csv fa-2x mb-2 d-block"></i>
                <strong>CSV File Upload</strong>
                <small class="d-block text-muted mt-1">Upload a .csv file from your computer</small>
              </label>
            </div>
          </div>
          <div class="col-md-6">
            <div class="upload-option">
              <input type="radio" class="btn-check" name="uploadFormat" id="csvTextOption" value="text">
              <label class="btn btn-outline-secondary w-100 p-3" for="csvTextOption">
                <i class="fas fa-edit fa-2x mb-2 d-block"></i>
                <strong>Direct CSV Input</strong>
                <small class="d-block text-muted mt-1">Copy and paste CSV data directly</small>
              </label>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- CSV File Upload Card -->
    <div class="card shadow mb-4" id="fileUploadCard">
      <div class="card-header bg-white py-3 d-flex justify-content-between align-items-center">
        <h6 class="m-0 font-weight-bold text-primary">
          <i class="fas fa-cloud-upload-alt me-2"></i>CSV File Upload
        </h6>
        <div class="card-header-actions">
          <button type="button" class="btn btn-sm btn-outline-danger" id="clearFileBtn">
            <i class="fas fa-trash me-1"></i>Clear
          </button>
        </div>
      </div>
      <div class="card-body">
        <!-- File Upload Area -->
        <div class="upload-area" id="uploadArea">
          <div class="upload-content">
            <i class="fas fa-cloud-upload-alt upload-icon"></i>
            <h5 class="upload-title">Choose CSV File or Drag & Drop</h5>
            <p class="upload-subtitle text-muted">Select a CSV file with customer data</p>
            <input type="file" id="csvFile" accept=".csv" class="file-input" hidden>
            <button type="button" class="btn btn-primary" onclick="document.getElementById('csvFile').click()">
              <i class="fas fa-folder-open me-2"></i>Browse Files
            </button>
            <p class="file-requirements mt-3">
              <small class="text-muted">
                <i class="fas fa-info-circle me-1"></i>
                Supported format: CSV (.csv) • Maximum file size: 5MB
              </small>
            </p>
          </div>
        </div>

        <!-- File Info Display -->
        <div id="fileInfo" class="file-info" style="display: none;">
          <div class="d-flex align-items-center justify-content-between p-3 bg-light rounded">
            <div class="d-flex align-items-center">
              <i class="fas fa-file-csv text-success me-3 fa-2x"></i>
              <div>
                <h6 class="mb-1" id="fileName">filename.csv</h6>
                <small class="text-muted">
                  <span id="fileSize">0 KB</span> • 
                  <span id="fileRows">0 rows</span>
                </small>
              </div>
            </div>
            <button type="button" class="btn btn-sm btn-outline-danger" id="removeFileBtn">
              <i class="fas fa-times"></i>
            </button>
          </div>
        </div>

        <!-- File Validation Status -->
        <div id="fileValidationStatus" class="alert" style="display: none;"></div>

        <!-- File Preview -->
        <div id="filePreview" style="display: none;">
          <div class="d-flex justify-content-between align-items-center mb-3">
            <h6 class="mb-0">
              <i class="fas fa-table me-2"></i>File Preview 
              <span class="badge bg-primary" id="filePreviewCount">0</span>
            </h6>
            <small class="text-muted">Showing first 10 rows</small>
          </div>
          <div class="table-responsive preview-table-container">
            <table class="table table-sm table-bordered table-hover" id="filePreviewTable">
              <thead class="table-light">
                <tr id="filePreviewHeaders">
                  <!-- Headers will be populated dynamically -->
                </tr>
              </thead>
              <tbody id="filePreviewBody">
                <!-- Rows will be populated dynamically -->
              </tbody>
            </table>
          </div>
        </div>

        <!-- File Action Buttons -->
        <div class="d-flex justify-content-between align-items-center mt-4" id="fileActions" style="display: none;">
          <div class="btn-group">
            <button type="button" class="btn btn-outline-primary" id="validateFileBtn">
              <i class="fas fa-check-circle me-2"></i>Validate CSV File
            </button>
          </div>
          <div>
            <button type="button" class="btn btn-success btn-lg" id="importFileBtn" style="display: none;">
              <i class="fas fa-upload me-2"></i>Add Customers
              <span class="badge bg-light text-success ms-2" id="fileImportCount">0</span>
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- CSV Text Input Card -->
    <div class="card shadow mb-4" id="textInputCard" style="display: none;">
      <div class="card-header bg-white py-3 d-flex justify-content-between align-items-center">
        <h6 class="m-0 font-weight-bold text-primary">
          <i class="fas fa-edit me-2"></i>Direct CSV Input
        </h6>
        <div class="card-header-actions">
          <button type="button" class="btn btn-sm btn-outline-secondary" id="loadSampleBtn">
            <i class="fas fa-copy me-1"></i>Load Sample
          </button>
          <button type="button" class="btn btn-sm btn-outline-danger" id="clearTextBtn">
            <i class="fas fa-trash me-1"></i>Clear
          </button>
        </div>
      </div>
      <div class="card-body">
        <!-- CSV Input Form -->
        <form id="csvImportForm">
          <!-- CSV Textarea -->
          <div class="mb-4">
            <div class="csv-input-container">
              <textarea 
                class="form-control csv-textarea" 
                id="csvData" 
                name="csv_data"
                rows="15" 
                placeholder="Paste your CSV data here...&#10;&#10;Example:&#10;name,phone_number,address,email,gst_number,pan_number,member_id,latitude,longitude&#10;John Doe,9999999999,123 Main St Delhi,john@example.com,GST123,PAN123,MEM123,28.6139,77.2090&#10;Jane Smith,8888888888,456 Oak Ave Mumbai,jane@example.com,GST456,PAN456,MEM456,19.0760,72.8777"></textarea>
              <div class="csv-counter">
                <small class="text-muted">
                  <span id="lineCount">0</span> lines • 
                  <span id="charCount">0</span> characters
                </small>
              </div>
            </div>
          </div>

          <!-- Text Validation Status -->
          <div id="textValidationStatus" class="alert" style="display: none;"></div>

          <!-- CSV Preview -->
          <div id="csvPreview" style="display: none;">
            <div class="d-flex justify-content-between align-items-center mb-3">
              <h6 class="mb-0">
                <i class="fas fa-table me-2"></i>Preview 
                <span class="badge bg-primary" id="previewCount">0</span>
              </h6>
              <small class="text-muted">Showing first 10 rows</small>
            </div>
            <div class="table-responsive preview-table-container">
              <table class="table table-sm table-bordered table-hover" id="csvPreviewTable">
                <thead class="table-light">
                  <tr id="previewHeaders">
                    <!-- Headers will be populated dynamically -->
                  </tr>
                </thead>
                <tbody id="csvPreviewBody">
                  <!-- Rows will be populated dynamically -->
                </tbody>
              </table>
            </div>
          </div>

          <!-- Text Action Buttons -->
          <div class="d-flex justify-content-between align-items-center mt-4">
            <div class="btn-group">
              <button type="button" class="btn btn-outline-primary" id="validateTextBtn">
                <i class="fas fa-check-circle me-2"></i>Validate CSV
              </button>
            </div>
            <div>
              <button type="button" class="btn btn-success btn-lg" id="importTextBtn" style="display: none;">
                <i class="fas fa-upload me-2"></i>Add Customers
                <span class="badge bg-light text-success ms-2" id="textImportCount">0</span>
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>

    <!-- Progress Indicator -->
    <div id="importProgress" style="display: none;" class="card shadow mb-4">
      <div class="card-body">
        <div class="progress-container">
          <div class="d-flex justify-content-between align-items-center mb-2">
            <span class="text-muted">
              <i class="fas fa-spinner fa-spin me-2"></i>Your customers are uploading...
            </span>
            <span class="text-muted">Bulk Upload is in progress.</span>
          </div>
          <div class="progress">
            <div class="progress-bar progress-bar-striped progress-bar-animated bg-primary" 
                 role="progressbar" style="width: 0%"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Sample Template Card -->
    <div class="card shadow mt-4">
      <div class="card-header bg-secondary text-white py-3">
        <h6 class="m-0">
          <i class="fas fa-download me-2"></i>CSV Template
        </h6>
      </div>
      <div class="card-body">
        <p class="mb-3 text-muted">Use this template format for your CSV data:</p>
        <div class="template-container">
          <pre class="csv-template"><%= @csv_template %></pre>
        </div>
        <div class="mt-3">
          <button type="button" class="btn btn-outline-primary btn-sm" id="downloadTemplateBtn">
            <i class="fas fa-download me-2"></i>Download Template
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Success Modal -->
<div class="modal fade" id="successModal" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-body text-center py-4">
        <div class="success-icon mb-3">
          <i class="fas fa-check-circle text-success" style="font-size: 3rem;"></i>
        </div>
        <h5 class="modal-title mb-2">Upload Successful!</h5>
        <p class="text-muted mb-4" id="successMessage">Customers have been added successfully.</p>
        <button type="button" class="btn btn-primary" id="goToCustomersBtn">
          Go to Customers
        </button>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Elements
  const csvData = document.getElementById('csvData');
  const csvFile = document.getElementById('csvFile');
  const uploadArea = document.getElementById('uploadArea');
  const fileInfo = document.getElementById('fileInfo');
  const fileActions = document.getElementById('fileActions');
  const fileName = document.getElementById('fileName');
  const fileSize = document.getElementById('fileSize');
  const fileRows = document.getElementById('fileRows');
  
  // Cards
  const fileUploadCard = document.getElementById('fileUploadCard');
  const textInputCard = document.getElementById('textInputCard');
  
  // Buttons
  const validateTextBtn = document.getElementById('validateTextBtn');
  const validateFileBtn = document.getElementById('validateFileBtn');
  const clearTextBtn = document.getElementById('clearTextBtn');
  const clearFileBtn = document.getElementById('clearFileBtn');
  const importTextBtn = document.getElementById('importTextBtn');
  const importFileBtn = document.getElementById('importFileBtn');
  const loadSampleBtn = document.getElementById('loadSampleBtn');
  const removeFileBtn = document.getElementById('removeFileBtn');
  const downloadTemplateBtn = document.getElementById('downloadTemplateBtn');
  
  // Status and preview elements
  const textValidationStatus = document.getElementById('textValidationStatus');
  const fileValidationStatus = document.getElementById('fileValidationStatus');
  const csvPreview = document.getElementById('csvPreview');
  const filePreview = document.getElementById('filePreview');
  const csvPreviewBody = document.getElementById('csvPreviewBody');
  const filePreviewBody = document.getElementById('filePreviewBody');
  const previewHeaders = document.getElementById('previewHeaders');
  const filePreviewHeaders = document.getElementById('filePreviewHeaders');
  const importProgress = document.getElementById('importProgress');
  
  // Counters
  const lineCount = document.getElementById('lineCount');
  const charCount = document.getElementById('charCount');
  const previewCount = document.getElementById('previewCount');
  const filePreviewCount = document.getElementById('filePreviewCount');
  const textImportCount = document.getElementById('textImportCount');
  const fileImportCount = document.getElementById('fileImportCount');
  
  // Modal
  const successModal = new bootstrap.Modal(document.getElementById('successModal'));
  const goToCustomersBtn = document.getElementById('goToCustomersBtn');
  
  // State
  let isValidTextCSV = false;
  let isValidFileCSV = false;
  let validationTimeout;
  let currentFileData = null;

  // Upload format selection
  document.querySelectorAll('input[name="uploadFormat"]').forEach(radio => {
    radio.addEventListener('change', function() {
      if (this.value === 'file') {
        fileUploadCard.style.display = 'block';
        textInputCard.style.display = 'none';
      } else {
        fileUploadCard.style.display = 'none';
        textInputCard.style.display = 'block';
      }
    });
  });

  // File upload handling
  csvFile.addEventListener('change', handleFileSelect);
  
  // Drag and drop
  uploadArea.addEventListener('dragover', handleDragOver);
  uploadArea.addEventListener('drop', handleFileDrop);
  uploadArea.addEventListener('dragleave', handleDragLeave);

  // Character and line counter for text input
  function updateCounters() {
    const text = csvData.value;
    const lines = text.split('\n').filter(line => line.trim()).length;
    charCount.textContent = text.length.toLocaleString();
    lineCount.textContent = lines.toLocaleString();
  }

  // Auto-validate text input on change
  csvData.addEventListener('input', function() {
    updateCounters();
    clearTimeout(validationTimeout);
    validationTimeout = setTimeout(() => {
      if (csvData.value.trim()) {
        validateTextCSV();
      } else {
        hideTextPreview();
      }
    }, 1000);
  });

  // Initialize counters
  updateCounters();

  // Button event listeners
  validateTextBtn.addEventListener('click', validateTextCSV);
  validateFileBtn.addEventListener('click', validateFileCSV);
  clearTextBtn.addEventListener('click', clearTextInput);
  clearFileBtn.addEventListener('click', clearFileInput);
  importTextBtn.addEventListener('click', () => importCustomers('text'));
  importFileBtn.addEventListener('click', () => importCustomers('file'));
  loadSampleBtn.addEventListener('click', loadSampleData);
  removeFileBtn.addEventListener('click', clearFileInput);
  downloadTemplateBtn.addEventListener('click', downloadTemplate);
  goToCustomersBtn.addEventListener('click', () => window.location.href = '<%= customers_path %>');

  // File handling functions
  function handleFileSelect(event) {
    const file = event.target.files[0];
    if (file) {
      processFile(file);
    }
  }

  function handleDragOver(event) {
    event.preventDefault();
    uploadArea.classList.add('drag-over');
  }

  function handleDragLeave(event) {
    event.preventDefault();
    uploadArea.classList.remove('drag-over');
  }

  function handleFileDrop(event) {
    event.preventDefault();
    uploadArea.classList.remove('drag-over');
    
    const files = event.dataTransfer.files;
    if (files.length > 0) {
      const file = files[0];
      if (file.type === 'text/csv' || file.name.endsWith('.csv')) {
        processFile(file);
      } else {
        showFileValidationMessage('Please select a valid CSV file.', 'danger');
      }
    }
  }

  function processFile(file) {
    if (file.size > 5 * 1024 * 1024) { // 5MB limit
      showFileValidationMessage('File size too large. Maximum allowed size is 5MB.', 'danger');
      return;
    }

    fileName.textContent = file.name;
    fileSize.textContent = formatFileSize(file.size);
    
    const reader = new FileReader();
    reader.onload = function(e) {
      currentFileData = e.target.result;
      const lines = currentFileData.split('\n').filter(line => line.trim()).length;
      fileRows.textContent = lines > 0 ? (lines - 1) + ' data rows' : '0 rows'; // -1 for header
      
      uploadArea.style.display = 'none';
      fileInfo.style.display = 'block';
      fileActions.style.display = 'flex';
      
      // Auto-validate
      validateFileCSV();
    };
    reader.readAsText(file);
  }

  function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  function clearFileInput() {
    csvFile.value = '';
    currentFileData = null;
    uploadArea.style.display = 'block';
    fileInfo.style.display = 'none';
    fileActions.style.display = 'none';
    hideFilePreview();
    isValidFileCSV = false;
  }

  function clearTextInput() {
    csvData.value = '';
    hideTextPreview();
    isValidTextCSV = false;
    updateCounters();
  }

  function loadSampleData() {
    csvData.value = `name,phone_number,address,email,gst_number,pan_number,member_id,latitude,longitude
John Doe,9999999999,123 Main St Delhi,john@example.com,GST123,PAN123,MEM123,28.6139,77.2090
Jane Smith,8888888888,456 Oak Ave Mumbai,jane@example.com,GST456,PAN456,MEM456,19.0760,72.8777
Sample Party 1,8999999990,J204 Salarpuria Bangalore,sample1@example.com,09AABCS1429B1ZS,,MEM001,12.9716,77.5946
Sample Party 2,8999999991,255/93 Shastri Nagar Lucknow,sample2@example.com,09AABCS1429B1ZS,,MEM002,26.8467,80.9462`;
    updateCounters();
    validateTextCSV();
  }

  function downloadTemplate() {
    window.location.href = '<%= download_template_customers_path(format: :csv) %>';
  }

  // Validation functions
  function validateTextCSV() {
    const csvText = csvData.value.trim();
    
    if (!csvText) {
      showTextValidationMessage('Please paste CSV data', 'danger');
      hideTextPreview();
      return;
    }

    validateCSVData(csvText, 'text');
  }

  function validateFileCSV() {
    if (!currentFileData) {
      showFileValidationMessage('Please select a CSV file', 'danger');
      hideFilePreview();
      return;
    }

    validateCSVData(currentFileData, 'file');
  }

  function validateCSVData(csvText, type) {
    const validateBtn = type === 'text' ? validateTextBtn : validateFileBtn;
    
    // Show loading state
    validateBtn.disabled = true;
    validateBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Validating...';

    fetch('<%= validate_csv_customers_path %>', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({ csv_data: csvText })
    })
    .then(response => response.json())
    .then(data => {
      if (data.valid) {
        if (type === 'text') {
          showTextValidationMessage(`✓ CSV is valid! Found ${data.row_count} customers ready to import.`, 'success');
          showTextPreview(csvText, data.row_count);
          isValidTextCSV = true;
        } else {
          showFileValidationMessage(`✓ CSV file is valid! Found ${data.row_count} customers ready to import.`, 'success');
          showFilePreview(csvText, data.row_count);
          isValidFileCSV = true;
        }
      } else {
        if (type === 'text') {
          showTextValidationMessage(data.message, 'danger');
          hideTextPreview();
          isValidTextCSV = false;
        } else {
          showFileValidationMessage(data.message, 'danger');
          hideFilePreview();
          isValidFileCSV = false;
        }
      }
    })
    .catch(error => {
      const message = 'Error validating CSV: ' + error.message;
      if (type === 'text') {
        showTextValidationMessage(message, 'danger');
        hideTextPreview();
        isValidTextCSV = false;
      } else {
        showFileValidationMessage(message, 'danger');
        hideFilePreview();
        isValidFileCSV = false;
      }
    })
    .finally(() => {
      validateBtn.disabled = false;
      validateBtn.innerHTML = '<i class="fas fa-check-circle me-2"></i>Validate CSV' + (type === 'file' ? ' File' : '');
    });
  }

  // Message display functions
  function showTextValidationMessage(message, type) {
    textValidationStatus.className = `alert alert-${type}`;
    textValidationStatus.innerHTML = `<i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} me-2"></i>${message}`;
    textValidationStatus.style.display = 'block';
  }

  function showFileValidationMessage(message, type) {
    fileValidationStatus.className = `alert alert-${type}`;
    fileValidationStatus.innerHTML = `<i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} me-2"></i>${message}`;
    fileValidationStatus.style.display = 'block';
  }

  // Preview functions
  function showTextPreview(csvText, rowCount) {
    showPreview(csvText, rowCount, 'text');
  }

  function showFilePreview(csvText, rowCount) {
    showPreview(csvText, rowCount, 'file');
  }

  function showPreview(csvText, rowCount, type) {
    try {
      const lines = csvText.split('\n');
      const headers = lines[0].split(',').map(h => h.trim());
      
      const previewElement = type === 'text' ? csvPreview : filePreview;
      const headersElement = type === 'text' ? previewHeaders : filePreviewHeaders;
      const bodyElement = type === 'text' ? csvPreviewBody : filePreviewBody;
      const countElement = type === 'text' ? previewCount : filePreviewCount;
      const importCountElement = type === 'text' ? textImportCount : fileImportCount;
      const importBtn = type === 'text' ? importTextBtn : importFileBtn;
      
      // Clear previous preview
      headersElement.innerHTML = '';
      bodyElement.innerHTML = '';
      
      // Add headers
      headers.forEach(header => {
        const th = document.createElement('th');
        th.textContent = header;
        th.className = 'text-nowrap';
        headersElement.appendChild(th);
      });
      
      // Show first 10 data rows
      for (let i = 1; i < Math.min(lines.length, 11); i++) {
        if (lines[i].trim()) {
          const values = lines[i].split(',').map(v => v.trim());
          const row = document.createElement('tr');
          
          values.forEach((value, index) => {
            const cell = document.createElement('td');
            cell.textContent = value || '-';
            cell.className = 'text-nowrap';
            if (index < 3) cell.className += ' fw-medium'; // Bold first 3 columns
            row.appendChild(cell);
          });
          
          // Fill empty cells if needed
          while (row.children.length < headers.length) {
            const cell = document.createElement('td');
            cell.textContent = '-';
            cell.className = 'text-muted';
            row.appendChild(cell);
          }
          
          bodyElement.appendChild(row);
        }
      }
      
      countElement.textContent = rowCount;
      importCountElement.textContent = rowCount;
      previewElement.style.display = 'block';
      importBtn.style.display = 'inline-block';
    } catch (error) {
      console.error('Error showing preview:', error);
    }
  }

  function hideTextPreview() {
    csvPreview.style.display = 'none';
    importTextBtn.style.display = 'none';
    textValidationStatus.style.display = 'none';
  }

  function hideFilePreview() {
    filePreview.style.display = 'none';
    importFileBtn.style.display = 'none';
    fileValidationStatus.style.display = 'none';
  }

  // Import function
  function importCustomers(type) {
    const isValid = type === 'text' ? isValidTextCSV : isValidFileCSV;
    const dataSource = type === 'text' ? csvData.value : currentFileData;
    const importBtn = type === 'text' ? importTextBtn : importFileBtn;
    const importCountElement = type === 'text' ? textImportCount : fileImportCount;

    if (!isValid) {
      alert('Please validate CSV data first');
      return;
    }

    if (!dataSource || !dataSource.trim()) {
      alert('No data to import');
      return;
    }

    // Show progress
    importBtn.disabled = true;
    importBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Uploading...';
    importProgress.style.display = 'block';

    // Simulate progress
    let progress = 0;
    const progressBar = importProgress.querySelector('.progress-bar');
    const progressInterval = setInterval(() => {
      progress += Math.random() * 30;
      if (progress > 90) progress = 90;
      progressBar.style.width = progress + '%';
    }, 200);

    fetch('<%= process_bulk_import_customers_path %>', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({ csv_data: dataSource })
    })
    .then(response => response.json())
    .then(data => {
      clearInterval(progressInterval);
      progressBar.style.width = '100%';
      
      setTimeout(() => {
        if (data.success) {
          document.getElementById('successMessage').textContent = 
            `Successfully imported ${data.imported_count} customers!`;
          successModal.show();
        } else {
          if (type === 'text') {
            showTextValidationMessage(data.message, 'danger');
          } else {
            showFileValidationMessage(data.message, 'danger');
          }
        }
      }, 500);
    })
    .catch(error => {
      clearInterval(progressInterval);
      const message = 'Error importing customers: ' + error.message;
      if (type === 'text') {
        showTextValidationMessage(message, 'danger');
      } else {
        showFileValidationMessage(message, 'danger');
      }
    })
    .finally(() => {
      importBtn.disabled = false;
      importBtn.innerHTML = '<i class="fas fa-upload me-2"></i>Add Customers <span class="badge bg-light text-success ms-2">' + importCountElement.textContent + '</span>';
      setTimeout(() => {
        importProgress.style.display = 'none';
      }, 500);
    });
  }
});
</script>

<style>
.card {
  border: none;
  box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15) !important;
  border-radius: 0.5rem;
}

.card-header {
  border-bottom: 1px solid #e3e6f0;
  border-radius: 0.5rem 0.5rem 0 0 !important;
}

.card-header-actions .btn {
  margin-left: 0.5rem;
}

/* Upload option styles */
.upload-option {
  margin-bottom: 1rem;
}

.upload-option .btn {
  transition: all 0.3s ease;
  height: 120px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.upload-option .btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.upload-option .btn-check:checked + .btn {
  background-color: #4e73df;
  border-color: #4e73df;
  color: white;
}

/* File upload area styles */
.upload-area {
  border: 2px dashed #e3e6f0;
  border-radius: 0.5rem;
  padding: 3rem 2rem;
  text-align: center;
  transition: all 0.3s ease;
  background: #f8f9fc;
}

.upload-area:hover {
  border-color: #4e73df;
  background: #f0f4ff;
}

.upload-area.drag-over {
  border-color: #4e73df;
  background: #e3f2fd;
  transform: scale(1.02);
}

.upload-content {
  max-width: 400px;
  margin: 0 auto;
}

.upload-icon {
  font-size: 3rem;
  color: #4e73df;
  margin-bottom: 1rem;
}

.upload-title {
  color: #5a5c69;
  margin-bottom: 0.5rem;
}

.upload-subtitle {
  margin-bottom: 1.5rem;
}

.file-requirements {
  margin-bottom: 0;
}

/* File info styles */
.file-info {
  margin-top: 1rem;
}

/* CSV input styles */
.csv-input-container {
  position: relative;
}

.csv-textarea {
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  font-size: 0.85rem;
  line-height: 1.4;
  border: 2px solid #e3e6f0;
  border-radius: 0.5rem;
  resize: vertical;
  min-height: 300px;
}

.csv-textarea:focus {
  border-color: #4e73df;
  box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
}

.csv-counter {
  position: absolute;
  bottom: 8px;
  right: 12px;
  background: rgba(255, 255, 255, 0.9);
  padding: 2px 8px;
  border-radius: 4px;
  font-size: 0.75rem;
}

/* Preview table styles */
.preview-table-container {
  max-height: 400px;
  border: 1px solid #e3e6f0;
  border-radius: 0.5rem;
}

.table th {
  background-color: #f8f9fc !important;
  border-top: none;
  font-weight: 600;
  color: #5a5c69;
  font-size: 0.85rem;
  padding: 0.75rem 0.5rem;
}

.table td {
  font-size: 0.85rem;
  padding: 0.5rem;
  max-width: 150px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.table-hover tbody tr:hover {
  background-color: rgba(78, 115, 223, 0.05);
}

/* Template styles */
.csv-template {
  background: #f8f9fc;
  border: 1px solid #e3e6f0;
  border-radius: 0.5rem;
  padding: 1rem;
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  font-size: 0.8rem;
  line-height: 1.4;
  color: #5a5c69;
  max-height: 200px;
  overflow-y: auto;
  margin: 0;
}

/* Progress styles */
.progress-container {
  background: #f8f9fc;
  border: 1px solid #e3e6f0;
  border-radius: 0.5rem;
  padding: 1.5rem;
}

.progress {
  height: 8px;
  border-radius: 4px;
  background-color: #e3e6f0;
}

/* Button styles */
.btn-group .btn {
  border-radius: 0.35rem !important;
}

.badge {
  font-size: 0.75em;
}

/* Success animation */
.success-icon {
  animation: successPulse 0.6s ease-in-out;
}

@keyframes successPulse {
  0% { transform: scale(0.8); opacity: 0; }
  50% { transform: scale(1.1); }
  100% { transform: scale(1); opacity: 1; }
}

/* Alert styles */
.alert {
  border-radius: 0.5rem;
  border: none;
}

.alert-success {
  background-color: #d1edff;
  color: #0c5460;
  border-left: 4px solid #0ea5e9;
}

.alert-danger {
  background-color: #f8d7da;
  color: #721c24;
  border-left: 4px solid #dc3545;
}

.text-nowrap {
  white-space: nowrap;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .upload-area {
    padding: 2rem 1rem;
  }
  
  .upload-content {
    max-width: 100%;
  }
  
  .upload-icon {
    font-size: 2rem;
  }
  
  .csv-textarea {
    min-height: 250px;
    font-size: 0.8rem;
  }
  
  .table td {
    font-size: 0.8rem;
    padding: 0.4rem;
    max-width: 100px;
  }
  
  .card-header-actions {
    margin-top: 0.5rem;
  }
  
  .card-header-actions .btn {
    margin-left: 0;
    margin-right: 0.5rem;
  }
  
  .upload-option .btn {
    height: 100px;
    font-size: 0.9rem;
  }
}
</style>