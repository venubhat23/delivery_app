<!-- app/views/customers/bulk_import.html.erb -->
<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
  <h1 class="h2">
    <i class="fas fa-upload me-2"></i>Bulk Add Customers
  </h1>
  <%= link_to customers_path, class: "btn btn-outline-secondary" do %>
    <i class="fas fa-arrow-left me-2"></i>Back to Customers
  <% end %>
</div>

<div class="row">
  <div class="col-12">
    <!-- Instructions Card -->
    <div class="card shadow mb-4">
      <div class="card-header bg-info text-white py-3">
        <h6 class="m-0 font-weight-bold">
          <i class="fas fa-info-circle me-2"></i>How to Use
        </h6>
      </div>
      <div class="card-body">
        <div class="row">
          <div class="col-md-6">
            <h6 class="text-primary mb-3">Upload Instructions:</h6>
            <ul class="list-unstyled">
              <li class="mb-2">
                <i class="fas fa-check text-success me-2"></i>
                You can upload up to <strong>4000 customers</strong> at once
              </li>
              <li class="mb-2">
                <i class="fas fa-check text-success me-2"></i>
                Use CSV format (.csv) with proper headers
              </li>
              <li class="mb-2">
                <i class="fas fa-check text-success me-2"></i>
                Upload a CSV file or paste your CSV data directly
              </li>
              <li class="mb-2">
                <i class="fas fa-check text-success me-2"></i>
                Ensure data aligns with required fields to avoid upload errors
              </li>
            </ul>
          </div>
          <div class="col-md-6">
            <h6 class="text-primary mb-3">Required Fields:</h6>
            <div class="row">
              <div class="col-6">
                <span class="badge bg-danger mb-1">Required</span>
                <ul class="list-unstyled small text-muted">
                  <li>• name</li>
                  <li>• phone_number</li>
                  <li>• address</li>
                </ul>
              </div>
              <div class="col-6">
                <span class="badge bg-secondary mb-1">Optional</span>
                <ul class="list-unstyled small text-muted">
                  <li>• email</li>
                  <li>• gst_number</li>
                  <li>• pan_number</li>
                  <li>• member_id</li>
                  <li>• latitude</li>
                  <li>• longitude</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Upload Format Selection -->
    <div class="card shadow mb-4">
      <div class="card-header bg-primary text-white py-3">
        <h6 class="m-0 font-weight-bold">
          <i class="fas fa-cog me-2"></i>Select Upload Format
        </h6>
      </div>
      <div class="card-body">
        <div class="row">
          <div class="col-md-4">
            <div class="upload-option">
              <input type="radio" class="btn-check" name="uploadFormat" id="csvFileOption" value="file" checked>
              <label class="btn btn-outline-primary w-100 p-3" for="csvFileOption">
                <i class="fas fa-file-csv fa-2x mb-2 d-block"></i>
                <strong>CSV File Upload</strong>
                <small class="d-block text-muted mt-1">Upload a .csv file from your computer</small>
              </label>
            </div>
          </div>
          <div class="col-md-4">
            <div class="upload-option">
              <input type="radio" class="btn-check" name="uploadFormat" id="csvTextOption" value="text">
              <label class="btn btn-outline-secondary w-100 p-3" for="csvTextOption">
                <i class="fas fa-edit fa-2x mb-2 d-block"></i>
                <strong>Direct CSV Input</strong>
                <small class="d-block text-muted mt-1">Copy and paste CSV data directly</small>
              </label>
            </div>
          </div>
          <div class="col-md-4">
            <div class="upload-option">
              <input type="radio" class="btn-check" name="uploadFormat" id="csvTableOption" value="table">
              <label class="btn btn-outline-success w-100 p-3" for="csvTableOption">
                <i class="fas fa-table fa-2x mb-2 d-block"></i>
                <strong>Enhanced Table Input</strong>
                <small class="d-block text-muted mt-1">Interactive table with auto-complete and validation</small>
              </label>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- CSV File Upload Card -->
    <div class="card shadow mb-4" id="fileUploadCard">
      <div class="card-header bg-white py-3 d-flex justify-content-between align-items-center">
        <h6 class="m-0 font-weight-bold text-primary">
          <i class="fas fa-cloud-upload-alt me-2"></i>CSV File Upload
        </h6>
        <div class="card-header-actions">
          <button type="button" class="btn btn-sm btn-outline-danger" id="clearFileBtn">
            <i class="fas fa-trash me-1"></i>Clear
          </button>
        </div>
      </div>
      <div class="card-body">
        <!-- File Upload Area -->
        <div class="upload-area" id="uploadArea">
          <div class="upload-content">
            <i class="fas fa-cloud-upload-alt upload-icon"></i>
            <h5 class="upload-title">Choose CSV File or Drag & Drop</h5>
            <p class="upload-subtitle text-muted">Select a CSV file with customer data</p>
            <input type="file" id="csvFile" accept=".csv" class="file-input" hidden>
            <button type="button" class="btn btn-primary" onclick="document.getElementById('csvFile').click()">
              <i class="fas fa-folder-open me-2"></i>Browse Files
            </button>
            <p class="file-requirements mt-3">
              <small class="text-muted">
                <i class="fas fa-info-circle me-1"></i>
                Supported format: CSV (.csv) • Maximum file size: 5MB
              </small>
            </p>
          </div>
        </div>

        <!-- File Info Display -->
        <div id="fileInfo" class="file-info" style="display: none;">
          <div class="d-flex align-items-center justify-content-between p-3 bg-light rounded">
            <div class="d-flex align-items-center">
              <i class="fas fa-file-csv text-success me-3 fa-2x"></i>
              <div>
                <h6 class="mb-1" id="fileName">filename.csv</h6>
                <small class="text-muted">
                  <span id="fileSize">0 KB</span> • 
                  <span id="fileRows">0 rows</span>
                </small>
              </div>
            </div>
            <button type="button" class="btn btn-sm btn-outline-danger" id="removeFileBtn">
              <i class="fas fa-times"></i>
            </button>
          </div>
        </div>

        <!-- File Validation Status -->
        <div id="fileValidationStatus" class="alert" style="display: none;"></div>

        <!-- File Preview -->
        <div id="filePreview" style="display: none;">
          <div class="d-flex justify-content-between align-items-center mb-3">
            <h6 class="mb-0">
              <i class="fas fa-table me-2"></i>File Preview 
              <span class="badge bg-primary" id="filePreviewCount">0</span>
            </h6>
            <small class="text-muted">Showing first 10 rows</small>
          </div>
          <div class="table-responsive preview-table-container">
            <table class="table table-sm table-bordered table-hover" id="filePreviewTable">
              <thead class="table-light">
                <tr id="filePreviewHeaders">
                  <!-- Headers will be populated dynamically -->
                </tr>
              </thead>
              <tbody id="filePreviewBody">
                <!-- Rows will be populated dynamically -->
              </tbody>
            </table>
          </div>
        </div>

        <!-- File Action Buttons -->
        <div class="d-flex justify-content-between align-items-center mt-4" id="fileActions" style="display: none;">
          <div class="btn-group">
            <button type="button" class="btn btn-outline-primary" id="validateFileBtn">
              <i class="fas fa-check-circle me-2"></i>Validate CSV File
            </button>
          </div>
          <div>
            <button type="button" class="btn btn-success btn-lg" id="importFileBtn" style="display: none;">
              <i class="fas fa-upload me-2"></i>Add Customers
              <span class="badge bg-light text-success ms-2" id="fileImportCount">0</span>
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- CSV Text Input Card -->
    <div class="card shadow mb-4" id="textInputCard" style="display: none;">
      <div class="card-header bg-white py-3 d-flex justify-content-between align-items-center">
        <h6 class="m-0 font-weight-bold text-primary">
          <i class="fas fa-edit me-2"></i>Direct CSV Input
        </h6>
        <div class="card-header-actions">
          <button type="button" class="btn btn-sm btn-outline-secondary" id="loadSampleBtn">
            <i class="fas fa-copy me-1"></i>Load Sample
          </button>
          <button type="button" class="btn btn-sm btn-outline-danger" id="clearTextBtn">
            <i class="fas fa-trash me-1"></i>Clear
          </button>
        </div>
      </div>
      <div class="card-body">
        <!-- CSV Input Form -->
        <form id="csvImportForm">
          <!-- CSV Textarea -->
          <div class="mb-4">
            <div class="csv-input-container">
              <textarea 
                class="form-control csv-textarea" 
                id="csvData" 
                name="csv_data"
                rows="15" 
                placeholder="Paste your CSV data here...&#10;&#10;Example:&#10;name,phone_number,address,email,gst_number,pan_number,member_id,latitude,longitude&#10;John Doe,9999999999,123 Main St Delhi,john@example.com,GST123,PAN123,MEM123,28.6139,77.2090&#10;Jane Smith,8888888888,456 Oak Ave Mumbai,jane@example.com,GST456,PAN456,MEM456,19.0760,72.8777"></textarea>
              <div class="csv-counter">
                <small class="text-muted">
                  <span id="lineCount">0</span> lines • 
                  <span id="charCount">0</span> characters
                </small>
              </div>
            </div>
          </div>

          <!-- Text Validation Status -->
          <div id="textValidationStatus" class="alert" style="display: none;"></div>

          <!-- CSV Preview -->
          <div id="csvPreview" style="display: none;">
            <div class="d-flex justify-content-between align-items-center mb-3">
              <h6 class="mb-0">
                <i class="fas fa-table me-2"></i>Preview 
                <span class="badge bg-primary" id="previewCount">0</span>
              </h6>
              <small class="text-muted">Showing first 10 rows</small>
            </div>
            <div class="table-responsive preview-table-container">
              <table class="table table-sm table-bordered table-hover" id="csvPreviewTable">
                <thead class="table-light">
                  <tr id="previewHeaders">
                    <!-- Headers will be populated dynamically -->
                  </tr>
                </thead>
                <tbody id="csvPreviewBody">
                  <!-- Rows will be populated dynamically -->
                </tbody>
              </table>
            </div>
          </div>

          <!-- Text Action Buttons -->
          <div class="d-flex justify-content-between align-items-center mt-4">
            <div class="btn-group">
              <button type="button" class="btn btn-outline-primary" id="validateTextBtn">
                <i class="fas fa-check-circle me-2"></i>Validate CSV
              </button>
            </div>
            <div>
              <button type="button" class="btn btn-success btn-lg" id="importTextBtn" style="display: none;">
                <i class="fas fa-upload me-2"></i>Add Customers
                <span class="badge bg-light text-success ms-2" id="textImportCount">0</span>
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>

    <!-- CSV Table Input Card -->
    <div class="card shadow mb-4" id="tableInputCard" style="display: none;">
      <div class="card-header bg-white py-3 d-flex justify-content-between align-items-center">
        <h6 class="m-0 font-weight-bold text-primary">
          <i class="fas fa-table me-2"></i>Enhanced Table Input
        </h6>
        <div class="card-header-actions">
          <button type="button" class="btn btn-sm btn-outline-success" id="addRowBtn">
            <i class="fas fa-plus me-1"></i>Add Row
          </button>
          <button type="button" class="btn btn-sm btn-outline-secondary" id="loadSampleTableBtn">
            <i class="fas fa-copy me-1"></i>Load Sample
          </button>
          <button type="button" class="btn btn-sm btn-outline-danger" id="clearTableBtn">
            <i class="fas fa-trash me-1"></i>Clear All
          </button>
        </div>
      </div>
      <div class="card-body">
        <!-- Enhanced Table Input Instructions -->
        <div class="alert alert-info mb-4">
          <div class="d-flex align-items-center">
            <i class="fas fa-info-circle me-2"></i>
            <div>
              <small>
                <strong>Enhanced Table Features:</strong> Auto-complete for phone numbers, real-time validation, smart address suggestions, and bulk operations. Maximum 4000 customers per import.
              </small>
            </div>
          </div>
        </div>

        <!-- Quick Actions Bar -->
        <div class="quick-actions-bar mb-4">
          <div class="row">
            <div class="col-md-6">
              <div class="input-group input-group-sm">
                <span class="input-group-text"><i class="fas fa-search"></i></span>
                <input type="text" class="form-control" id="quickSearchTable" placeholder="Search in table...">
              </div>
            </div>
            <div class="col-md-6">
              <div class="btn-group btn-group-sm w-100" role="group">
                <button type="button" class="btn btn-outline-primary" id="bulkFillBtn">
                  <i class="fas fa-fill-drip me-1"></i>Bulk Fill
                </button>
                <button type="button" class="btn btn-outline-info" id="duplicateRowBtn">
                  <i class="fas fa-copy me-1"></i>Duplicate Row
                </button>
                <button type="button" class="btn btn-outline-warning" id="autoCompleteBtn">
                  <i class="fas fa-magic me-1"></i>Auto-Complete
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Interactive CSV Table -->
        <div class="table-responsive csv-table-container">
          <table class="table table-bordered table-hover" id="csvTable">
            <thead class="table-light">
              <tr>
                <th style="width: 40px;">#</th>
                <th style="min-width: 150px;">
                  Customer Name*<br>
                  <small class="text-muted">(mandatory field)</small>
                  <div class="header-actions">
                    <button type="button" class="btn btn-xs btn-outline-secondary" onclick="toggleColumnFill('name')">
                      <i class="fas fa-fill"></i>
                    </button>
                  </div>
                </th>
                <th style="min-width: 120px;">
                  Mobile Number*<br>
                  <small class="text-muted">(10 digits, mandatory)</small>
                  <div class="header-actions">
                    <button type="button" class="btn btn-xs btn-outline-secondary" onclick="toggleColumnFill('phone_number')">
                      <i class="fas fa-fill"></i>
                    </button>
                  </div>
                </th>
                <th style="min-width: 200px;">
                  Address*<br>
                  <small class="text-muted">(mandatory field)</small>
                  <div class="header-actions">
                    <button type="button" class="btn btn-xs btn-outline-secondary" onclick="toggleColumnFill('address')">
                      <i class="fas fa-fill"></i>
                    </button>
                  </div>
                </th>
                <th style="min-width: 150px;">
                  Email<br>
                  <small class="text-muted">(optional)</small>
                  <div class="header-actions">
                    <button type="button" class="btn btn-xs btn-outline-secondary" onclick="toggleColumnFill('email')">
                      <i class="fas fa-fill"></i>
                    </button>
                  </div>
                </th>
                <th style="min-width: 120px;">
                  GST Number<br>
                  <small class="text-muted">(optional)</small>
                  <div class="header-actions">
                    <button type="button" class="btn btn-xs btn-outline-secondary" onclick="toggleColumnFill('gst_number')">
                      <i class="fas fa-fill"></i>
                    </button>
                  </div>
                </th>
                <th style="min-width: 120px;">
                  PAN Number<br>
                  <small class="text-muted">(optional)</small>
                  <div class="header-actions">
                    <button type="button" class="btn btn-xs btn-outline-secondary" onclick="toggleColumnFill('pan_number')">
                      <i class="fas fa-fill"></i>
                    </button>
                  </div>
                </th>
                <th style="min-width: 120px;">
                  Member ID<br>
                  <small class="text-muted">(optional)</small>
                  <div class="header-actions">
                    <button type="button" class="btn btn-xs btn-outline-secondary" onclick="toggleColumnFill('member_id')">
                      <i class="fas fa-fill"></i>
                    </button>
                  </div>
                </th>
                <th style="min-width: 100px;">
                  Latitude<br>
                  <small class="text-muted">(decimal)</small>
                  <div class="header-actions">
                    <button type="button" class="btn btn-xs btn-outline-secondary" onclick="toggleColumnFill('latitude')">
                      <i class="fas fa-fill"></i>
                    </button>
                  </div>
                </th>
                <th style="min-width: 100px;">
                  Longitude<br>
                  <small class="text-muted">(decimal)</small>
                  <div class="header-actions">
                    <button type="button" class="btn btn-xs btn-outline-secondary" onclick="toggleColumnFill('longitude')">
                      <i class="fas fa-fill"></i>
                    </button>
                  </div>
                </th>
                <th style="width: 80px;">Actions</th>
              </tr>
            </thead>
            <tbody id="csvTableBody">
              <!-- Initial empty rows will be added by JavaScript -->
            </tbody>
          </table>
        </div>

        <!-- Table Stats -->
        <div class="d-flex justify-content-between align-items-center mt-3 mb-4">
          <div class="table-stats">
            <small class="text-muted">
              <i class="fas fa-users me-1"></i>
              <span id="tableRowCount">0</span> customers • 
              <span id="tableValidCount">0</span> valid • 
              <span id="tableInvalidCount">0</span> with errors
            </small>
          </div>
          <div class="btn-group">
            <button type="button" class="btn btn-sm btn-outline-primary" id="validateTableBtn">
              <i class="fas fa-check-circle me-1"></i>Validate Table
            </button>
          </div>
        </div>

        <!-- Table Validation Status -->
        <div id="tableValidationStatus" class="alert" style="display: none;"></div>

        <!-- Table Action Buttons -->
        <div class="d-flex justify-content-between align-items-center">
          <div class="btn-group">
            <button type="button" class="btn btn-outline-secondary" id="exportTableBtn">
              <i class="fas fa-download me-2"></i>Export as CSV
            </button>
          </div>
          <div>
            <button type="button" class="btn btn-success btn-lg" id="importTableBtn" style="display: none;">
              <i class="fas fa-upload me-2"></i>Add Customers
              <span class="badge bg-light text-success ms-2" id="tableImportCount">0</span>
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Progress Indicator -->
    <div id="importProgress" style="display: none;" class="card shadow mb-4">
      <div class="card-body">
        <div class="progress-container">
          <div class="d-flex justify-content-between align-items-center mb-2">
            <span class="text-muted">
              <i class="fas fa-spinner fa-spin me-2"></i>Your customers are uploading...
            </span>
            <span class="text-muted">Bulk Upload is in progress.</span>
          </div>
          <div class="progress">
            <div class="progress-bar progress-bar-striped progress-bar-animated bg-primary" 
                 role="progressbar" style="width: 0%"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Sample Template Card -->
    <div class="card shadow mt-4">
      <div class="card-header bg-secondary text-white py-3">
        <h6 class="m-0">
          <i class="fas fa-download me-2"></i>CSV Template
        </h6>
      </div>
      <div class="card-body">
        <p class="mb-3 text-muted">Use this template format for your CSV data:</p>
        <div class="template-container">
          <pre class="csv-template"><%= @csv_template %></pre>
        </div>
        <div class="mt-3">
          <button type="button" class="btn btn-outline-primary btn-sm" id="downloadTemplateBtn">
            <i class="fas fa-download me-2"></i>Download Template
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Success Modal -->
<div class="modal fade" id="successModal" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-body text-center py-4">
        <div class="success-icon mb-3">
          <i class="fas fa-check-circle text-success" style="font-size: 3rem;"></i>
        </div>
        <h5 class="modal-title mb-2">Upload Successful!</h5>
        <p class="text-muted mb-4" id="successMessage">Customers have been added successfully.</p>
        <button type="button" class="btn btn-primary" id="goToCustomersBtn">
          Go to Customers
        </button>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Elements
  const csvData = document.getElementById('csvData');
  const csvFile = document.getElementById('csvFile');
  const uploadArea = document.getElementById('uploadArea');
  const fileInfo = document.getElementById('fileInfo');
  const fileActions = document.getElementById('fileActions');
  const fileName = document.getElementById('fileName');
  const fileSize = document.getElementById('fileSize');
  const fileRows = document.getElementById('fileRows');
  
  // Cards
  const fileUploadCard = document.getElementById('fileUploadCard');
  const textInputCard = document.getElementById('textInputCard');
  const tableInputCard = document.getElementById('tableInputCard');
  
  // Buttons
  const validateTextBtn = document.getElementById('validateTextBtn');
  const validateFileBtn = document.getElementById('validateFileBtn');
  const clearTextBtn = document.getElementById('clearTextBtn');
  const clearFileBtn = document.getElementById('clearFileBtn');
  const importTextBtn = document.getElementById('importTextBtn');
  const importFileBtn = document.getElementById('importFileBtn');
  const loadSampleBtn = document.getElementById('loadSampleBtn');
  const removeFileBtn = document.getElementById('removeFileBtn');
  const downloadTemplateBtn = document.getElementById('downloadTemplateBtn');
  
  // Table input buttons
  const addRowBtn = document.getElementById('addRowBtn');
  const clearTableBtn = document.getElementById('clearTableBtn');
  const loadSampleTableBtn = document.getElementById('loadSampleTableBtn');
  const validateTableBtn = document.getElementById('validateTableBtn');
  const importTableBtn = document.getElementById('importTableBtn');
  const exportTableBtn = document.getElementById('exportTableBtn');
  
  // Table elements
  const csvTable = document.getElementById('csvTable');
  const csvTableBody = document.getElementById('csvTableBody');
  const tableRowCount = document.getElementById('tableRowCount');
  const tableValidCount = document.getElementById('tableValidCount');
  const tableInvalidCount = document.getElementById('tableInvalidCount');
  const tableImportCount = document.getElementById('tableImportCount');
  const tableValidationStatus = document.getElementById('tableValidationStatus');
  
  // Status and preview elements
  const textValidationStatus = document.getElementById('textValidationStatus');
  const fileValidationStatus = document.getElementById('fileValidationStatus');
  const csvPreview = document.getElementById('csvPreview');
  const filePreview = document.getElementById('filePreview');
  const csvPreviewBody = document.getElementById('csvPreviewBody');
  const filePreviewBody = document.getElementById('filePreviewBody');
  const previewHeaders = document.getElementById('previewHeaders');
  const filePreviewHeaders = document.getElementById('filePreviewHeaders');
  const importProgress = document.getElementById('importProgress');
  
  // Counters
  const lineCount = document.getElementById('lineCount');
  const charCount = document.getElementById('charCount');
  const previewCount = document.getElementById('previewCount');
  const filePreviewCount = document.getElementById('filePreviewCount');
  const textImportCount = document.getElementById('textImportCount');
  const fileImportCount = document.getElementById('fileImportCount');
  
  // Modal
  const successModal = new bootstrap.Modal(document.getElementById('successModal'));
  const goToCustomersBtn = document.getElementById('goToCustomersBtn');
  
  // State
  let isValidTextCSV = false;
  let isValidFileCSV = false;
  let isValidTableCSV = false;
  let validationTimeout;
  let currentFileData = null;
  let tableData = [];
  let tableRowCounter = 0;

  // Upload format selection
  document.querySelectorAll('input[name="uploadFormat"]').forEach(radio => {
    radio.addEventListener('change', function() {
      if (this.value === 'file') {
        fileUploadCard.style.display = 'block';
        textInputCard.style.display = 'none';
        tableInputCard.style.display = 'none';
      } else if (this.value === 'text') {
        fileUploadCard.style.display = 'none';
        textInputCard.style.display = 'block';
        tableInputCard.style.display = 'none';
      } else if (this.value === 'table') {
        fileUploadCard.style.display = 'none';
        textInputCard.style.display = 'none';
        tableInputCard.style.display = 'block';
        initializeTable(); // Initialize the table with empty rows
      }
    });
  });

  // File upload handling
  csvFile.addEventListener('change', handleFileSelect);
  
  // Drag and drop
  uploadArea.addEventListener('dragover', handleDragOver);
  uploadArea.addEventListener('drop', handleFileDrop);
  uploadArea.addEventListener('dragleave', handleDragLeave);

  // Character and line counter for text input
  function updateCounters() {
    const text = csvData.value;
    const lines = text.split('\n').filter(line => line.trim()).length;
    charCount.textContent = text.length.toLocaleString();
    lineCount.textContent = lines.toLocaleString();
  }

  // Auto-validate text input on change
  csvData.addEventListener('input', function() {
    updateCounters();
    clearTimeout(validationTimeout);
    validationTimeout = setTimeout(() => {
      if (csvData.value.trim()) {
        validateTextCSV();
      } else {
        hideTextPreview();
      }
    }, 1000);
  });

  // Initialize counters
  updateCounters();

  // Button event listeners
  validateTextBtn.addEventListener('click', validateTextCSV);
  validateFileBtn.addEventListener('click', validateFileCSV);
  clearTextBtn.addEventListener('click', clearTextInput);
  clearFileBtn.addEventListener('click', clearFileInput);
  importTextBtn.addEventListener('click', () => importCustomers('text'));
  importFileBtn.addEventListener('click', () => importCustomers('file'));
  loadSampleBtn.addEventListener('click', loadSampleData);
  removeFileBtn.addEventListener('click', clearFileInput);
  downloadTemplateBtn.addEventListener('click', downloadTemplate);
  goToCustomersBtn.addEventListener('click', () => window.location.href = '<%= customers_path %>');
  
  // Table input event listeners
  addRowBtn.addEventListener('click', addTableRow);
  clearTableBtn.addEventListener('click', clearTable);
  loadSampleTableBtn.addEventListener('click', loadSampleTableData);
  validateTableBtn.addEventListener('click', validateTableData);
  importTableBtn.addEventListener('click', importTableCustomers);
  exportTableBtn.addEventListener('click', exportTableAsCSV);
  
  // Enhanced table features event listeners
  const quickSearchTable = document.getElementById('quickSearchTable');
  const bulkFillBtn = document.getElementById('bulkFillBtn');
  const duplicateRowBtn = document.getElementById('duplicateRowBtn');
  const autoCompleteBtn = document.getElementById('autoCompleteBtn');
  
  if (quickSearchTable) quickSearchTable.addEventListener('input', handleTableSearch);
  if (bulkFillBtn) bulkFillBtn.addEventListener('click', showBulkFillModal);
  if (duplicateRowBtn) duplicateRowBtn.addEventListener('click', duplicateSelectedRow);
  if (autoCompleteBtn) autoCompleteBtn.addEventListener('click', autoCompleteData);

  // File handling functions
  function handleFileSelect(event) {
    const file = event.target.files[0];
    if (file) {
      processFile(file);
    }
  }

  function handleDragOver(event) {
    event.preventDefault();
    uploadArea.classList.add('drag-over');
  }

  function handleDragLeave(event) {
    event.preventDefault();
    uploadArea.classList.remove('drag-over');
  }

  function handleFileDrop(event) {
    event.preventDefault();
    uploadArea.classList.remove('drag-over');
    
    const files = event.dataTransfer.files;
    if (files.length > 0) {
      const file = files[0];
      if (file.type === 'text/csv' || file.name.endsWith('.csv')) {
        processFile(file);
      } else {
        showFileValidationMessage('Please select a valid CSV file.', 'danger');
      }
    }
  }

  function processFile(file) {
    if (file.size > 5 * 1024 * 1024) { // 5MB limit
      showFileValidationMessage('File size too large. Maximum allowed size is 5MB.', 'danger');
      return;
    }

    fileName.textContent = file.name;
    fileSize.textContent = formatFileSize(file.size);
    
    const reader = new FileReader();
    reader.onload = function(e) {
      currentFileData = e.target.result;
      const lines = currentFileData.split('\n').filter(line => line.trim()).length;
      fileRows.textContent = lines > 0 ? (lines - 1) + ' data rows' : '0 rows'; // -1 for header
      
      uploadArea.style.display = 'none';
      fileInfo.style.display = 'block';
      fileActions.style.display = 'flex';
      
      // Auto-validate
      validateFileCSV();
    };
    reader.readAsText(file);
  }

  function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  function clearFileInput() {
    csvFile.value = '';
    currentFileData = null;
    uploadArea.style.display = 'block';
    fileInfo.style.display = 'none';
    fileActions.style.display = 'none';
    hideFilePreview();
    isValidFileCSV = false;
  }

  function clearTextInput() {
    csvData.value = '';
    hideTextPreview();
    isValidTextCSV = false;
    updateCounters();
  }

  function loadSampleData() {
    csvData.value = `name,phone_number,address,email,gst_number,pan_number,member_id,latitude,longitude
John Doe,9999999999,123 Main St Delhi,john@example.com,GST123,PAN123,MEM123,28.6139,77.2090
Jane Smith,8888888888,456 Oak Ave Mumbai,jane@example.com,GST456,PAN456,MEM456,19.0760,72.8777
Sample Party 1,8999999990,J204 Salarpuria Bangalore,sample1@example.com,09AABCS1429B1ZS,,MEM001,12.9716,77.5946
Sample Party 2,8999999991,255/93 Shastri Nagar Lucknow,sample2@example.com,09AABCS1429B1ZS,,MEM002,26.8467,80.9462`;
    updateCounters();
    validateTextCSV();
  }

  function downloadTemplate() {
    window.location.href = '<%= download_template_customers_path(format: :csv) %>';
  }

  // Validation functions
  function validateTextCSV() {
    const csvText = csvData.value.trim();
    
    if (!csvText) {
      showTextValidationMessage('Please paste CSV data', 'danger');
      hideTextPreview();
      return;
    }

    validateCSVData(csvText, 'text');
  }

  function validateFileCSV() {
    if (!currentFileData) {
      showFileValidationMessage('Please select a CSV file', 'danger');
      hideFilePreview();
      return;
    }

    validateCSVData(currentFileData, 'file');
  }

  function validateCSVData(csvText, type) {
    const validateBtn = type === 'text' ? validateTextBtn : validateFileBtn;
    
    // Show loading state
    validateBtn.disabled = true;
    validateBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Validating...';

    fetch('<%= validate_csv_customers_path %>', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({ csv_data: csvText })
    })
    .then(response => response.json())
    .then(data => {
      if (data.valid) {
        if (type === 'text') {
          showTextValidationMessage(`✓ CSV is valid! Found ${data.row_count} customers ready to import.`, 'success');
          showTextPreview(csvText, data.row_count);
          isValidTextCSV = true;
        } else {
          showFileValidationMessage(`✓ CSV file is valid! Found ${data.row_count} customers ready to import.`, 'success');
          showFilePreview(csvText, data.row_count);
          isValidFileCSV = true;
        }
      } else {
        if (type === 'text') {
          showTextValidationMessage(data.message, 'danger');
          hideTextPreview();
          isValidTextCSV = false;
        } else {
          showFileValidationMessage(data.message, 'danger');
          hideFilePreview();
          isValidFileCSV = false;
        }
      }
    })
    .catch(error => {
      const message = 'Error validating CSV: ' + error.message;
      if (type === 'text') {
        showTextValidationMessage(message, 'danger');
        hideTextPreview();
        isValidTextCSV = false;
      } else {
        showFileValidationMessage(message, 'danger');
        hideFilePreview();
        isValidFileCSV = false;
      }
    })
    .finally(() => {
      validateBtn.disabled = false;
      validateBtn.innerHTML = '<i class="fas fa-check-circle me-2"></i>Validate CSV' + (type === 'file' ? ' File' : '');
    });
  }

  // Message display functions
  function showTextValidationMessage(message, type) {
    textValidationStatus.className = `alert alert-${type}`;
    textValidationStatus.innerHTML = `<i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} me-2"></i>${message}`;
    textValidationStatus.style.display = 'block';
  }

  function showFileValidationMessage(message, type) {
    fileValidationStatus.className = `alert alert-${type}`;
    fileValidationStatus.innerHTML = `<i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} me-2"></i>${message}`;
    fileValidationStatus.style.display = 'block';
  }

  // Preview functions
  function showTextPreview(csvText, rowCount) {
    showPreview(csvText, rowCount, 'text');
  }

  function showFilePreview(csvText, rowCount) {
    showPreview(csvText, rowCount, 'file');
  }

  function showPreview(csvText, rowCount, type) {
    try {
      const lines = csvText.split('\n');
      const headers = lines[0].split(',').map(h => h.trim());
      
      const previewElement = type === 'text' ? csvPreview : filePreview;
      const headersElement = type === 'text' ? previewHeaders : filePreviewHeaders;
      const bodyElement = type === 'text' ? csvPreviewBody : filePreviewBody;
      const countElement = type === 'text' ? previewCount : filePreviewCount;
      const importCountElement = type === 'text' ? textImportCount : fileImportCount;
      const importBtn = type === 'text' ? importTextBtn : importFileBtn;
      
      // Clear previous preview
      headersElement.innerHTML = '';
      bodyElement.innerHTML = '';
      
      // Add headers
      headers.forEach(header => {
        const th = document.createElement('th');
        th.textContent = header;
        th.className = 'text-nowrap';
        headersElement.appendChild(th);
      });
      
      // Show first 10 data rows
      for (let i = 1; i < Math.min(lines.length, 11); i++) {
        if (lines[i].trim()) {
          const values = lines[i].split(',').map(v => v.trim());
          const row = document.createElement('tr');
          
          values.forEach((value, index) => {
            const cell = document.createElement('td');
            cell.textContent = value || '-';
            cell.className = 'text-nowrap';
            if (index < 3) cell.className += ' fw-medium'; // Bold first 3 columns
            row.appendChild(cell);
          });
          
          // Fill empty cells if needed
          while (row.children.length < headers.length) {
            const cell = document.createElement('td');
            cell.textContent = '-';
            cell.className = 'text-muted';
            row.appendChild(cell);
          }
          
          bodyElement.appendChild(row);
        }
      }
      
      countElement.textContent = rowCount;
      importCountElement.textContent = rowCount;
      previewElement.style.display = 'block';
      importBtn.style.display = 'inline-block';
    } catch (error) {
      console.error('Error showing preview:', error);
    }
  }

  function hideTextPreview() {
    csvPreview.style.display = 'none';
    importTextBtn.style.display = 'none';
    textValidationStatus.style.display = 'none';
  }

  function hideFilePreview() {
    filePreview.style.display = 'none';
    importFileBtn.style.display = 'none';
    fileValidationStatus.style.display = 'none';
  }

  // Import function
  function importCustomers(type) {
    const isValid = type === 'text' ? isValidTextCSV : isValidFileCSV;
    const dataSource = type === 'text' ? csvData.value : currentFileData;
    const importBtn = type === 'text' ? importTextBtn : importFileBtn;
    const importCountElement = type === 'text' ? textImportCount : fileImportCount;

    if (!isValid) {
      alert('Please validate CSV data first');
      return;
    }

    if (!dataSource || !dataSource.trim()) {
      alert('No data to import');
      return;
    }

    // Show progress
    importBtn.disabled = true;
    importBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Uploading...';
    importProgress.style.display = 'block';

    // Simulate progress
    let progress = 0;
    const progressBar = importProgress.querySelector('.progress-bar');
    const progressInterval = setInterval(() => {
      progress += Math.random() * 30;
      if (progress > 90) progress = 90;
      progressBar.style.width = progress + '%';
    }, 200);

    fetch('<%= process_bulk_import_customers_path %>', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({ csv_data: dataSource })
    })
    .then(response => response.json())
    .then(data => {
      clearInterval(progressInterval);
      progressBar.style.width = '100%';
      
      // Debug logging
      console.log('Import response:', data);
      
      setTimeout(() => {
        if (data.success) {
          document.getElementById('successMessage').textContent = 
            `Successfully imported ${data.imported_count} customers!`;
          successModal.show();
        } else {
          // Show detailed error information
          let errorMessage = data.message;
          if (data.errors && data.errors.length > 0) {
            errorMessage += '\n\nDetails:\n' + data.errors.slice(0, 5).join('\n');
            if (data.errors.length > 5) {
              errorMessage += `\n... and ${data.errors.length - 5} more errors`;
            }
          }
          
          if (type === 'text') {
            showTextValidationMessage(errorMessage, 'danger');
          } else {
            showFileValidationMessage(errorMessage, 'danger');
          }
        }
      }, 500);
    })
    .catch(error => {
      clearInterval(progressInterval);
      const message = 'Error importing customers: ' + error.message;
      if (type === 'text') {
        showTextValidationMessage(message, 'danger');
      } else {
        showFileValidationMessage(message, 'danger');
      }
    })
    .finally(() => {
      importBtn.disabled = false;
      importBtn.innerHTML = '<i class="fas fa-upload me-2"></i>Add Customers <span class="badge bg-light text-success ms-2">' + importCountElement.textContent + '</span>';
      setTimeout(() => {
        importProgress.style.display = 'none';
      }, 500);
    });
  }

  // Table management functions
  function initializeTable() {
    tableData = [];
    tableRowCounter = 0;
    csvTableBody.innerHTML = '';
    
    // Add 5 initial empty rows
    for (let i = 0; i < 5; i++) {
      addTableRow();
    }
    updateTableStats();
  }

  function addTableRow() {
    tableRowCounter++;
    const rowIndex = tableData.length;
    
    const rowData = {
      id: tableRowCounter,
      name: '',
      phone_number: '',
      address: '',
      email: '',
      gst_number: '',
      pan_number: '',
      member_id: '',
      latitude: '',
      longitude: '',
      isValid: false,
      errors: []
    };
    
    tableData.push(rowData);
    
    const row = document.createElement('tr');
    row.dataset.rowIndex = rowIndex;
    row.innerHTML = `
      <td class="text-center">${tableRowCounter}</td>
      <td><input type="text" class="form-control form-control-sm" name="name" placeholder="Enter customer name" value="${rowData.name}"></td>
      <td><input type="text" class="form-control form-control-sm" name="phone_number" placeholder="Enter mobile number" value="${rowData.phone_number}"></td>
      <td><input type="text" class="form-control form-control-sm" name="address" placeholder="Enter address" value="${rowData.address}"></td>
      <td><input type="email" class="form-control form-control-sm" name="email" placeholder="Enter email" value="${rowData.email}"></td>
      <td><input type="text" class="form-control form-control-sm" name="gst_number" placeholder="Enter GST number" value="${rowData.gst_number}"></td>
      <td><input type="text" class="form-control form-control-sm" name="pan_number" placeholder="Enter PAN number" value="${rowData.pan_number}"></td>
      <td><input type="text" class="form-control form-control-sm" name="member_id" placeholder="Enter member ID" value="${rowData.member_id}"></td>
      <td><input type="number" class="form-control form-control-sm" name="latitude" placeholder="Latitude" step="any" value="${rowData.latitude}"></td>
      <td><input type="number" class="form-control form-control-sm" name="longitude" placeholder="Longitude" step="any" value="${rowData.longitude}"></td>
      <td class="text-center">
        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeTableRow(${rowIndex})">
          <i class="fas fa-trash"></i>
        </button>
      </td>
    `;
    
    csvTableBody.appendChild(row);
    
    // Add input event listeners for real-time validation
    const inputs = row.querySelectorAll('input');
    inputs.forEach(input => {
      input.addEventListener('input', function() {
        updateRowData(rowIndex, input.name, input.value);
        validateRow(rowIndex);
        updateTableStats();
      });
    });
    
    updateTableStats();
  }

  function removeTableRow(rowIndex) {
    const row = document.querySelector(`tr[data-row-index="${rowIndex}"]`);
    if (row) {
      row.remove();
      tableData.splice(rowIndex, 1);
      
      // Update row indices for remaining rows
      const remainingRows = csvTableBody.querySelectorAll('tr');
      remainingRows.forEach((row, index) => {
        row.dataset.rowIndex = index;
        const removeBtn = row.querySelector('button[onclick]');
        if (removeBtn) {
          removeBtn.setAttribute('onclick', `removeTableRow(${index})`);
        }
      });
      
      updateTableStats();
    }
  }

  function updateRowData(rowIndex, fieldName, value) {
    if (tableData[rowIndex]) {
      tableData[rowIndex][fieldName] = value;
    }
  }

  function validateRow(rowIndex) {
    const rowData = tableData[rowIndex];
    if (!rowData) return;
    
    rowData.errors = [];
    rowData.isValid = true;
    
    // Check required fields
    if (!rowData.name || rowData.name.trim() === '') {
      rowData.errors.push('Customer name is required');
      rowData.isValid = false;
    }
    
    if (!rowData.phone_number || rowData.phone_number.trim() === '') {
      rowData.errors.push('Mobile number is required');
      rowData.isValid = false;
    } else if (!/^\d{10}$/.test(rowData.phone_number.trim())) {
      rowData.errors.push('Mobile number must be 10 digits');
      rowData.isValid = false;
    }
    
    if (!rowData.address || rowData.address.trim() === '') {
      rowData.errors.push('Shipping address is required');
      rowData.isValid = false;
    }
    
    // Update row visual state
    const row = document.querySelector(`tr[data-row-index="${rowIndex}"]`);
    if (row) {
      if (rowData.isValid && hasAnyData(rowData)) {
        row.classList.remove('table-danger');
        row.classList.add('table-success');
      } else if (!rowData.isValid && hasAnyData(rowData)) {
        row.classList.remove('table-success');
        row.classList.add('table-danger');
      } else {
        row.classList.remove('table-success', 'table-danger');
      }
    }
  }

  function hasAnyData(rowData) {
    return rowData.name || rowData.phone_number || rowData.address || 
           rowData.email || rowData.gst_number || rowData.pan_number || 
           rowData.member_id || rowData.latitude || rowData.longitude;
  }

  function updateTableStats() {
    const totalRows = tableData.filter(row => hasAnyData(row)).length;
    const validRows = tableData.filter(row => row.isValid && hasAnyData(row)).length;
    const invalidRows = tableData.filter(row => !row.isValid && hasAnyData(row)).length;
    
    tableRowCount.textContent = totalRows;
    tableValidCount.textContent = validRows;
    tableInvalidCount.textContent = invalidRows;
    tableImportCount.textContent = validRows;
    
    // Show/hide import button based on valid rows
    if (validRows > 0) {
      importTableBtn.style.display = 'inline-block';
    } else {
      importTableBtn.style.display = 'none';
    }
  }

  function clearTable() {
    if (confirm('Are you sure you want to clear all data?')) {
      initializeTable();
      tableValidationStatus.style.display = 'none';
      importTableBtn.style.display = 'none';
      isValidTableCSV = false;
    }
  }

  function loadSampleTableData() {
    // Clear existing data
    tableData = [];
    csvTableBody.innerHTML = '';
    tableRowCounter = 0;
    
    // Sample data
    const sampleData = [
      {
        name: 'John Doe',
        phone_number: '9999999999',
        address: '123 Main St Delhi',
        email: 'john@example.com',
        gst_number: 'GST123',
        pan_number: 'PAN123',
        member_id: 'MEM123',
        latitude: '28.6139',
        longitude: '77.2090'
      },
      {
        name: 'Jane Smith',
        phone_number: '8888888888',
        address: '456 Oak Ave Mumbai',
        email: 'jane@example.com',
        gst_number: 'GST456',
        pan_number: 'PAN456',
        member_id: 'MEM456',
        latitude: '19.0760',
        longitude: '72.8777'
      },
      {
        name: 'Sample Party 1',
        phone_number: '8999999990',
        address: 'J204 Salarpuria Bangalore',
        email: 'sample1@example.com',
        gst_number: '09AABCS1429B1ZS',
        pan_number: '',
        member_id: 'MEM001',
        latitude: '12.9716',
        longitude: '77.5946'
      }
    ];
    
    // Add sample rows
    sampleData.forEach(data => {
      tableRowCounter++;
      const rowIndex = tableData.length;
      
      const rowData = { ...data, id: tableRowCounter, isValid: false, errors: [] };
      tableData.push(rowData);
      
      const row = document.createElement('tr');
      row.dataset.rowIndex = rowIndex;
      row.innerHTML = `
        <td class="text-center">${tableRowCounter}</td>
        <td><input type="text" class="form-control form-control-sm" name="name" placeholder="Enter customer name" value="${rowData.name}"></td>
        <td><input type="text" class="form-control form-control-sm" name="phone_number" placeholder="Enter mobile number" value="${rowData.phone_number}"></td>
        <td><input type="text" class="form-control form-control-sm" name="address" placeholder="Enter address" value="${rowData.address}"></td>
        <td><input type="email" class="form-control form-control-sm" name="email" placeholder="Enter email" value="${rowData.email}"></td>
        <td><input type="text" class="form-control form-control-sm" name="gst_number" placeholder="Enter GST number" value="${rowData.gst_number}"></td>
        <td><input type="text" class="form-control form-control-sm" name="pan_number" placeholder="Enter PAN number" value="${rowData.pan_number}"></td>
        <td><input type="text" class="form-control form-control-sm" name="member_id" placeholder="Enter member ID" value="${rowData.member_id}"></td>
        <td><input type="number" class="form-control form-control-sm" name="latitude" placeholder="Latitude" step="any" value="${rowData.latitude}"></td>
        <td><input type="number" class="form-control form-control-sm" name="longitude" placeholder="Longitude" step="any" value="${rowData.longitude}"></td>
        <td class="text-center">
          <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeTableRow(${rowIndex})">
            <i class="fas fa-trash"></i>
          </button>
        </td>
      `;
      
      csvTableBody.appendChild(row);
      
      // Add input event listeners
      const inputs = row.querySelectorAll('input');
      inputs.forEach(input => {
        input.addEventListener('input', function() {
          updateRowData(rowIndex, input.name, input.value);
          validateRow(rowIndex);
          updateTableStats();
        });
      });
      
      validateRow(rowIndex);
    });
    
    // Add a few empty rows
    for (let i = 0; i < 3; i++) {
      addTableRow();
    }
    
    updateTableStats();
  }

  function validateTableData() {
    // Validate all rows
    tableData.forEach((row, index) => {
      validateRow(index);
    });
    
    const validRows = tableData.filter(row => row.isValid && hasAnyData(row));
    const invalidRows = tableData.filter(row => !row.isValid && hasAnyData(row));
    
    if (validRows.length === 0) {
      showTableValidationMessage('No valid customer data found. Please fill in the required fields.', 'danger');
      isValidTableCSV = false;
    } else if (invalidRows.length > 0) {
      showTableValidationMessage(`Found ${validRows.length} valid customers and ${invalidRows.length} rows with errors. Please fix the errors before importing.`, 'warning');
      isValidTableCSV = false;
    } else {
      showTableValidationMessage(`✓ All ${validRows.length} customers are valid and ready to import!`, 'success');
      isValidTableCSV = true;
    }
    
    updateTableStats();
  }

  function showTableValidationMessage(message, type) {
    tableValidationStatus.className = `alert alert-${type}`;
    tableValidationStatus.innerHTML = `<i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} me-2"></i>${message}`;
    tableValidationStatus.style.display = 'block';
  }

  function exportTableAsCSV() {
    const validRows = tableData.filter(row => hasAnyData(row));
    
    if (validRows.length === 0) {
      alert('No data to export');
      return;
    }
    
    // Create CSV content
    const headers = ['name', 'phone_number', 'address', 'email', 'gst_number', 'pan_number', 'member_id', 'latitude', 'longitude'];
    const csvContent = [
      headers.join(','),
      ...validRows.map(row => {
        return [
          row.name || '',
          row.phone_number || '',
          row.address || '',
          row.email || '',
          row.gst_number || '',
          row.pan_number || '',
          row.member_id || '',
          row.latitude || '',
          row.longitude || ''
        ].map(field => `"${field}"`).join(',');
      })
    ].join('\n');
    
    // Download CSV file
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'customers_table_data.csv';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  }

  function getTableDataAsCSV() {
    const validRows = tableData.filter(row => row.isValid && hasAnyData(row));
    
    if (validRows.length === 0) {
      return '';
    }
    
    // Create CSV content matching the expected format
    const headers = ['name', 'phone_number', 'address', 'email', 'gst_number', 'pan_number', 'member_id', 'latitude', 'longitude'];
    const csvContent = [
      headers.join(','),
      ...validRows.map(row => {
        return [
          row.name || '',
          row.phone_number || '',
          row.address || '',
          row.email || '',
          row.gst_number || '',
          row.pan_number || '',
          row.member_id || '',
          row.latitude || '',
          row.longitude || ''
        ].join(',');
      })
    ].join('\n');
    
    return csvContent;
  }

  // Handle table import separately to avoid function override issues
  function importTableCustomers() {
    const isValid = isValidTableCSV;
    const csvData = getTableDataAsCSV();
    
    if (!isValid) {
      alert('Please validate table data first');
      return;
    }

    if (!csvData || !csvData.trim()) {
      alert('No valid data to import');
      return;
    }

    // Show progress
    importTableBtn.disabled = true;
    importTableBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Uploading...';
    importProgress.style.display = 'block';

    // Simulate progress
    let progress = 0;
    const progressBar = importProgress.querySelector('.progress-bar');
    const progressInterval = setInterval(() => {
      progress += Math.random() * 30;
      if (progress > 90) progress = 90;
      progressBar.style.width = progress + '%';
    }, 200);

    fetch('<%= process_bulk_import_customers_path %>', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({ csv_data: csvData })
    })
         .then(response => response.json())
     .then(data => {
       clearInterval(progressInterval);
       progressBar.style.width = '100%';
       
       // Debug logging
       console.log('Table import response:', data);
       
       setTimeout(() => {
         if (data.success) {
           document.getElementById('successMessage').textContent = 
             `Successfully imported ${data.imported_count} customers!`;
           successModal.show();
         } else {
           // Show detailed error information
           let errorMessage = data.message;
           if (data.errors && data.errors.length > 0) {
             errorMessage += '\n\nDetails:\n' + data.errors.slice(0, 5).join('\n');
             if (data.errors.length > 5) {
               errorMessage += `\n... and ${data.errors.length - 5} more errors`;
             }
           }
           showTableValidationMessage(errorMessage, 'danger');
         }
       }, 500);
    })
    .catch(error => {
      clearInterval(progressInterval);
      const message = 'Error importing customers: ' + error.message;
      showTableValidationMessage(message, 'danger');
    })
    .finally(() => {
      importTableBtn.disabled = false;
      importTableBtn.innerHTML = '<i class="fas fa-upload me-2"></i>Add Customers <span class="badge bg-light text-success ms-2">' + tableImportCount.textContent + '</span>';
      setTimeout(() => {
        importProgress.style.display = 'none';
      }, 500);
    });
  }

  // Enhanced Table Features Functions
  
  // Table search functionality
  function handleTableSearch() {
    const searchTerm = quickSearchTable.value.toLowerCase();
    const rows = csvTableBody.querySelectorAll('tr');
    
    rows.forEach(row => {
      const inputs = row.querySelectorAll('input');
      let rowMatches = false;
      
      inputs.forEach(input => {
        if (input.value.toLowerCase().includes(searchTerm)) {
          rowMatches = true;
        }
      });
      
      row.style.display = rowMatches || searchTerm === '' ? '' : 'none';
    });
  }
  
  // Show bulk fill modal
  function showBulkFillModal() {
    const modal = new bootstrap.Modal(document.getElementById('bulkFillModal'));
    modal.show();
  }
  
  // Duplicate selected row
  function duplicateSelectedRow() {
    const selectedRow = document.querySelector('tr.table-selected');
    if (!selectedRow) {
      alert('Please select a row to duplicate by clicking on it');
      return;
    }
    
    const rowIndex = parseInt(selectedRow.dataset.rowIndex);
    const originalData = tableData[rowIndex];
    
    if (originalData) {
      // Create new row with same data
      tableRowCounter++;
      const newRowIndex = tableData.length;
      
      const newRowData = {
        ...originalData,
        id: tableRowCounter,
        isValid: false,
        errors: []
      };
      
      tableData.push(newRowData);
      
      const row = document.createElement('tr');
      row.dataset.rowIndex = newRowIndex;
      row.innerHTML = `
        <td class="text-center">${tableRowCounter}</td>
        <td><input type="text" class="form-control form-control-sm enhanced-input" name="name" placeholder="Enter customer name" value="${newRowData.name}" data-autocomplete="name"></td>
        <td><input type="text" class="form-control form-control-sm enhanced-input" name="phone_number" placeholder="Enter mobile number" value="${newRowData.phone_number}" data-autocomplete="phone" pattern="[0-9]{10}"></td>
        <td><input type="text" class="form-control form-control-sm enhanced-input" name="address" placeholder="Enter address" value="${newRowData.address}" data-autocomplete="address"></td>
        <td><input type="email" class="form-control form-control-sm enhanced-input" name="email" placeholder="Enter email" value="${newRowData.email}"></td>
        <td><input type="text" class="form-control form-control-sm enhanced-input" name="gst_number" placeholder="Enter GST number" value="${newRowData.gst_number}"></td>
        <td><input type="text" class="form-control form-control-sm enhanced-input" name="pan_number" placeholder="Enter PAN number" value="${newRowData.pan_number}"></td>
        <td><input type="text" class="form-control form-control-sm enhanced-input" name="member_id" placeholder="Enter member ID" value="${newRowData.member_id}"></td>
        <td><input type="number" class="form-control form-control-sm enhanced-input" name="latitude" placeholder="Latitude" step="any" value="${newRowData.latitude}"></td>
        <td><input type="number" class="form-control form-control-sm enhanced-input" name="longitude" placeholder="Longitude" step="any" value="${newRowData.longitude}"></td>
        <td class="text-center">
          <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeTableRow(${newRowIndex})">
            <i class="fas fa-trash"></i>
          </button>
        </td>
      `;
      
      csvTableBody.appendChild(row);
      
      // Add enhanced input event listeners
      setupEnhancedInputs(row, newRowIndex);
      
      validateRow(newRowIndex);
      updateTableStats();
    }
  }
  
  // Auto-complete data based on patterns
  function autoCompleteData() {
    const rows = csvTableBody.querySelectorAll('tr');
    let completedCount = 0;
    
    rows.forEach((row, index) => {
      const nameInput = row.querySelector('input[name="name"]');
      const phoneInput = row.querySelector('input[name="phone_number"]');
      const addressInput = row.querySelector('input[name="address"]');
      
      // Auto-complete phone numbers (add country code if missing)
      if (phoneInput && phoneInput.value && phoneInput.value.length === 10 && !phoneInput.value.startsWith('+91')) {
        if (/^\d{10}$/.test(phoneInput.value)) {
          phoneInput.dispatchEvent(new Event('input'));
          completedCount++;
        }
      }
      
      // Auto-complete email based on name
      const emailInput = row.querySelector('input[name="email"]');
      if (nameInput && nameInput.value && emailInput && !emailInput.value) {
        const name = nameInput.value.toLowerCase().replace(/\s+/g, '.');
        emailInput.value = `${name}@example.com`;
        emailInput.dispatchEvent(new Event('input'));
        completedCount++;
      }
    });
    
    if (completedCount > 0) {
      showToast(`Auto-completed ${completedCount} fields`, 'success');
    } else {
      showToast('No fields to auto-complete', 'info');
    }
  }
  
  // Toggle column fill functionality
  function toggleColumnFill(columnName) {
    const modal = `
      <div class="modal fade" id="columnFillModal" tabindex="-1">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Fill Column: ${columnName.replace('_', ' ').toUpperCase()}</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
              <div class="mb-3">
                <label class="form-label">Value to fill in all empty cells:</label>
                <input type="text" class="form-control" id="columnFillValue" placeholder="Enter value">
              </div>
              <div class="form-check">
                <input class="form-check-input" type="checkbox" id="overwriteExisting">
                <label class="form-check-label" for="overwriteExisting">
                  Overwrite existing values
                </label>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="button" class="btn btn-primary" onclick="applyColumnFill('${columnName}')">Apply</button>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // Remove existing modal if any
    const existingModal = document.getElementById('columnFillModal');
    if (existingModal) existingModal.remove();
    
    // Add modal to body
    document.body.insertAdjacentHTML('beforeend', modal);
    
    // Show modal
    const modalInstance = new bootstrap.Modal(document.getElementById('columnFillModal'));
    modalInstance.show();
  }
  
  // Apply column fill
  function applyColumnFill(columnName) {
    const value = document.getElementById('columnFillValue').value;
    const overwrite = document.getElementById('overwriteExisting').checked;
    
    if (!value.trim()) {
      alert('Please enter a value');
      return;
    }
    
    const rows = csvTableBody.querySelectorAll('tr');
    let updatedCount = 0;
    
    rows.forEach((row, index) => {
      const input = row.querySelector(`input[name="${columnName}"]`);
      if (input && (overwrite || !input.value.trim())) {
        input.value = value;
        input.dispatchEvent(new Event('input'));
        updatedCount++;
      }
    });
    
    // Close modal
    const modal = bootstrap.Modal.getInstance(document.getElementById('columnFillModal'));
    modal.hide();
    
    showToast(`Updated ${updatedCount} cells in ${columnName} column`, 'success');
  }
  
  // Enhanced input setup with autocomplete and validation
  function setupEnhancedInputs(row, rowIndex) {
    const inputs = row.querySelectorAll('.enhanced-input');
    
    inputs.forEach(input => {
      // Add real-time validation
      input.addEventListener('input', function() {
        updateRowData(rowIndex, input.name, input.value);
        validateInputField(input);
        validateRow(rowIndex);
        updateTableStats();
      });
      
      // Add click event for row selection
      input.addEventListener('focus', function() {
        // Remove previous selection
        document.querySelectorAll('tr.table-selected').forEach(r => r.classList.remove('table-selected'));
        // Add selection to current row
        row.classList.add('table-selected');
      });
      
      // Add autocomplete functionality
      if (input.dataset.autocomplete) {
        setupAutocomplete(input);
      }
    });
  }
  
  // Setup autocomplete for inputs
  function setupAutocomplete(input) {
    const type = input.dataset.autocomplete;
    
    input.addEventListener('input', function() {
      const value = this.value;
      
      // Phone number formatting
      if (type === 'phone' && value) {
        // Remove non-digits
        const cleaned = value.replace(/\D/g, '');
        
        // Format as needed
        if (cleaned.length === 10) {
          this.classList.add('is-valid');
          this.classList.remove('is-invalid');
        } else {
          this.classList.add('is-invalid');
          this.classList.remove('is-valid');
        }
      }
      
      // Email validation
      if (input.type === 'email' && value) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (emailRegex.test(value)) {
          this.classList.add('is-valid');
          this.classList.remove('is-invalid');
        } else {
          this.classList.add('is-invalid');
          this.classList.remove('is-valid');
        }
      }
    });
  }
  
  // Validate individual input field
  function validateInputField(input) {
    const value = input.value.trim();
    const name = input.name;
    
    // Remove existing validation classes
    input.classList.remove('is-valid', 'is-invalid');
    
    // Required field validation
    if ((name === 'name' || name === 'phone_number' || name === 'address') && !value) {
      input.classList.add('is-invalid');
      return false;
    }
    
    // Phone number validation
    if (name === 'phone_number' && value) {
      if (!/^\d{10}$/.test(value)) {
        input.classList.add('is-invalid');
        return false;
      }
    }
    
    // Email validation
    if (name === 'email' && value) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(value)) {
        input.classList.add('is-invalid');
        return false;
      }
    }
    
    // If we get here, the field is valid
    if (value) {
      input.classList.add('is-valid');
    }
    
    return true;
  }
  
  // Show toast notification
  function showToast(message, type = 'info') {
    const toastContainer = document.getElementById('toastContainer') || createToastContainer();
    
    const toast = document.createElement('div');
    toast.className = `toast align-items-center text-white bg-${type} border-0`;
    toast.setAttribute('role', 'alert');
    toast.innerHTML = `
      <div class="d-flex">
        <div class="toast-body">${message}</div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
      </div>
    `;
    
    toastContainer.appendChild(toast);
    
    const bsToast = new bootstrap.Toast(toast);
    bsToast.show();
    
    // Remove toast after it's hidden
    toast.addEventListener('hidden.bs.toast', () => {
      toast.remove();
    });
  }
  
  // Create toast container if it doesn't exist
  function createToastContainer() {
    const container = document.createElement('div');
    container.id = 'toastContainer';
    container.className = 'toast-container position-fixed bottom-0 end-0 p-3';
    container.style.zIndex = '9999';
    document.body.appendChild(container);
    return container;
  }
  
  // Override the original addTableRow to use enhanced inputs
  const originalAddTableRow = addTableRow;
  addTableRow = function() {
    tableRowCounter++;
    const rowIndex = tableData.length;
    
    const rowData = {
      id: tableRowCounter,
      name: '',
      phone_number: '',
      address: '',
      email: '',
      gst_number: '',
      pan_number: '',
      member_id: '',
      latitude: '',
      longitude: '',
      isValid: false,
      errors: []
    };
    
    tableData.push(rowData);
    
    const row = document.createElement('tr');
    row.dataset.rowIndex = rowIndex;
    row.innerHTML = `
      <td class="text-center">${tableRowCounter}</td>
      <td><input type="text" class="form-control form-control-sm enhanced-input" name="name" placeholder="Enter customer name" value="${rowData.name}" data-autocomplete="name"></td>
      <td><input type="text" class="form-control form-control-sm enhanced-input" name="phone_number" placeholder="Enter mobile number" value="${rowData.phone_number}" data-autocomplete="phone" pattern="[0-9]{10}"></td>
      <td><input type="text" class="form-control form-control-sm enhanced-input" name="address" placeholder="Enter address" value="${rowData.address}" data-autocomplete="address"></td>
      <td><input type="email" class="form-control form-control-sm enhanced-input" name="email" placeholder="Enter email" value="${rowData.email}"></td>
      <td><input type="text" class="form-control form-control-sm enhanced-input" name="gst_number" placeholder="Enter GST number" value="${rowData.gst_number}"></td>
      <td><input type="text" class="form-control form-control-sm enhanced-input" name="pan_number" placeholder="Enter PAN number" value="${rowData.pan_number}"></td>
      <td><input type="text" class="form-control form-control-sm enhanced-input" name="member_id" placeholder="Enter member ID" value="${rowData.member_id}"></td>
      <td><input type="number" class="form-control form-control-sm enhanced-input" name="latitude" placeholder="Latitude" step="any" value="${rowData.latitude}"></td>
      <td><input type="number" class="form-control form-control-sm enhanced-input" name="longitude" placeholder="Longitude" step="any" value="${rowData.longitude}"></td>
      <td class="text-center">
        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeTableRow(${rowIndex})">
          <i class="fas fa-trash"></i>
        </button>
      </td>
    `;
    
    csvTableBody.appendChild(row);
    
    // Setup enhanced inputs
    setupEnhancedInputs(row, rowIndex);
    
    updateTableStats();
  };
});
</script>

<style>
.card {
  border: none;
  box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15) !important;
  border-radius: 0.5rem;
}

.card-header {
  border-bottom: 1px solid #e3e6f0;
  border-radius: 0.5rem 0.5rem 0 0 !important;
}

.card-header-actions .btn {
  margin-left: 0.5rem;
}

/* Upload option styles */
.upload-option {
  margin-bottom: 1rem;
}

.upload-option .btn {
  transition: all 0.3s ease;
  height: 120px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.upload-option .btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.upload-option .btn-check:checked + .btn {
  background-color: #4e73df;
  border-color: #4e73df;
  color: white;
}

/* File upload area styles */
.upload-area {
  border: 2px dashed #e3e6f0;
  border-radius: 0.5rem;
  padding: 3rem 2rem;
  text-align: center;
  transition: all 0.3s ease;
  background: #f8f9fc;
}

.upload-area:hover {
  border-color: #4e73df;
  background: #f0f4ff;
}

.upload-area.drag-over {
  border-color: #4e73df;
  background: #e3f2fd;
  transform: scale(1.02);
}

.upload-content {
  max-width: 400px;
  margin: 0 auto;
}

.upload-icon {
  font-size: 3rem;
  color: #4e73df;
  margin-bottom: 1rem;
}

.upload-title {
  color: #5a5c69;
  margin-bottom: 0.5rem;
}

.upload-subtitle {
  margin-bottom: 1.5rem;
}

.file-requirements {
  margin-bottom: 0;
}

/* File info styles */
.file-info {
  margin-top: 1rem;
}

/* CSV input styles */
.csv-input-container {
  position: relative;
}

.csv-textarea {
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  font-size: 0.85rem;
  line-height: 1.4;
  border: 2px solid #e3e6f0;
  border-radius: 0.5rem;
  resize: vertical;
  min-height: 300px;
}

.csv-textarea:focus {
  border-color: #4e73df;
  box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
}

.csv-counter {
  position: absolute;
  bottom: 8px;
  right: 12px;
  background: rgba(255, 255, 255, 0.9);
  padding: 2px 8px;
  border-radius: 4px;
  font-size: 0.75rem;
}

/* Preview table styles */
.preview-table-container {
  max-height: 400px;
  border: 1px solid #e3e6f0;
  border-radius: 0.5rem;
}

.table th {
  background-color: #f8f9fc !important;
  border-top: none;
  font-weight: 600;
  color: #5a5c69;
  font-size: 0.85rem;
  padding: 0.75rem 0.5rem;
}

.table td {
  font-size: 0.85rem;
  padding: 0.5rem;
  max-width: 150px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.table-hover tbody tr:hover {
  background-color: rgba(78, 115, 223, 0.05);
}

/* Template styles */
.csv-template {
  background: #f8f9fc;
  border: 1px solid #e3e6f0;
  border-radius: 0.5rem;
  padding: 1rem;
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  font-size: 0.8rem;
  line-height: 1.4;
  color: #5a5c69;
  max-height: 200px;
  overflow-y: auto;
  margin: 0;
}

/* Progress styles */
.progress-container {
  background: #f8f9fc;
  border: 1px solid #e3e6f0;
  border-radius: 0.5rem;
  padding: 1.5rem;
}

.progress {
  height: 8px;
  border-radius: 4px;
  background-color: #e3e6f0;
}

/* Button styles */
.btn-group .btn {
  border-radius: 0.35rem !important;
}

.badge {
  font-size: 0.75em;
}

/* Success animation */
.success-icon {
  animation: successPulse 0.6s ease-in-out;
}

@keyframes successPulse {
  0% { transform: scale(0.8); opacity: 0; }
  50% { transform: scale(1.1); }
  100% { transform: scale(1); opacity: 1; }
}

/* Alert styles */
.alert {
  border-radius: 0.5rem;
  border: none;
}

.alert-success {
  background-color: #d1edff;
  color: #0c5460;
  border-left: 4px solid #0ea5e9;
}

.alert-danger {
  background-color: #f8d7da;
  color: #721c24;
  border-left: 4px solid #dc3545;
}

.text-nowrap {
  white-space: nowrap;
}

/* CSV Table Input Styles */
.csv-table-container {
  max-height: 600px;
  border: 1px solid #e3e6f0;
  border-radius: 0.5rem;
  background: white;
}

.csv-table-container table {
  margin: 0;
}

.csv-table-container thead th {
  position: sticky;
  top: 0;
  background: #f8f9fc !important;
  z-index: 10;
  border-bottom: 2px solid #e3e6f0;
  font-size: 0.8rem;
  padding: 0.75rem 0.5rem;
  vertical-align: middle;
  text-align: center;
}

.csv-table-container tbody td {
  padding: 0.5rem;
  vertical-align: middle;
  border-color: #e3e6f0;
}

.csv-table-container input {
  border: 1px solid #d1d3e2;
  border-radius: 0.25rem;
  font-size: 0.85rem;
  padding: 0.375rem 0.5rem;
  width: 100%;
  transition: border-color 0.15s ease-in-out;
}

.csv-table-container input:focus {
  border-color: #4e73df;
  box-shadow: 0 0 0 0.1rem rgba(78, 115, 223, 0.25);
  outline: none;
}

.csv-table-container .table-success {
  background-color: rgba(25, 135, 84, 0.1) !important;
}

.csv-table-container .table-success input {
  border-color: #198754;
  background-color: rgba(25, 135, 84, 0.05);
}

.csv-table-container .table-danger {
  background-color: rgba(220, 53, 69, 0.1) !important;
}

.csv-table-container .table-danger input {
  border-color: #dc3545;
  background-color: rgba(220, 53, 69, 0.05);
}

.table-stats {
  font-size: 0.9rem;
}

.table-stats .fas {
  color: #4e73df;
}

/* Button styles for table actions */
.card-header-actions .btn {
  font-size: 0.85rem;
  padding: 0.375rem 0.75rem;
}

.card-header-actions .btn-outline-success {
  color: #198754;
  border-color: #198754;
}

.card-header-actions .btn-outline-success:hover {
  color: white;
  background-color: #198754;
  border-color: #198754;
}

/* Alert styles for table validation */
.alert-warning {
  background-color: #fff3cd;
  color: #856404;
  border-left: 4px solid #ffc107;
}

/* Enhanced Table Input Styles */
.quick-actions-bar {
  background: #f8f9fc;
  border: 1px solid #e3e6f0;
  border-radius: 0.5rem;
  padding: 1rem;
}

.header-actions {
  margin-top: 0.5rem;
}

.header-actions .btn-xs {
  font-size: 0.7rem;
  padding: 0.2rem 0.4rem;
  border-radius: 0.25rem;
}

.enhanced-input {
  transition: all 0.2s ease-in-out;
}

.enhanced-input:focus {
  border-color: #4e73df;
  box-shadow: 0 0 0 0.1rem rgba(78, 115, 223, 0.25);
  transform: scale(1.02);
}

.enhanced-input.is-valid {
  border-color: #28a745;
  background-color: rgba(40, 167, 69, 0.05);
}

.enhanced-input.is-invalid {
  border-color: #dc3545;
  background-color: rgba(220, 53, 69, 0.05);
}

.table-selected {
  background-color: rgba(78, 115, 223, 0.1) !important;
  border: 2px solid #4e73df;
}

.table-selected td {
  border-color: #4e73df;
}

/* Toast notifications */
.toast-container {
  z-index: 9999;
}

.toast {
  min-width: 300px;
}

/* Column fill modal */
#columnFillModal .form-control:focus {
  border-color: #4e73df;
  box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
}

/* Search highlighting */
.search-highlight {
  background-color: yellow;
  font-weight: bold;
}

/* Bulk actions */
.bulk-actions-bar {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border-radius: 0.5rem;
  padding: 0.75rem;
  margin-bottom: 1rem;
}

.bulk-actions-bar .btn {
  color: white;
  border-color: rgba(255, 255, 255, 0.3);
  background: rgba(255, 255, 255, 0.1);
}

.bulk-actions-bar .btn:hover {
  background: rgba(255, 255, 255, 0.2);
  border-color: rgba(255, 255, 255, 0.5);
}

/* Input validation animations */
@keyframes shake {
  0%, 100% { transform: translateX(0); }
  25% { transform: translateX(-5px); }
  75% { transform: translateX(5px); }
}

.enhanced-input.shake {
  animation: shake 0.5s ease-in-out;
}

/* Auto-complete suggestions */
.autocomplete-suggestions {
  position: absolute;
  z-index: 1000;
  background: white;
  border: 1px solid #e3e6f0;
  border-radius: 0.375rem;
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  max-height: 200px;
  overflow-y: auto;
}

.autocomplete-suggestion {
  padding: 0.5rem 0.75rem;
  cursor: pointer;
  border-bottom: 1px solid #f1f3f4;
}

.autocomplete-suggestion:hover,
.autocomplete-suggestion.selected {
  background-color: #f8f9fc;
  color: #4e73df;
}

.autocomplete-suggestion:last-child {
  border-bottom: none;
}

/* Progress indicators */
.field-progress {
  height: 3px;
  background: #e3e6f0;
  border-radius: 1.5px;
  overflow: hidden;
  margin-top: 0.25rem;
}

.field-progress-bar {
  height: 100%;
  background: linear-gradient(90deg, #4e73df, #36b9cc);
  transition: width 0.3s ease;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .upload-area {
    padding: 2rem 1rem;
  }
  
  .upload-content {
    max-width: 100%;
  }
  
  .upload-icon {
    font-size: 2rem;
  }
  
  .csv-textarea {
    min-height: 250px;
    font-size: 0.8rem;
  }
  
  .table td {
    font-size: 0.8rem;
    padding: 0.4rem;
    max-width: 100px;
  }
  
  .card-header-actions {
    margin-top: 0.5rem;
  }
  
  .card-header-actions .btn {
    margin-left: 0;
    margin-right: 0.5rem;
  }
  
  .upload-option .btn {
    height: 100px;
    font-size: 0.9rem;
  }
  
  /* Table responsive adjustments */
  .csv-table-container {
    max-height: 400px;
  }
  
  .csv-table-container thead th {
    font-size: 0.7rem;
    padding: 0.5rem 0.25rem;
    min-width: 80px;
  }
  
  .csv-table-container tbody td {
    padding: 0.25rem;
  }
  
  .csv-table-container input {
    font-size: 0.8rem;
    padding: 0.25rem 0.375rem;
  }
  
  .table-stats {
    font-size: 0.8rem;
  }
  
  .card-header-actions .btn {
    font-size: 0.8rem;
    padding: 0.25rem 0.5rem;
    margin-left: 0;
    margin-right: 0.25rem;
    margin-top: 0.25rem;
  }
}
</style>