<% content_for :title, "Customer Patterns - #{@month_name}" %>

<div class="container-fluid">
  <!-- Header -->
  <div class="row mb-4">
    <div class="col-12">
      <div class="d-flex justify-content-between align-items-center">
        <div>
          <h1 class="h3 mb-1">📊 Customer Patterns Analysis</h1>
          <p class="text-muted mb-0">Monthly delivery pattern analysis for <%= @month_name %></p>
        </div>
        <div class="d-flex gap-2 flex-wrap align-items-center">
          <!-- Complete All Till Today Button -->
          <button type="button" class="btn btn-success complete-all-btn"
                  id="completeAllTillTodayBtn"
                  data-month="<%= @current_month %>"
                  data-year="<%= @current_year %>"
                  data-delivery-person-id="<%= @delivery_person_id %>"
                  style="display: none;">
            <span class="btn-text">
              ✅ Complete All Till Today (<span id="pending-count-display">0</span>)
            </span>
            <span class="btn-loader" style="display: none;">
              <div class="spinner-border spinner-border-sm text-white me-2" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
              Processing...
            </span>
          </button>

          <!-- Filters Form -->
          <%= form_with url: customer_patterns_path, method: :get, local: true, class: "d-flex gap-2 flex-wrap" do |form| %>
            <!-- Delivery Person Filter -->
            <%= form.select :delivery_person_id,
                options_from_collection_for_select(@delivery_people, :id, :name, @delivery_person_id),
                { prompt: "🚚 All Delivery People" },
                { class: "form-select", style: "width: auto; min-width: 200px;" } %>

            <!-- Month/Year Selector -->
            <%= form.select :month, options_for_select((1..12).map { |m| [Date::MONTHNAMES[m], m] }, @current_month),
                { prompt: "Select Month" }, { class: "form-select", style: "width: auto;" } %>
            <%= form.select :year, options_for_select((2023..Date.current.year+1).map { |y| [y, y] }, @current_year),
                { prompt: "Select Year" }, { class: "form-select", style: "width: auto;" } %>
            <%= form.submit "🔍 Filter", class: "btn btn-primary", id: "filter-submit-btn" %>
          <% end %>
        </div>
      </div>
    </div>
  </div>

  <!-- Summary Cards -->
  <div class="row mb-4">
    <div class="col-md-3">
      <div class="card text-center h-100">
        <div class="card-body">
          <div class="fs-2 mb-2">👥</div>
          <h3 class="text-primary mb-1"><%= @total_customers %></h3>
          <p class="text-muted mb-0">Total Customers</p>
        </div>
      </div>
    </div>
    <div class="col-md-3">
      <div class="card text-center h-100">
        <div class="card-body">
          <div class="fs-2 mb-2">🟢</div>
          <h3 class="text-success mb-1"><%= @regular_count %></h3>
          <p class="text-muted mb-0">Regular Customers</p>
          <small class="text-muted">≥0.5L daily</small>
        </div>
      </div>
    </div>
    <div class="col-md-3">
      <div class="card text-center h-100">
        <div class="card-body">
          <div class="fs-2 mb-2">🟡</div>
          <h3 class="text-warning mb-1"><%= @interval_count %></h3>
          <p class="text-muted mb-0">Interval Customers</p>
          <small class="text-muted">Missed 1-2 days</small>
        </div>
      </div>
    </div>
    <div class="col-md-3">
      <div class="card text-center h-100">
        <div class="card-body">
          <div class="fs-2 mb-2">🔴</div>
          <h3 class="text-danger mb-1"><%= @irregular_count %></h3>
          <p class="text-muted mb-0">Irregular Customers</p>
          <small class="text-muted">Sporadic deliveries</small>
        </div>
      </div>
    </div>
  </div>

  <!-- Filter Buttons -->
  <div class="row mb-3">
    <div class="col-12">
      <div class="d-flex gap-2 flex-wrap">
        <%= link_to customer_patterns_path(month: @current_month, year: @current_year, delivery_person_id: @delivery_person_id),
            class: "btn #{'btn-primary' if params[:pattern].blank?} #{'btn-outline-primary' unless params[:pattern].blank?}" do %>
          All Patterns (<%= @total_customers %>)
        <% end %>
        <%= link_to customer_patterns_path(month: @current_month, year: @current_year, delivery_person_id: @delivery_person_id, pattern: 'regular'),
            class: "btn #{'btn-success' if params[:pattern] == 'regular'} #{'btn-outline-success' unless params[:pattern] == 'regular'}" do %>
          🟢 Regular (<%= @regular_count %>)
        <% end %>
        <%= link_to customer_patterns_path(month: @current_month, year: @current_year, delivery_person_id: @delivery_person_id, pattern: 'interval'),
            class: "btn #{'btn-warning' if params[:pattern] == 'interval'} #{'btn-outline-warning' unless params[:pattern] == 'interval'}" do %>
          🟡 Interval (<%= @interval_count %>)
        <% end %>
        <%= link_to customer_patterns_path(month: @current_month, year: @current_year, delivery_person_id: @delivery_person_id, pattern: 'irregular'),
            class: "btn #{'btn-danger' if params[:pattern] == 'irregular'} #{'btn-outline-danger' unless params[:pattern] == 'irregular'}" do %>
          🔴 Irregular (<%= @irregular_count %>)
        <% end %>
      </div>
    </div>
  </div>

  <!-- Customer Patterns Table -->
  <div class="row">
    <div class="col-12">
      <div class="card">
        <div class="card-header">
          <h5 class="card-title mb-0">
            Customer Delivery Patterns
            <% if params[:pattern].present? %>
              - <%= params[:pattern].titleize %> Customers
            <% end %>
          </h5>
        </div>
        <div class="card-body p-0">
          <div class="table-responsive">
            <table class="table table-hover mb-0">
              <thead class="table-light">
                <tr>
                  <th>Customer Name</th>
                  <th>Delivery Person</th>
                  <th>Total Liters</th>
                  <th>Primary Product</th>
                  <th>Days/Total Assignments</th>
                  <th>Estimated Amount</th>
                  <th>Pattern</th>
                  <th>Delivery Schedule</th>
                  <th>Action</th>
                </tr>
              </thead>
              <tbody>
                <% if @customer_patterns.any? %>
                  <% @customer_patterns.each do |data| %>
                    <tr>
                      <td>
                        <div class="d-flex align-items-center">
                          <div class="avatar-circle me-2">
                            <%= data[:customer].initials %>
                          </div>
                          <div>
                            <div class="fw-semibold"><%= data[:customer].name %></div>
                            <small class="text-muted"><%= data[:customer].phone_number %></small>
                          </div>
                        </div>
                      </td>
                      <td>
                        <span class="badge bg-info">
                          <%= data[:delivery_person_name] %>
                        </span>
                      </td>
                      <td>
                        <span class="fw-semibold"><%= data[:total_liters] %> L</span>
                      </td>
                      <td>
                        <% if data[:primary_product] %>
                          <span class="badge bg-secondary">
                            <%= data[:primary_product].name %>
                          </span>
                        <% else %>
                          <span class="text-muted">-</span>
                        <% end %>
                      </td>
                      <td>
                        <div class="d-flex flex-column align-items-start gap-1">
                          <span class="badge bg-primary">
                            <%= data[:days_delivered] %> days
                          </span>
                          <small class="text-muted">
                            <%= data[:total_assignments] %> total assignments
                          </small>
                        </div>
                      </td>
                      <td>
                        <span class="fw-semibold text-success">
                          ₹<%= number_with_precision(data[:estimated_amount] || 0, precision: 2) %>
                        </span>
                      </td>
                      <td>
                        <% case data[:pattern] %>
                        <% when 'regular' %>
                          <span class="badge bg-success">🟢 Regular</span>
                        <% when 'interval' %>
                          <span class="badge bg-warning text-dark">🟡 Interval</span>
                        <% when 'irregular' %>
                          <span class="badge bg-danger">🔴 Irregular</span>
                        <% end %>
                      </td>
                      <td>
                        <small class="text-muted">
                          <%= data[:pattern_description] %>
                        </small>
                      </td>
                      <td>
                        <div class="d-flex gap-2 justify-content-center">
                          <!-- View Customer -->
                          <%= link_to customer_path(data[:customer]),
                              class: "btn btn-sm btn-outline-primary",
                              title: "View Customer",
                              data: { bs_toggle: "tooltip" } do %>
                            <i class="fas fa-user"></i>
                          <% end %>

                          <!-- View Deliveries -->
                          <button type="button"
                                  class="btn btn-sm btn-outline-success view-deliveries-btn"
                                  data-customer-id="<%= data[:customer].id %>"
                                  data-customer-name="<%= data[:customer].name %>"
                                  data-month="<%= @current_month %>"
                                  data-year="<%= @current_year %>"
                                  title="View Deliveries"
                                  data-bs-toggle="tooltip">
                            <i class="fas fa-truck"></i>
                          </button>
                        </div>
                      </td>
                    </tr>
                  <% end %>
                <% else %>
                  <tr>
                    <td colspan="8" class="text-center py-4">
                      <div class="py-4">
                        <i class="fas fa-search fs-1 text-muted mb-3"></i>
                        <h5 class="text-muted">No customer data found for <%= @month_name %></h5>
                        <p class="text-muted">Try selecting a different month or check if there are any completed deliveries.</p>
                      </div>
                    </td>
                  </tr>
                <% end %>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .avatar-circle {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 14px;
  }

  .card {
    border: none;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    border-radius: 0.75rem;
  }

  .card-header {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border-bottom: 1px solid #dee2e6;
    border-radius: 0.75rem 0.75rem 0 0 !important;
  }

  .table th {
    font-weight: 600;
    color: #495057;
    border-top: none;
  }

  .badge {
    font-size: 0.75rem;
  }

  .btn {
    border-radius: 0.5rem;
  }

  .form-select {
    border-radius: 0.5rem;
  }

  .complete-all-btn {
    position: relative;
    overflow: hidden;
    transition: all 0.3s ease;
    box-shadow: 0 2px 10px rgba(40, 167, 69, 0.3);
    border: none;
    font-weight: 600;
  }

  .complete-all-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 20px rgba(40, 167, 69, 0.4);
  }

  .complete-all-btn:disabled {
    transform: none;
    opacity: 0.8;
  }

  .complete-all-btn .btn-loader {
    animation: pulse 1.5s infinite;
  }

  @keyframes pulse {
    0% { opacity: 1; }
    50% { opacity: 0.7; }
    100% { opacity: 1; }
  }

  .alert-success.shadow-sm {
    animation: slideInRight 0.5s ease-out;
  }

  @keyframes slideInRight {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  /* Big Attractive Loader Styles */
  .big-loader-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 10000;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .loader-backdrop {
    background: linear-gradient(135deg, rgba(0, 0, 0, 0.9), rgba(40, 167, 69, 0.1));
    backdrop-filter: blur(15px);
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    animation: fadeIn 0.5s ease-out;
  }

  .loader-content {
    background: linear-gradient(145deg, #ffffff, #f8f9fa);
    padding: 4rem 3rem;
    border-radius: 30px;
    box-shadow:
      0 30px 80px rgba(0, 0, 0, 0.3),
      0 0 0 1px rgba(255, 255, 255, 0.1),
      inset 0 1px 0 rgba(255, 255, 255, 0.8);
    text-align: center;
    min-width: 420px;
    position: relative;
    overflow: hidden;
    animation: scaleIn 0.6s cubic-bezier(0.34, 1.56, 0.64, 1);
  }

  .loader-content::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(40, 167, 69, 0.1), transparent);
    animation: shimmer 2s infinite;
  }

  .circular-progress {
    position: relative;
    margin: 0 auto 2rem;
    width: 140px;
    height: 140px;
    background: radial-gradient(circle, rgba(40, 167, 69, 0.1), transparent);
    border-radius: 50%;
    padding: 10px;
    box-shadow:
      0 0 30px rgba(40, 167, 69, 0.2),
      inset 0 0 20px rgba(255, 255, 255, 0.1);
  }

  .progress-ring {
    transform: rotate(-90deg);
    filter: drop-shadow(0 0 15px rgba(40, 167, 69, 0.6));
  }

  .progress-ring-circle {
    stroke-dasharray: 326.7;
    stroke-dashoffset: 326.7;
    transition: stroke-dashoffset 0.8s cubic-bezier(0.4, 0, 0.2, 1);
    stroke-linecap: round;
    stroke: url(#progressGradient);
    stroke-width: 6;
  }

  .progress-text {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: radial-gradient(circle, rgba(255, 255, 255, 0.9), rgba(248, 249, 250, 0.8));
    border-radius: 50%;
    width: 80px;
    height: 80px;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  }

  .percentage {
    font-size: 1.8rem;
    font-weight: 800;
    background: linear-gradient(135deg, #28a745, #20c997);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    animation: textGlow 2s ease-in-out infinite alternate;
  }

  .loader-icons {
    margin-bottom: 2rem;
    padding: 1rem;
    background: rgba(248, 249, 250, 0.5);
    border-radius: 15px;
    backdrop-filter: blur(10px);
  }

  .icon-row {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin-bottom: 15px;
  }

  .completed-icon {
    color: #28a745;
    font-size: 1.5rem;
    background: rgba(40, 167, 69, 0.1);
    padding: 8px;
    border-radius: 50%;
    animation: bounceIn 0.8s ease, pulse 2s infinite;
    box-shadow: 0 0 15px rgba(40, 167, 69, 0.3);
  }

  .processing-icon {
    color: #007bff;
    font-size: 1.5rem;
    background: rgba(0, 123, 255, 0.1);
    padding: 8px;
    border-radius: 50%;
    box-shadow: 0 0 15px rgba(0, 123, 255, 0.3);
  }

  .pending-icon {
    color: #6c757d;
    font-size: 1.5rem;
    background: rgba(108, 117, 125, 0.1);
    padding: 8px;
    border-radius: 50%;
    opacity: 0.6;
    animation: pending-pulse 1.5s infinite;
  }

  .rotating {
    animation: rotate 2s linear infinite;
  }

  .loader-status h4 {
    background: linear-gradient(135deg, #2c3e50, #34495e);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    font-weight: 700;
    font-size: 1.5rem;
    margin-bottom: 1rem;
  }

  .status-message {
    color: #495057;
    font-size: 1.1rem;
    font-weight: 500;
    padding: 0.5rem 1rem;
    background: rgba(73, 80, 87, 0.1);
    border-radius: 20px;
    display: inline-block;
  }

  .progress-details {
    margin-top: 1.5rem;
    padding: 1rem;
    background: linear-gradient(135deg, rgba(40, 167, 69, 0.1), rgba(32, 201, 151, 0.1));
    border-radius: 15px;
    border: 1px solid rgba(40, 167, 69, 0.2);
  }

  .progress-details small {
    font-size: 1rem;
    font-weight: 600;
    color: #495057;
  }

  .title-container {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 15px;
    margin-bottom: 1rem;
  }

  .rocket-emoji {
    font-size: 2rem;
    animation: rocket-float 2s ease-in-out infinite alternate;
  }

  .progress-numbers {
    font-size: 1.2rem;
    font-weight: 700;
    background: linear-gradient(135deg, #28a745, #20c997);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    padding: 0.5rem;
  }

  @keyframes rocket-float {
    0% { transform: translateY(0px) rotate(-3deg); }
    100% { transform: translateY(-8px) rotate(3deg); }
  }

  .loading-dots {
    display: flex;
    justify-content: center;
    gap: 5px;
    margin-top: 1.5rem;
  }

  .loading-dots span {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: #28a745;
    animation: dot-pulse 1.4s infinite both;
  }

  .loading-dots span:nth-child(2) {
    animation-delay: 0.2s;
  }

  .loading-dots span:nth-child(3) {
    animation-delay: 0.4s;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes scaleIn {
    from {
      opacity: 0;
      transform: scale(0.8);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  @keyframes rotate {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  @keyframes bounceIn {
    0% {
      opacity: 0;
      transform: scale(0.3);
    }
    50% {
      opacity: 1;
      transform: scale(1.05);
    }
    70% {
      transform: scale(0.9);
    }
    100% {
      opacity: 1;
      transform: scale(1);
    }
  }

  @keyframes dot-pulse {
    0%, 80%, 100% {
      transform: scale(0);
      opacity: 0.5;
    }
    40% {
      transform: scale(1);
      opacity: 1;
    }
  }

  @keyframes shimmer {
    0% { left: -100%; }
    100% { left: 100%; }
  }

  @keyframes textGlow {
    0% { text-shadow: 0 0 10px rgba(40, 167, 69, 0.5); }
    100% { text-shadow: 0 0 20px rgba(40, 167, 69, 0.8), 0 0 30px rgba(40, 167, 69, 0.3); }
  }

  @keyframes pending-pulse {
    0%, 100% { opacity: 0.6; transform: scale(1); }
    50% { opacity: 0.3; transform: scale(0.95); }
  }

  @keyframes pulse {
    0%, 100% { box-shadow: 0 0 15px rgba(40, 167, 69, 0.3); }
    50% { box-shadow: 0 0 25px rgba(40, 167, 69, 0.6), 0 0 35px rgba(40, 167, 69, 0.2); }
  }

  /* Simple Loader Styles */
  .rotating-icon {
    animation: rotate 2s linear infinite;
  }

  .simple-loader-container {
    max-width: 400px;
    margin: 0 auto;
  }

  .progress-container {
    margin: 1.5rem 0;
  }

  /* Modal width adjustments for better action button display */
  #deliveryAssignmentsModal .modal-xl {
    max-width: 1400px;
  }

  #deliveryAssignmentsModal .table th:last-child,
  #deliveryAssignmentsModal .table td:last-child {
    width: 140px;
    min-width: 140px;
  }

  #deliveryAssignmentsModal .btn-group {
    display: flex;
    gap: 5px;
  }

  #deliveryAssignmentsModal .btn-group .btn {
    flex: 0 0 auto;
    min-width: 35px;
  }

  /* Ensure action buttons don't wrap */
  @media (max-width: 1399px) {
    #deliveryAssignmentsModal .modal-xl {
      max-width: 95vw;
    }
  }

  @media (max-width: 991px) {
    #deliveryAssignmentsModal .table th:last-child,
    #deliveryAssignmentsModal .table td:last-child {
      width: 100px;
      min-width: 100px;
    }

    #deliveryAssignmentsModal .btn-group .btn {
      min-width: 30px;
      padding: 0.25rem 0.4rem;
      font-size: 0.8rem;
    }
  }
</style>

<!-- Delivery Assignments Modal -->
<div class="modal fade" id="deliveryAssignmentsModal" tabindex="-1" aria-labelledby="deliveryAssignmentsModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl">
    <div class="modal-content" id="deliveryAssignmentsModalContent">
      <!-- Content will be loaded dynamically -->
      <div class="modal-body text-center py-5">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3 text-muted">Loading delivery assignments...</p>
      </div>
    </div>
  </div>
</div>

<!-- Simple Attractive Loader Modal -->
<div class="modal fade show" id="bigLoaderModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false" style="display: none;">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content border-0 shadow-lg" style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(10px); border-radius: 20px;">
      <div class="modal-body text-center py-5 px-4">
        <div class="simple-loader-container">
          <!-- Animated Icon -->
          <div class="loader-icon-container mb-4">
            <div class="rotating-icon">
              <i class="fas fa-sync-alt" style="font-size: 3rem; color: #28a745;"></i>
            </div>
          </div>

          <!-- Title -->
          <h4 class="mb-3" style="color: #2c3e50; font-weight: 600;">
            🚀 Completing Assignments
          </h4>

          <!-- Progress Bar -->
          <div class="progress-container mb-4">
            <div class="progress" style="height: 12px; border-radius: 10px; background: #e9ecef;">
              <div class="progress-bar progress-bar-striped progress-bar-animated"
                   role="progressbar"
                   style="width: 0%; background: linear-gradient(45deg, #28a745, #20c997); border-radius: 10px;"
                   id="simple-progress-bar">
              </div>
            </div>
            <div class="progress-text mt-2">
              <span class="percentage-simple" style="font-size: 1.2rem; font-weight: bold; color: #28a745;">0%</span>
            </div>
          </div>

          <!-- Status -->
          <p class="status-message-simple mb-3" style="color: #6c757d; font-size: 1rem;">
            Processing pending assignments...
          </p>

          <!-- Counter -->
          <div class="counter-simple" style="background: rgba(40, 167, 69, 0.1); padding: 0.8rem; border-radius: 10px; color: #495057; font-weight: 600;">
            <span id="completed-count-simple">0</span> of <span id="total-count-simple">0</span> completed
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Filter Loading Modal -->
<div class="modal fade" id="filterLoaderModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content border-0 shadow-lg" style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(10px); border-radius: 20px;">
      <div class="modal-body text-center py-5 px-4">
        <div class="simple-loader-container">
          <!-- Animated Icon -->
          <div class="loader-icon-container mb-4">
            <div class="rotating-icon">
              <i class="fas fa-filter" style="font-size: 3rem; color: #007bff;"></i>
            </div>
          </div>

          <!-- Title -->
          <h4 class="mb-3" style="color: #2c3e50; font-weight: 600;">
            🔍 Filtering Data
          </h4>

          <!-- Progress Bar -->
          <div class="progress-container mb-4">
            <div class="progress" style="height: 12px; border-radius: 10px; background: #e9ecef;">
              <div class="progress-bar progress-bar-striped progress-bar-animated"
                   role="progressbar"
                   style="width: 0%; background: linear-gradient(45deg, #007bff, #0056b3); border-radius: 10px;"
                   id="filter-progress-bar">
              </div>
            </div>
            <div class="progress-text mt-2">
              <span class="filter-percentage" style="font-size: 1.2rem; font-weight: bold; color: #007bff;">0%</span>
            </div>
          </div>

          <!-- Status -->
          <p class="filter-status-message" style="color: #6c757d; font-size: 1rem;">
            Loading customer patterns...
          </p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const modal = new bootstrap.Modal(document.getElementById('deliveryAssignmentsModal'));
  const modalContent = document.getElementById('deliveryAssignmentsModalContent');
  const completeAllBtn = document.getElementById('completeAllTillTodayBtn');
  const pendingCountDisplay = document.getElementById('pending-count-display');
  let editModal;

  // Load pending count and show/hide complete all button
  function loadPendingCount() {
    const month = completeAllBtn.dataset.month;
    const year = completeAllBtn.dataset.year;
    const deliveryPersonId = completeAllBtn.dataset.deliveryPersonId;

    const params = new URLSearchParams({ month, year });
    if (deliveryPersonId) {
      params.append('delivery_person_id', deliveryPersonId);
    }

    fetch(`<%= get_pending_count_customer_patterns_path %>?${params}`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.pending_count > 0) {
        pendingCountDisplay.textContent = data.pending_count;
        completeAllBtn.style.display = 'block';
      } else {
        completeAllBtn.style.display = 'none';
      }
    })
    .catch(error => {
      console.error('Error loading pending count:', error);
    });
  }

  // Show attractive success message
  function showSuccessMessage(message, details) {
    const alertHtml = `
      <div class="alert alert-success alert-dismissible fade show shadow-sm" role="alert" style="position: fixed; top: 20px; right: 20px; z-index: 9999; min-width: 400px;">
        <div class="d-flex align-items-center">
          <div class="me-3">
            <i class="fas fa-check-circle fs-2 text-success"></i>
          </div>
          <div>
            <h6 class="alert-heading mb-1">Bulk Complete Successful!</h6>
            <p class="mb-1">${message}</p>
            <small class="text-muted">${details}</small>
          </div>
        </div>
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      </div>
    `;

    document.body.insertAdjacentHTML('beforeend', alertHtml);

    // Auto-remove after 5 seconds
    setTimeout(() => {
      const alert = document.querySelector('.alert-success');
      if (alert) {
        alert.remove();
      }
    }, 5000);
  }

  // Simple Loader Modal functionality
  const bigLoaderModal = new bootstrap.Modal(document.getElementById('bigLoaderModal'));
  const progressBar = document.getElementById('simple-progress-bar');
  const percentageDisplay = document.querySelector('.percentage-simple');
  const completedCountDisplay = document.getElementById('completed-count-simple');
  const totalCountDisplay = document.getElementById('total-count-simple');
  const statusMessage = document.querySelector('.status-message-simple');

  function updateProgress(completed, total) {
    const percentage = Math.round((completed / total) * 100);

    progressBar.style.width = `${percentage}%`;
    percentageDisplay.textContent = `${percentage}%`;
    completedCountDisplay.textContent = completed;
    totalCountDisplay.textContent = total;
  }

  function simulateProgress(totalCount, onComplete) {
    let completed = 0;
    const interval = Math.max(50, Math.min(500, 3000 / totalCount)); // Adaptive speed

    const progressInterval = setInterval(() => {
      completed += Math.random() > 0.7 ? 2 : 1; // Realistic progress simulation

      if (completed >= totalCount) {
        completed = totalCount;
        updateProgress(completed, totalCount);
        statusMessage.textContent = 'Finalizing completion...';
        clearInterval(progressInterval);
        setTimeout(onComplete, 800);
      } else {
        updateProgress(completed, totalCount);

        // Update status messages based on progress
        if (completed < totalCount * 0.3) {
          statusMessage.textContent = 'Starting assignment completion...';
        } else if (completed < totalCount * 0.7) {
          statusMessage.textContent = 'Processing assignments...';
        } else {
          statusMessage.textContent = 'Nearly finished...';
        }
      }
    }, interval);
  }

  // Complete all till today functionality
  completeAllBtn.addEventListener('click', function() {
    const month = this.dataset.month;
    const year = this.dataset.year;
    const deliveryPersonId = this.dataset.deliveryPersonId;
    const pendingCount = parseInt(pendingCountDisplay.textContent);

    const confirmMessage = deliveryPersonId ?
      `Are you sure you want to complete all ${pendingCount} pending assignments till today for the selected delivery person?` :
      `Are you sure you want to complete all ${pendingCount} pending assignments till today for ALL customers and delivery people?`;

    if (confirm(confirmMessage + '\\n\\nThis will mark all pending assignments up to today as completed.')) {
      // Show big attractive loader
      bigLoaderModal.show();
      updateProgress(0, pendingCount);

      console.log('Starting API call to complete assignments...');

      // Make actual API call immediately (not after simulation)
      const params = { month, year };
      if (deliveryPersonId) {
        params.delivery_person_id = deliveryPersonId;
      }

      // Start progress simulation
      simulateProgress(pendingCount, () => {
        console.log('Progress simulation completed');
      });

      // Make API call in parallel
      fetch(`<%= complete_all_till_today_customer_patterns_path %>`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'X-Requested-With': 'XMLHttpRequest',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify(params)
      })
      .then(response => {
        console.log('API Response received:', response.status);
        return response.json();
      })
      .then(data => {
        console.log('API Data:', data);

        // Wait for progress to finish, then hide loader
        setTimeout(() => {
          bigLoaderModal.hide();

          if (data.success) {
            showSuccessMessage(
              data.message,
              `Affected: ${data.customers_affected} customers, ${data.delivery_people_affected} delivery people`
            );

            // Reload the page to update all counters and patterns
            setTimeout(() => {
              window.location.reload();
            }, 2000);
          } else {
            alert('❌ ' + data.message);
          }
        }, 3000); // Wait 3 seconds for progress to complete
      })
      .catch(error => {
        console.error('API Error:', error);
        bigLoaderModal.hide();
        alert('❌ Error completing assignments. Please try again.');
      });
    }
  });

  // Load pending count on page load and when filters change
  loadPendingCount();

  // Filter loader functionality
  const filterLoaderModal = new bootstrap.Modal(document.getElementById('filterLoaderModal'));
  const filterProgressBar = document.getElementById('filter-progress-bar');
  const filterPercentageDisplay = document.querySelector('.filter-percentage');

  function updateFilterProgress(percentage) {
    filterProgressBar.style.width = `${percentage}%`;
    filterPercentageDisplay.textContent = `${percentage}%`;
  }

  function simulateFilterProgress() {
    let progress = 0;
    const interval = setInterval(() => {
      progress += Math.random() * 15 + 5; // Random progress between 5-20%

      if (progress >= 100) {
        progress = 100;
        updateFilterProgress(progress);
        clearInterval(interval);
        // Hide loader after completion (form will submit naturally)
        setTimeout(() => {
          filterLoaderModal.hide();
        }, 500);
      } else {
        updateFilterProgress(Math.floor(progress));
      }
    }, 200);
  }

  // Reload pending count when form is submitted (filters change)
  document.querySelector('form').addEventListener('submit', function(e) {
    // Show filter loader modal
    filterLoaderModal.show();
    updateFilterProgress(0);
    simulateFilterProgress();

    setTimeout(loadPendingCount, 500);
  });

  // Initialize tooltips
  function initializeTooltips() {
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
      return new bootstrap.Tooltip(tooltipTriggerEl);
    });
  }

  // Show success/error messages
  function showMessage(message, type = 'success') {
    const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
    const messageHtml = `
      <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      </div>
    `;

    const existingAlert = modalContent.querySelector('.alert');
    if (existingAlert) {
      existingAlert.remove();
    }

    const modalBody = modalContent.querySelector('.modal-body');
    if (modalBody) {
      modalBody.insertAdjacentHTML('afterbegin', messageHtml);
    }
  }

  // Reload modal content
  function reloadModalContent(customerId, month, year) {
    fetch(`<%= customer_deliveries_customer_patterns_path %>?customer_id=${customerId}&month=${month}&year=${year}`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      }
    })
    .then(response => response.json())
    .then(data => {
      modalContent.innerHTML = data.html;
      initializeTooltips();
      attachModalEventListeners();
    })
    .catch(error => {
      console.error('Error:', error);
      showMessage('❌ Error reloading assignments', 'error');
    });
  }


  // Remove All button click handler (defined outside to avoid duplication)
  function handleRemoveAllClick() {
    const customerId = this.dataset.customerId;
    const customerName = this.dataset.customerName;
    const month = this.dataset.month;
    const year = this.dataset.year;
    const totalCount = this.dataset.totalCount;

    console.log('Remove all button clicked for customer:', customerName);

    if (confirm(`⚠️ DANGER: Are you sure you want to REMOVE ALL ${totalCount} assignments for ${customerName}?\\n\\nThis will PERMANENTLY DELETE all delivery assignments for this customer in the selected month.\\n\\nThis action CANNOT be undone!`)) {

      // Show loader in button
      const originalText = this.innerHTML;
      this.disabled = true;
      this.innerHTML = `
        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
        Removing...
      `;

      fetch(`<%= remove_all_assignments_customer_patterns_path %>`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'X-Requested-With': 'XMLHttpRequest',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({
          customer_id: customerId,
          month: month,
          year: year
        })
      })
      .then(response => response.json())
      .then(data => {
        // Restore button state
        this.disabled = false;
        this.innerHTML = originalText;

        if (data.success) {
          // Show success state in button briefly
          this.innerHTML = `✅ Removed Successfully!`;
          this.classList.remove('btn-danger');
          this.classList.add('btn-success');

          showMessage(data.message, 'success');

          // Close modal and reload page to reflect changes
          setTimeout(() => {
            modal.hide();
            setTimeout(() => {
              window.location.reload();
            }, 500);
          }, 1500);
        } else {
          showMessage(data.message, 'error');
        }
      })
      .catch(error => {
        // Restore button state on error
        this.disabled = false;
        this.innerHTML = originalText;

        console.error('Error:', error);
        showMessage('❌ Error removing assignments', 'error');
      });
    }
  }

  // Also add event delegation for dynamically loaded content
  document.addEventListener('click', function(e) {
    if (e.target.closest('.remove-all-assignments-btn')) {
      const button = e.target.closest('.remove-all-assignments-btn');
      console.log('Event delegation caught remove all button click');
      handleRemoveAllClick.call(button);
    }
  });

  // Continue with other modal event listeners
  function attachModalEventListeners() {
    // Remove All Assignments button (look in entire modal, not just content)
    const removeAllBtn = document.querySelector('#deliveryAssignmentsModal .remove-all-assignments-btn');
    console.log('Looking for remove all button:', removeAllBtn);
    if (removeAllBtn) {
      // Remove existing event listener if any
      removeAllBtn.removeEventListener('click', handleRemoveAllClick);
      removeAllBtn.addEventListener('click', handleRemoveAllClick);
    }
    // Complete Till Today button
    const completeTillTodayBtn = modalContent.querySelector('.complete-till-today-btn');
    if (completeTillTodayBtn) {
      completeTillTodayBtn.addEventListener('click', function() {
        const customerId = this.dataset.customerId;
        const customerName = this.dataset.customerName;
        const month = this.dataset.month;
        const year = this.dataset.year;
        const totalCount = this.dataset.totalCount;

        if (confirm(`⚠️ DANGER: Are you sure you want to REMOVE ALL ${totalCount} assignments for ${customerName}?\\n\\nThis will PERMANENTLY DELETE all delivery assignments for this customer in the selected month.\\n\\nThis action CANNOT be undone!`)) {

          // Show loader in button
          const originalText = this.innerHTML;
          this.disabled = true;
          this.innerHTML = `
            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
            Removing...
          `;

          fetch(`<%= remove_all_assignments_customer_patterns_path %>`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json',
              'X-Requested-With': 'XMLHttpRequest',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
            },
            body: JSON.stringify({
              customer_id: customerId,
              month: month,
              year: year
            })
          })
          .then(response => response.json())
          .then(data => {
            // Restore button state
            this.disabled = false;
            this.innerHTML = originalText;

            if (data.success) {
              // Show success state in button briefly
              this.innerHTML = `✅ Removed Successfully!`;
              this.classList.remove('btn-danger');
              this.classList.add('btn-success');

              showMessage(data.message, 'success');

              // Close modal and reload page to reflect changes
              setTimeout(() => {
                modal.hide();
                setTimeout(() => {
                  window.location.reload();
                }, 500);
              }, 1500);
            } else {
              showMessage(data.message, 'error');
            }
          })
          .catch(error => {
            // Restore button state on error
            this.disabled = false;
            this.innerHTML = originalText;

            console.error('Error:', error);
            showMessage('❌ Error removing assignments', 'error');
          });
        }
      });
    }

    // Edit assignment buttons
    modalContent.querySelectorAll('.edit-assignment-btn').forEach(function(button) {
      button.addEventListener('click', function() {
        const assignmentId = this.dataset.assignmentId;

        fetch(`/customer-patterns/${assignmentId}/edit_assignment`, {
          method: 'GET',
          headers: {
            'Accept': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
          }
        })
        .then(response => response.json())
        .then(data => {
          // Create or show edit modal
          let editModalEl = document.getElementById('editAssignmentModal');
          if (!editModalEl) {
            editModalEl = document.createElement('div');
            editModalEl.className = 'modal fade';
            editModalEl.id = 'editAssignmentModal';
            editModalEl.setAttribute('tabindex', '-1');
            editModalEl.innerHTML = '<div class="modal-dialog"><div class="modal-content" id="editAssignmentModalContent"></div></div>';
            document.body.appendChild(editModalEl);
          }

          document.getElementById('editAssignmentModalContent').innerHTML = data.html;
          editModal = new bootstrap.Modal(editModalEl);
          editModal.show();

          // Attach save button listener
          const saveBtn = editModalEl.querySelector('.save-assignment-btn');
          if (saveBtn) {
            saveBtn.addEventListener('click', function() {
              const form = editModalEl.querySelector('#edit-assignment-form');
              const formData = new FormData(form);

              fetch(`/customer-patterns/${assignmentId}/update_assignment`, {
                method: 'PATCH',
                headers: {
                  'Accept': 'application/json',
                  'X-Requested-With': 'XMLHttpRequest',
                  'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                },
                body: formData
              })
              .then(response => response.json())
              .then(data => {
                if (data.success) {
                  editModal.hide();
                  showMessage(data.message, 'success');
                  const customerId = completeTillTodayBtn?.dataset.customerId;
                  const month = completeTillTodayBtn?.dataset.month;
                  const year = completeTillTodayBtn?.dataset.year;
                  if (customerId) {
                    reloadModalContent(customerId, month, year);
                  }
                } else {
                  // Show error in edit modal
                  const editModalBody = editModalEl.querySelector('.modal-body');
                  const existingAlert = editModalBody.querySelector('.alert');
                  if (existingAlert) {
                    existingAlert.remove();
                  }
                  editModalBody.insertAdjacentHTML('afterbegin', `
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                      ${data.message}
                      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                  `);
                }
              })
              .catch(error => {
                console.error('Error:', error);
                showMessage('❌ Error updating assignment', 'error');
              });
            });
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showMessage('❌ Error loading edit form', 'error');
        });
      });
    });

    // Delete assignment buttons
    modalContent.querySelectorAll('.delete-assignment-btn').forEach(function(button) {
      button.addEventListener('click', function() {
        const assignmentId = this.dataset.assignmentId;
        const customerName = this.dataset.customerName;
        const scheduledDate = this.dataset.scheduledDate;

        if (confirm(`Are you sure you want to delete the assignment for ${customerName} on ${scheduledDate}?\\n\\nThis action cannot be undone.`)) {
          fetch(`/customer-patterns/${assignmentId}/delete_assignment`, {
            method: 'DELETE',
            headers: {
              'Accept': 'application/json',
              'X-Requested-With': 'XMLHttpRequest',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
            }
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              showMessage(data.message, 'success');
              const customerId = completeTillTodayBtn?.dataset.customerId;
              const month = completeTillTodayBtn?.dataset.month;
              const year = completeTillTodayBtn?.dataset.year;
              if (customerId) {
                reloadModalContent(customerId, month, year);
              }
            } else {
              showMessage(data.message, 'error');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            showMessage('❌ Error deleting assignment', 'error');
          });
        }
      });
    });
  }

  // Main view deliveries button click
  document.querySelectorAll('.view-deliveries-btn').forEach(function(button) {
    button.addEventListener('click', function(e) {
      e.preventDefault();

      const customerId = this.dataset.customerId;
      const customerName = this.dataset.customerName;
      const month = this.dataset.month;
      const year = this.dataset.year;

      // Show loading state
      modalContent.innerHTML = `
        <div class="modal-header">
          <h5 class="modal-title">📋 Loading Delivery Assignments - ${customerName}</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body text-center py-5">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
          <p class="mt-3 text-muted">Loading delivery assignments...</p>
        </div>
      `;

      // Show modal
      modal.show();

      // Fetch delivery assignments
      reloadModalContent(customerId, month, year);
    });
  });
});
</script>
