<% content_for :title, "Customer Patterns - #{@month_name}" %>

<style>
  .gradient-header {
    background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
    border-radius: 16px;
    box-shadow: 0 10px 25px rgba(79, 70, 229, 0.15);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .stats-card {
    background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    transform: translateY(0);
    transition: all 0.3s ease;
    border: 1px solid rgba(226, 232, 240, 0.8);
    position: relative;
    overflow: hidden;
  }

  .stats-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
  }

  .stats-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, #4f46e5, #7c3aed, #ec4899);
  }

  .nav-pills-modern {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-radius: 16px;
    padding: 8px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    border: 1px solid rgba(226, 232, 240, 0.5);
  }

  .nav-pills-modern .nav-link {
    background: transparent;
    border-radius: 12px;
    color: #64748b !important;
    transition: all 0.3s ease;
    margin: 0 4px;
    font-weight: 600;
    padding: 12px 20px;
    border: 1px solid transparent;
  }

  .nav-pills-modern .nav-link:hover {
    background: rgba(79, 70, 229, 0.1);
    color: #4f46e5 !important;
    border-color: rgba(79, 70, 229, 0.2);
  }

  .nav-pills-modern .nav-link.active {
    background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%) !important;
    color: white !important;
    box-shadow: 0 4px 15px rgba(79, 70, 229, 0.4);
    border-color: transparent;
  }

  .filter-card {
    background: rgba(255, 255, 255, 0.98);
    border-radius: 16px;
    border: 1px solid rgba(226, 232, 240, 0.8);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    backdrop-filter: blur(10px);
  }

  .filter-header {
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    border-bottom: 1px solid rgba(226, 232, 240, 0.5);
  }

  .table-modern {
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    border: 1px solid rgba(226, 232, 240, 0.8);
    background: white;
  }

  .table-modern thead th {
    background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
    border: none;
    padding: 16px 12px;
    font-weight: 700;
    letter-spacing: 0.5px;
    font-size: 12px;
    text-transform: uppercase;
  }

  .table-modern tbody tr {
    transition: all 0.3s ease;
    border: none;
  }

  .table-modern tbody tr:hover {
    background: linear-gradient(135deg, #f093fb10, #f5576c10);
    transform: scale(1.02);
    box-shadow: 0 8px 25px rgba(240, 147, 251, 0.1);
  }

  .avatar-modern {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: bold;
    font-size: 18px;
    box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
  }

  .badge-modern {
    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    border-radius: 20px;
    padding: 8px 15px;
    font-weight: 500;
    letter-spacing: 0.5px;
  }

  .btn-modern {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border: none;
    border-radius: 25px;
    padding: 10px 20px;
    color: white;
    transition: all 0.3s ease;
    box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
  }

  .btn-modern:hover {
    transform: translateY(-3px);
    box-shadow: 0 12px 30px rgba(102, 126, 234, 0.4);
    color: white;
  }

  .form-control-modern {
    border-radius: 15px;
    border: 2px solid #e0e7ff;
    transition: all 0.3s ease;
  }

  .form-control-modern:focus {
    border-color: #667eea;
    box-shadow: 0 0 20px rgba(102, 126, 234, 0.2);
  }

  .pulse-animation {
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
  }

  .floating-animation {
    animation: float 3s ease-in-out infinite;
  }

  @keyframes float {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-10px); }
  }

  /* Enhanced Search dropdown styles */
  .search-dropdown {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: white;
    border: 2px solid #e2e8f0;
    border-radius: 12px;
    box-shadow: 0 12px 35px rgba(79, 70, 229, 0.15), 0 4px 15px rgba(0, 0, 0, 0.1);
    z-index: 1050;
    max-height: 300px;
    overflow-y: auto;
    overflow-x: hidden;
    margin-top: 8px;
    animation: dropdownSlideIn 0.3s ease-out;
    backdrop-filter: blur(10px);
    border-top: 3px solid #4f46e5;
  }

  @keyframes dropdownSlideIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .search-dropdown-item {
    padding: 14px 18px;
    border-bottom: 1px solid #f1f5f9;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 14px;
    position: relative;
    overflow: hidden;
  }

  .search-dropdown-item:last-child {
    border-bottom: none;
  }

  .search-dropdown-item:hover,
  .search-dropdown-item.highlighted {
    background: linear-gradient(135deg, #4f46e5, #6366f1);
    color: white;
    transform: translateX(4px);
    padding-left: 22px;
  }

  .search-dropdown-item:hover .customer-avatar,
  .search-dropdown-item.highlighted .customer-avatar {
    background: rgba(255, 255, 255, 0.2);
    transform: scale(1.1);
  }

  .customer-avatar {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    background: linear-gradient(135deg, #4f46e5, #7c3aed);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: bold;
    font-size: 14px;
    box-shadow: 0 2px 8px rgba(79, 70, 229, 0.3);
    transition: all 0.3s ease;
  }

  .search-dropdown-no-results {
    padding: 20px;
    text-align: center;
    color: #64748b;
    font-size: 14px;
    background: linear-gradient(135deg, #f8fafc, #f1f5f9);
  }

  /* Compact spacing for professional look */
  .container-fluid {
    max-width: 1400px;
    margin: 0 auto;
  }
</style>

<div class="container-fluid">

  <!-- Modern Header with Gradient Stats -->
  <div class="row mb-4">
    <div class="col-12">
      <div class="card gradient-header border-0">
        <div class="card-body p-4">
          <div class="row align-items-center">
            <div class="col-md-4">
              <h3 class="mb-2 text-white floating-animation" style="font-weight: 700;">
                <i class="fas fa-chart-line me-3"></i>Customer Patterns
              </h3>
              <p class="text-white-50 mb-0">Analytics for <%= @month_name %></p>
            </div>
            <div class="col-md-8">
              <div class="row g-3">
                <div class="col-md-4">
                  <div class="stats-card text-center p-4">
                    <div class="d-flex justify-content-between align-items-start mb-3">
                      <div class="text-start">
                        <div class="text-muted small fw-semibold text-uppercase">Total</div>
                        <div class="h2 fw-bold text-dark mb-0"><%= @total_customers %></div>
                      </div>
                      <div class="p-2 rounded-circle" style="background: linear-gradient(135deg, #4f46e5, #7c3aed); width: 40px; height: 40px; display: flex; align-items: center; justify-content: center;">
                        <i class="fas fa-users text-white" style="font-size: 16px;"></i>
                      </div>
                    </div>
                    <div class="text-muted small">All Customers</div>
                  </div>
                </div>
                <div class="col-md-4">
                  <div class="stats-card text-center p-4">
                    <div class="d-flex justify-content-between align-items-start mb-3">
                      <div class="text-start">
                        <div class="text-muted small fw-semibold text-uppercase">Regular</div>
                        <div class="h2 fw-bold mb-0" style="color: #10b981;"><%= @regular_count %></div>
                      </div>
                      <div class="p-2 rounded-circle" style="background: linear-gradient(135deg, #10b981, #059669); width: 40px; height: 40px; display: flex; align-items: center; justify-content: center;">
                        <i class="fas fa-check-circle text-white" style="font-size: 16px;"></i>
                      </div>
                    </div>
                    <div class="text-muted small">Consistent Patterns</div>
                  </div>
                </div>
                <div class="col-md-4">
                  <div class="stats-card text-center p-4">
                    <div class="d-flex justify-content-between align-items-start mb-3">
                      <div class="text-start">
                        <div class="text-muted small fw-semibold text-uppercase">Irregular</div>
                        <div class="h2 fw-bold mb-0" style="color: #f59e0b;"><%= @irregular_count %></div>
                      </div>
                      <div class="p-2 rounded-circle" style="background: linear-gradient(135deg, #f59e0b, #d97706); width: 40px; height: 40px; display: flex; align-items: center; justify-content: center;">
                        <i class="fas fa-chart-line text-white" style="font-size: 16px;"></i>
                      </div>
                    </div>
                    <div class="text-muted small">Variable Patterns</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Modern Filter Tabs -->
  <div class="row mb-3">
    <div class="col-12">
      <nav class="nav nav-pills nav-pills-modern justify-content-center">
        <%= link_to customer_patterns_path(month: @current_month, year: @current_year, delivery_person_id: @delivery_person_id, customer_id: @customer_id, customer_name: @customer_name),
            class: "nav-link #{'active' if params[:pattern].blank?}" do %>
          <i class="fas fa-users me-2"></i>All (<%= @total_customers %>)
        <% end %>

        <%= link_to customer_patterns_path(month: @current_month, year: @current_year, delivery_person_id: @delivery_person_id, customer_id: @customer_id, customer_name: @customer_name, pattern: 'regular'),
            class: "nav-link #{'active' if params[:pattern] == 'regular'}" do %>
          <i class="fas fa-check-circle me-2"></i>Regular (<%= @regular_count %>)
        <% end %>

        <%= link_to customer_patterns_path(month: @current_month, year: @current_year, delivery_person_id: @delivery_person_id, customer_id: @customer_id, customer_name: @customer_name, pattern: 'irregular'),
            class: "nav-link #{'active' if params[:pattern] == 'irregular'}" do %>
          <i class="fas fa-chart-line me-2"></i>Irregular (<%= @irregular_count %>)
        <% end %>
      </nav>
    </div>
  </div>

  <!-- Modern Filters -->
  <div class="row mb-3">
    <div class="col-12">
      <div class="card filter-card border-0">
        <div class="card-body p-3">
          <%= form_with url: customer_patterns_path, method: :get, local: true, class: "row g-4", id: "patterns-filter-form" do |form| %>
            <div class="col-md-2">
              <label class="form-label fw-bold text-dark mb-3">Customer Name</label>
              <div class="position-relative">
                <%= form.select :customer_id,
                    options_from_collection_for_select(@customers || [], :id, :name, @customer_id),
                    { prompt: "👥 Select Customer" },
                    { class: "form-select form-control-modern",
                      id: "customerDropdown",
                      onchange: "this.form.submit();" } %>
                <%= render 'shared/super_attractive_loader', loader_id: 'superCustomerPatternsLoader', loading_text: 'Analyzing Customer Patterns' %>
              </div>
            </div>

            <div class="col-md-2">
              <label class="form-label fw-bold text-dark mb-3">Delivery Person</label>
              <%= form.select :delivery_person_id,
                  options_from_collection_for_select(@delivery_people, :id, :name, @delivery_person_id),
                  { prompt: "🚚 All Delivery Staff" },
                  { class: "form-select form-control-modern" } %>
            </div>

            <div class="col-md-2">
              <label class="form-label fw-bold text-dark mb-3">Month</label>
              <%= form.select :month,
                  options_for_select((1..12).map { |m| [Date::MONTHNAMES[m], m] }, @current_month),
                  { prompt: "📅 Select Month" },
                  { class: "form-select form-control-modern" } %>
            </div>

            <div class="col-md-2">
              <label class="form-label fw-bold text-dark mb-3">Year</label>
              <%= form.select :year,
                  options_for_select((2023..Date.current.year+1).map { |y| [y, y] }, @current_year),
                  { prompt: "🗓️ Select Year" },
                  { class: "form-select form-control-modern" } %>
            </div>

            <div class="col-md-4 d-flex align-items-end">
              <div class="d-flex gap-3 w-100">
                <%= form.submit "🔍 Apply Filters",
                    class: "btn btn-modern flex-fill" %>
                <%= link_to customer_patterns_path,
                    class: "btn btn-outline-danger",
                    style: "border-radius: 25px; padding: 10px 20px;",
                    title: "Clear Filters" do %>
                  <i class="fas fa-times me-2"></i>Clear
                <% end %>
              </div>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>

  <!-- Customer Delivery Patterns Table -->
  <div class="row">
    <div class="col-12">
      <div class="table-responsive">
        <table class="table table-modern mb-0">
              <thead>
                <tr>
                  <th class="text-nowrap fw-bold text-white" style="font-size: 14px; letter-spacing: 1px;">
                    <i class="fas fa-user-circle me-2"></i>CUSTOMER INFO
                  </th>
                  <th class="text-nowrap fw-bold text-white" style="font-size: 14px; letter-spacing: 1px;">
                    <i class="fas fa-shipping-fast me-2"></i>DELIVERY STAFF
                  </th>
                  <th class="text-nowrap fw-bold text-white" style="font-size: 14px; letter-spacing: 1px;">
                    <i class="fas fa-tint me-2"></i>TOTAL LITERS
                  </th>
                  <th class="text-nowrap fw-bold text-white" style="font-size: 14px; letter-spacing: 1px;">
                    <i class="fas fa-flask me-2"></i>SCHEDULED QTY
                  </th>
                  <th class="text-nowrap fw-bold text-white" style="font-size: 14px; letter-spacing: 1px;">
                    <i class="fas fa-calendar-alt me-2"></i>ACTIVE DAYS
                  </th>
                  <th class="text-nowrap fw-bold text-white" style="font-size: 14px; letter-spacing: 1px;">
                    <i class="fas fa-rupee-sign me-2"></i>TOTAL AMOUNT
                  </th>
                  <th class="text-nowrap fw-bold text-white" style="font-size: 14px; letter-spacing: 1px;">
                    <i class="fas fa-chart-line me-2"></i>PATTERN STATUS
                  </th>
                  <th class="text-nowrap fw-bold text-center text-white" style="font-size: 14px; letter-spacing: 1px;">
                    <i class="fas fa-tools me-2"></i>ACTIONS
                  </th>
                </tr>
              </thead>
              <tbody>
                <% if @customer_patterns.any? %>
                  <% @customer_patterns.each do |data| %>
                    <tr class="customer-pattern-row">
                      <td class="align-middle p-4">
                        <div class="d-flex align-items-center">
                          <div class="avatar-modern me-3">
                            <%= data[:customer].name.first.upcase %>
                          </div>
                          <div class="flex-grow-1">
                            <div class="fw-bold text-dark mb-1" style="font-size: 16px;"><%= data[:customer].name %></div>
                            <small class="text-muted">🆔 <%= data[:customer].id %></small>
                          </div>
                        </div>
                      </td>
                      <td class="align-middle text-center p-4">
                        <div class="badge badge-modern" style="background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); font-size: 12px;">
                          <i class="fas fa-user-tie me-1"></i><%= data[:delivery_person_name] %>
                        </div>
                      </td>
                      <td class="align-middle text-center p-4">
                        <div class="d-flex flex-column align-items-center gap-2">
                          <div class="fw-bold text-primary" style="font-size: 18px; background: linear-gradient(135deg, #667eea, #764ba2); -webkit-background-clip: text; -webkit-text-fill-color: transparent;">
                            <%= data[:total_liters] %> L
                          </div>
                          <% if data[:primary_product] %>
                            <div class="badge" style="background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%); color: #333; font-size: 10px;">
                              🥛 <%= truncate(data[:primary_product].name, length: 12) %>
                            </div>
                          <% end %>
                        </div>
                      </td>
                      <td class="align-middle text-center p-4">
                        <div class="d-flex flex-column align-items-center gap-2">
                          <div class="fw-bold" style="font-size: 18px; background: linear-gradient(135deg, #4facfe, #00f2fe); -webkit-background-clip: text; -webkit-text-fill-color: transparent;">
                            <%= data[:scheduled_quantity] || 0 %> L
                          </div>
                          <% if data[:scheduled_product] %>
                            <div class="badge" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); font-size: 10px;">
                              📦 <%= truncate(data[:scheduled_product], length: 10) %>
                            </div>
                          <% else %>
                            <div class="badge bg-warning text-dark" style="font-size: 10px;">⚠️ Not Set</div>
                          <% end %>
                        </div>
                      </td>
                      <td class="align-middle text-center p-4">
                        <div class="d-flex flex-column align-items-center gap-2">
                          <div class="badge badge-modern" style="background: linear-gradient(135deg, #fa709a 0%, #fee140 100%); font-size: 12px;">
                            📅 <%= data[:days_delivered] %> DAYS
                          </div>
                          <small class="text-muted fw-bold">
                            🎯 <%= data[:total_assignments] %> assignments
                          </small>
                        </div>
                      </td>
                      <td class="align-middle text-center p-4">
                        <div class="fw-bold" style="font-size: 20px; background: linear-gradient(135deg, #11998e, #38ef7d); -webkit-background-clip: text; -webkit-text-fill-color: transparent;">
                          💰₹<%= number_with_precision(data[:estimated_amount] || 0, precision: 0) %>
                        </div>
                      </td>
                      <td class="align-middle text-center p-4">
                        <div class="d-flex flex-column align-items-center gap-2">
                          <% case data[:pattern] %>
                          <% when 'regular' %>
                            <div class="badge badge-modern pulse-animation" style="background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%); font-size: 12px;">
                              ✅ REGULAR
                            </div>
                          <% when 'irregular' %>
                            <div class="badge badge-modern pulse-animation" style="background: linear-gradient(135deg, #ee0979 0%, #ff6a00 100%); font-size: 12px;">
                              ⚠️ IRREGULAR
                            </div>
                          <% end %>
                          <small class="text-muted text-center fw-bold">
                            📊 <%= truncate(data[:pattern_description], length: 20) %>
                          </small>
                        </div>
                      </td>
                      <td class="align-middle text-center p-4">
                        <div class="d-flex gap-2 justify-content-center flex-wrap">
                          <%= link_to customer_path(data[:customer]),
                              class: "btn btn-modern",
                              style: "padding: 8px 12px; font-size: 12px;",
                              title: "View Customer Profile",
                              data: { bs_toggle: "tooltip" } do %>
                            <i class="fas fa-user me-1"></i>Profile
                          <% end %>

                          <button type="button"
                                  class="btn delivery-modal-btn"
                                  style="background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); border: none; color: white; border-radius: 25px; padding: 8px 12px; font-size: 12px;"
                                  data-bs-target="#deliveryModal"
                                  data-customer-id="<%= data[:customer].id %>"
                                  data-customer-name="<%= data[:customer].name %>"
                                  data-month="<%= @current_month %>"
                                  data-year="<%= @current_year %>"
                                  title="View Deliveries">
                            <i class="fas fa-truck me-1"></i>Deliveries
                          </button>

                          <% if data[:pattern] == 'regular' %>
                            <button type="button"
                                    class="btn edit-pattern-btn"
                                    style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); border: none; color: white; border-radius: 25px; padding: 8px 12px; font-size: 12px; transition: all 0.3s ease;"
                                    data-customer-id="<%= data[:customer].id %>"
                                    data-customer-name="<%= data[:customer].name %>"
                                    data-scheduled-quantity="<%= data[:scheduled_quantity] || 0 %>"
                                    data-scheduled-product="<%= data[:scheduled_product] %>"
                                    data-month="<%= @current_month %>"
                                    data-year="<%= @current_year %>"
                                    title="Edit Pattern"
                                    data-action="edit-pattern"
                                    onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 8px 25px rgba(240, 147, 251, 0.4)';"
                                    onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 8px 20px rgba(240, 147, 251, 0.3)';">
                              <i class="fas fa-edit me-1"></i>Edit
                            </button>
                          <% end %>
                        </div>
                      </td>
                    </tr>
                  <% end %>
                <% else %>
                  <tr>
                    <td colspan="9" class="text-center py-4">
                      <div class="py-2">
                        <i class="fas fa-search fs-2 text-muted mb-2"></i>
                        <h6 class="text-muted">No customer data found for <%= @month_name %></h6>
                        <p class="text-muted small">Try selecting a different month or check if there are any completed deliveries.</p>
                      </div>
                    </td>
                  </tr>
                <% end %>
              </tbody>
            </table>
          </div>
    </div>
  </div>

  <!-- Edit Customer Pattern Modal -->
  <div id="editPatternModal" class="custom-modal" style="display: none;">
    <div class="custom-modal-backdrop" onclick="closeEditPatternModal()"></div>
    <div class="custom-edit-modal-content">
      <div class="custom-modal-header">
        <h5 class="custom-modal-title">
          <i class="fas fa-edit me-2"></i>
          <span id="editPatternModalTitle">Edit Customer Pattern</span>
        </h5>
        <button type="button" class="custom-close-btn" onclick="closeEditPatternModal()">×</button>
      </div>
      <div class="custom-modal-body">
        <form id="editPatternForm">
          <div class="row mb-3">
            <div class="col-12">
              <label class="form-label fw-bold">Customer</label>
              <input type="text" id="editCustomerName" class="form-control" readonly style="background-color: #f8f9fa;">
              <input type="hidden" id="editCustomerId">
              <input type="hidden" id="editMonth">
              <input type="hidden" id="editYear">
            </div>
          </div>

          <div class="row mb-3">
            <div class="col-md-4">
              <label class="form-label fw-bold">📅 Target Month</label>
              <select id="editTargetMonth" class="form-select">
                <% (1..12).each do |month| %>
                  <option value="<%= month %>"><%= Date::MONTHNAMES[month] %></option>
                <% end %>
              </select>
            </div>
            <div class="col-md-4">
              <label class="form-label fw-bold">📅 Target Year</label>
              <select id="editTargetYear" class="form-select">
                <% (Date.current.year..Date.current.year+1).each do |year| %>
                  <option value="<%= year %>"><%= year %></option>
                <% end %>
              </select>
            </div>
            <div class="col-md-4">
              <label for="editScheduledQuantity" class="form-label fw-bold">
                <i class="fas fa-flask text-primary me-1"></i>🥛 Daily Quantity
              </label>
              <div class="input-group">
                <input type="number"
                       id="editScheduledQuantity"
                       class="form-control"
                       step="0.1"
                       min="0"
                       placeholder="e.g., 1.5"
                       style="font-weight: bold; text-align: center;"
                       required>
                <select id="editUnit" class="form-select" style="max-width: 100px;">
                  <option value="liters">L</option>
                  <option value="kg">kg</option>
                  <option value="pieces">pcs</option>
                </select>
              </div>
            </div>
          </div>

          <!-- Assignment Summary -->
          <div class="row mb-3">
            <div class="col-12">
              <div class="card" style="background: linear-gradient(135deg, #f8fafc, #e2e8f0); border: 1px solid #cbd5e0;">
                <div class="card-body p-3">
                  <h6 class="fw-bold text-dark mb-3">
                    <i class="fas fa-chart-bar text-primary me-2"></i>📊 Current Assignment Summary
                  </h6>
                  <div class="row g-3">
                    <div class="col-md-3">
                      <div class="text-center p-2 bg-white rounded shadow-sm">
                        <div class="fw-bold text-primary" style="font-size: 18px;" id="currentAssignmentsCount">-</div>
                        <small class="text-muted">Total Assignments</small>
                      </div>
                    </div>
                    <div class="col-md-3">
                      <div class="text-center p-2 bg-white rounded shadow-sm">
                        <div class="fw-bold text-success" style="font-size: 18px;" id="currentTotalQuantity">-</div>
                        <small class="text-muted">Current Total</small>
                      </div>
                    </div>
                    <div class="col-md-3">
                      <div class="text-center p-2 bg-white rounded shadow-sm">
                        <div class="fw-bold text-info" style="font-size: 18px;" id="estimatedNewTotal">-</div>
                        <small class="text-muted">New Total</small>
                      </div>
                    </div>
                    <div class="col-md-3">
                      <div class="text-center p-2 bg-white rounded shadow-sm">
                        <div class="fw-bold text-warning" style="font-size: 18px;" id="assignmentDateRange">-</div>
                        <small class="text-muted">Date Range</small>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Impact Alert -->
          <div class="alert alert-warning">
            <div class="d-flex align-items-start">
              <i class="fas fa-exclamation-triangle text-warning me-3 mt-1" style="font-size: 20px;"></i>
              <div>
                <h6 class="fw-bold text-dark">⚠️ Update Impact</h6>
                <p class="mb-2 text-dark">This will update <strong>ALL PENDING delivery assignments</strong> for this customer in <span id="editMonthDisplay" class="fw-bold text-primary"></span>:</p>
                <ul class="mb-2 text-dark">
                  <li><strong>Quantity & Unit:</strong> All assignments will use the new daily quantity and unit</li>
                  <li><strong>Pricing:</strong> Final amounts will be recalculated automatically based on product pricing</li>
                </ul>
                <div class="example-box" style="background: rgba(255, 193, 7, 0.1); padding: 15px; border-radius: 10px; margin-top: 10px;">
                  <strong>💡 Example:</strong> Changing from <span class="badge bg-danger">1.5L</span> to <span class="badge bg-success">2L</span> will update all <span class="badge bg-info" id="exampleAssignmentCount">0</span> pending assignments.
                </div>
              </div>
            </div>
          </div>

          <!-- Progress Bar -->
          <div id="updateProgressContainer" class="mb-3" style="display: none;">
            <div class="card border-0" style="background: rgba(79, 70, 229, 0.05);">
              <div class="card-body p-3">
                <div class="d-flex justify-content-between align-items-center mb-2">
                  <span class="fw-bold text-dark">🔄 Updating Assignments</span>
                  <span id="progressText" class="text-muted">0%</span>
                </div>
                <div class="progress" style="height: 8px; border-radius: 10px;">
                  <div id="progressBar" class="progress-bar progress-bar-striped progress-bar-animated"
                       style="background: linear-gradient(45deg, #4f46e5, #7c3aed); width: 0%;"></div>
                </div>
                <div id="progressStatus" class="text-muted small mt-2">Preparing updates...</div>
              </div>
            </div>
          </div>

          <div class="d-flex gap-3 justify-content-end">
            <button type="button" class="btn btn-outline-secondary" onclick="closeEditPatternModal()" style="border-radius: 25px; padding: 12px 25px; font-weight: bold;">
              <i class="fas fa-times me-2"></i>Cancel
            </button>
            <button type="submit" class="btn btn-success" id="updatePatternBtn" style="border-radius: 25px; padding: 12px 30px; font-weight: bold; background: linear-gradient(135deg, #10b981, #059669);">
              <i class="fas fa-magic me-2"></i>🚀 Update All Assignments
            </button>
          </div>

          <!-- Debug info -->
          <div class="mt-2">
            <small class="text-muted">
              Debug: Customer ID: <span id="debugCustomerId"></span> |
              Month: <span id="debugMonth"></span> |
              Year: <span id="debugYear"></span>
            </small>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Success Toast -->
  <div id="successToast" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 9999;">
    <div class="toast" role="alert" aria-live="assertive" aria-atomic="true" style="background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%); border: none; border-radius: 15px;">
      <div class="toast-header" style="background: transparent; border: none;">
        <i class="fas fa-check-circle text-white me-2"></i>
        <strong class="me-auto text-white">Success!</strong>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
      </div>
      <div class="toast-body text-white fw-bold">
        ✅ Customer pattern updated successfully!
      </div>
    </div>
  </div>

</div>
</div>

<style>
/* Edit Pattern Modal Styles */
.custom-modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: none;
  align-items: center;
  justify-content: center;
  z-index: 9999;
}

.custom-modal.show {
  display: flex !important;
}

.custom-modal-backdrop {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.custom-edit-modal-content {
  background: white;
  border-radius: 12px;
  width: 600px;
  max-width: 90vw;
  max-height: 90vh;
  overflow-y: auto;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
  position: relative;
}

.custom-modal-header {
  padding: 20px 24px;
  border-bottom: 1px solid #e9ecef;
  display: flex;
  align-items: center;
  justify-content: space-between;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border-radius: 12px 12px 0 0;
}

.custom-modal-title {
  margin: 0;
  font-size: 1.25rem;
  font-weight: 600;
}

.custom-close-btn {
  background: none;
  border: none;
  color: white;
  font-size: 24px;
  line-height: 1;
  padding: 0;
  width: 30px;
  height: 30px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  opacity: 0.8;
  transition: all 0.2s;
  cursor: pointer;
}

.custom-close-btn:hover {
  opacity: 1;
  background: rgba(255, 255, 255, 0.1);
}

.custom-modal-body {
  padding: 24px;
}

body.modal-open {
  overflow: hidden;
}

/* Customer Search Dropdown Styles */
.search-dropdown {
  position: absolute;
  top: 100%;
  left: 0;
  right: 0;
  background: white;
  border: 1px solid #ddd;
  border-radius: 8px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  max-height: 200px;
  overflow-y: auto;
  z-index: 1000;
  margin-top: 2px;
}

.search-dropdown-item {
  padding: 10px 12px;
  cursor: pointer;
  border-bottom: 1px solid #f0f0f0;
  transition: all 0.2s ease;
  font-size: 0.8rem;
  display: flex;
  align-items: center;
}

.search-dropdown-item:last-child {
  border-bottom: none;
}

.search-dropdown-item:hover,
.search-dropdown-item.highlighted {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
}

.search-dropdown-item .customer-avatar {
  width: 24px;
  height: 24px;
  border-radius: 50%;
  background: #007bff;
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 0.7rem;
  font-weight: 600;
  margin-right: 8px;
}

.search-dropdown-item:hover .customer-avatar,
.search-dropdown-item.highlighted .customer-avatar {
  background: rgba(255, 255, 255, 0.2);
}

.search-dropdown-no-results {
  padding: 15px;
  text-align: center;
  color: #999;
  font-size: 0.8rem;
  font-style: italic;
}

/* Enhanced Page Header Styles - Ultra Compact */
.page-header {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border-radius: 8px;
  padding: 0.75rem;
  margin-bottom: 0.5rem;
  box-shadow: 0 5px 15px rgba(102, 126, 234, 0.15);
  position: relative;
  overflow: hidden;
}

.page-header::before {
  content: '';
  position: absolute;
  top: -50%;
  right: -50%;
  width: 200%;
  height: 200%;
  background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
  animation: rotate 20s linear infinite;
}

.page-header h1 {
  color: white !important;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  position: relative;
  z-index: 2;
}

.page-header p {
  color: rgba(255, 255, 255, 0.9) !important;
  position: relative;
  z-index: 2;
}

.page-header .btn {
  position: relative;
  z-index: 2;
  backdrop-filter: blur(10px);
  background: rgba(255, 255, 255, 0.15) !important;
  border: 1px solid rgba(255, 255, 255, 0.2);
  color: white;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
}

.page-header .btn:hover {
  background: rgba(255, 255, 255, 0.25) !important;
  transform: translateY(-2px);
}

@keyframes rotate {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Enhanced Stats Cards */
.stats-card {
  background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
  border-radius: 20px;
  padding: 2rem;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
  border: 1px solid rgba(102, 126, 234, 0.1);
}

/* Header Stats Cards - Ultra Compact */
.header-stats-card {
  background: rgba(255, 255, 255, 0.15);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 6px;
  padding: 0.5rem;
  text-align: center;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.header-stats-card:hover {
  transform: translateY(-3px);
  background: rgba(255, 255, 255, 0.2);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
}

.header-stats-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 3px;
  background: linear-gradient(90deg, #FFD700, #FFA500, #FFD700);
}

.header-stats-icon {
  width: 20px;
  height: 20px;
  border-radius: 4px;
  background: rgba(255, 255, 255, 0.2);
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 auto 0.25rem;
  color: white;
  font-size: 10px;
}

.header-stats-number {
  font-size: 1.2rem;
  font-weight: 800;
  color: white;
  line-height: 1;
  margin-bottom: 0.1rem;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
}

.header-stats-label {
  color: rgba(255, 255, 255, 0.9);
  font-weight: 600;
  font-size: 0.6rem;
  text-transform: uppercase;
  letter-spacing: 0.2px;
}

/* Pattern Filter Tabs */
.pattern-tabs {
  border-radius: 15px;
  overflow: hidden;
  background: #f8f9fa;
}

.pattern-tab {
  border: none !important;
  border-radius: 0 !important;
  background: transparent;
  padding: 1rem 0.5rem;
  margin: 0;
  transition: all 0.3s ease;
  color: #6c757d;
  text-decoration: none;
  position: relative;
}

.pattern-tab:hover {
  background: rgba(102, 126, 234, 0.1);
  color: #667eea;
  text-decoration: none;
}

.pattern-tab.active {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white !important;
  text-decoration: none;
}

.pattern-tab .tab-content {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
}

.pattern-tab .tab-icon {
  font-size: 1rem;
}

.pattern-tab .tab-text {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.1rem;
}

.pattern-tab .tab-title {
  font-weight: 600;
  font-size: 0.8rem;
  text-transform: uppercase;
  letter-spacing: 0.3px;
}

.pattern-tab .tab-count {
  font-weight: 800;
  font-size: 1rem;
}

.pattern-tab.active::before {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 3px;
  background: linear-gradient(90deg, #FFD700, #FFA500, #FFD700);
}

/* Enhanced Filter Form Styles */
.form-control:focus, .form-select:focus {
  border-color: #667eea !important;
  box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25) !important;
}

.form-label {
  margin-bottom: 0.8rem;
  font-size: 0.9rem;
}

.card-header h5 {
  font-size: 1.1rem;
  font-weight: 600;
  margin: 0;
}

/* Filter Card Animation */
.card {
  transition: all 0.3s ease;
}

.card:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1) !important;
}

/* Form Control Improvements */
.form-control-lg, .form-select-lg {
  font-size: 1rem;
  padding: 0.75rem 1rem;
}

.btn-lg {
  padding: 0.75rem 1.5rem;
  font-size: 1rem;
}

/* Responsive adjustments for header */
@media (max-width: 768px) {
  .header-stats-card {
    margin-bottom: 1rem;
  }

  .pattern-tab .tab-content {
    flex-direction: column;
    gap: 0.5rem;
  }

  .pattern-tab {
    padding: 1rem 0.5rem;
  }
}

.stats-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 4px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.stats-card::after {
  content: '';
  position: absolute;
  top: 0;
  right: 0;
  width: 60px;
  height: 60px;
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  border-radius: 0 0 0 60px;
}

.stats-card:hover {
  box-shadow: 0 20px 60px rgba(102, 126, 234, 0.15);
  transform: translateY(-8px) scale(1.02);
}

.stats-card .stats-icon {
  position: absolute;
  top: 1.5rem;
  right: 1.5rem;
  width: 50px;
  height: 50px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border-radius: 15px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 20px;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
  z-index: 2;
}

.stats-card .stats-number {
  font-size: 2.5rem;
  font-weight: 800;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  line-height: 1;
  margin-bottom: 0.5rem;
  position: relative;
  z-index: 2;
}

.stats-card .stats-label {
  color: #6b7280;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 1px;
  font-size: 0.8rem;
  position: relative;
  z-index: 2;
}

/* CSS Variables for Consistent Styling */
:root {
  --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  --text-primary: #1f2937;
  --text-secondary: #6b7280;
}
  .avatar-circle {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 14px;
  }

  .card {
    border: none;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    border-radius: 0.75rem;
  }

  .card-header {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border-bottom: 1px solid #dee2e6;
    border-radius: 0.75rem 0.75rem 0 0 !important;
  }

  .table th {
    font-weight: 700;
    color: white;
    border: none;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    font-size: 0.8rem;
    padding: 1rem 0.75rem;
  }

  .table td {
    padding: 1rem 0.75rem;
    border-top: 1px solid #e9ecef;
    vertical-align: middle;
  }

  .customer-pattern-row {
    border-bottom: 1px solid #dee2e6;
  }

  .customer-pattern-row:hover {
    background-color: #f8f9fa;
  }

  .customer-pattern-row td {
    padding: 0.75rem;
    vertical-align: middle;
    border-color: #dee2e6;
  }

  /* Ensure table width and proper column distribution */
  .table {
    width: 100%;
  }

  /* Simple modal styles - no conflicts */
  .modal-open {
    padding-right: 0 !important;
  }

  /* Responsive table adjustments */
  @media (max-width: 1200px) {
    .table {
      font-size: 0.9rem;
    }

    .customer-pattern-row td {
      padding: 0.6rem;
    }
  }

  @media (max-width: 768px) {
    .table {
      font-size: 0.8rem;
    }

    .customer-pattern-row td {
      padding: 0.5rem;
    }
  }

  .badge {
    font-size: 0.75rem;
    border-radius: 15px;
    font-weight: 600;
    padding: 0.5rem 1rem;
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
  }

  .badge:hover {
    transform: translateY(-1px);
    box-shadow: 0 6px 18px rgba(0, 0, 0, 0.15);
  }

  .badge.bg-info {
    background: linear-gradient(135deg, #06b6d4 0%, #0891b2 100%) !important;
  }

  .badge.bg-success {
    background: linear-gradient(135deg, #10b981 0%, #059669 100%) !important;
  }

  .badge.bg-warning {
    background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%) !important;
  }

  .badge.bg-danger {
    background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%) !important;
  }

  .badge.bg-primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
  }

  .badge.bg-secondary {
    background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%) !important;
  }

  .btn {
    border-radius: 0.5rem;
    transition: all 0.3s ease;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .btn-outline-primary {
    border: 2px solid #667eea;
    color: #667eea;
    background: transparent;
  }

  .btn-outline-primary:hover {
    background: #667eea;
    color: white;
    border-color: #667eea;
  }

  .btn-outline-success {
    border: 2px solid #10b981;
    color: #10b981;
    background: transparent;
  }

  .btn-outline-success:hover {
    background: #10b981;
    color: white;
    border-color: #10b981;
  }

  .form-select {
    border-radius: 0.5rem;
  }

  .complete-all-btn {
    position: relative;
    overflow: hidden;
    transition: all 0.3s ease;
    box-shadow: 0 2px 10px rgba(40, 167, 69, 0.3);
    border: none;
    font-weight: 600;
  }

  .complete-all-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 20px rgba(40, 167, 69, 0.4);
  }

  .complete-all-btn:disabled {
    transform: none;
    opacity: 0.8;
  }

  .complete-all-btn .btn-loader {
    animation: pulse 1.5s infinite;
  }

  @keyframes pulse {
    0% { opacity: 1; }
    50% { opacity: 0.7; }
    100% { opacity: 1; }
  }

  .alert-success.shadow-sm {
    animation: slideInRight 0.5s ease-out;
  }

  @keyframes slideInRight {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  /* Big Attractive Loader Styles */
  .big-loader-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 10000;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .loader-backdrop {
    background: linear-gradient(135deg, rgba(0, 0, 0, 0.9), rgba(40, 167, 69, 0.1));
    backdrop-filter: blur(15px);
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    animation: fadeIn 0.5s ease-out;
  }

  .loader-content {
    background: linear-gradient(145deg, #ffffff, #f8f9fa);
    padding: 4rem 3rem;
    border-radius: 30px;
    box-shadow:
      0 30px 80px rgba(0, 0, 0, 0.3),
      0 0 0 1px rgba(255, 255, 255, 0.1),
      inset 0 1px 0 rgba(255, 255, 255, 0.8);
    text-align: center;
    min-width: 420px;
    position: relative;
    overflow: hidden;
    animation: scaleIn 0.6s cubic-bezier(0.34, 1.56, 0.64, 1);
  }

  .loader-content::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(40, 167, 69, 0.1), transparent);
    animation: shimmer 2s infinite;
  }

  .circular-progress {
    position: relative;
    margin: 0 auto 2rem;
    width: 140px;
    height: 140px;
    background: radial-gradient(circle, rgba(40, 167, 69, 0.1), transparent);
    border-radius: 50%;
    padding: 10px;
    box-shadow:
      0 0 30px rgba(40, 167, 69, 0.2),
      inset 0 0 20px rgba(255, 255, 255, 0.1);
  }

  .progress-ring {
    transform: rotate(-90deg);
    filter: drop-shadow(0 0 15px rgba(40, 167, 69, 0.6));
  }

  .progress-ring-circle {
    stroke-dasharray: 326.7;
    stroke-dashoffset: 326.7;
    transition: stroke-dashoffset 0.8s cubic-bezier(0.4, 0, 0.2, 1);
    stroke-linecap: round;
    stroke: url(#progressGradient);
    stroke-width: 6;
  }

  .progress-text {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: radial-gradient(circle, rgba(255, 255, 255, 0.9), rgba(248, 249, 250, 0.8));
    border-radius: 50%;
    width: 80px;
    height: 80px;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  }

  .percentage {
    font-size: 1.8rem;
    font-weight: 800;
    background: linear-gradient(135deg, #28a745, #20c997);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    animation: textGlow 2s ease-in-out infinite alternate;
  }

  .loader-icons {
    margin-bottom: 2rem;
    padding: 1rem;
    background: rgba(248, 249, 250, 0.5);
    border-radius: 15px;
    backdrop-filter: blur(10px);
  }

  .icon-row {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin-bottom: 15px;
  }

  .completed-icon {
    color: #28a745;
    font-size: 1.5rem;
    background: rgba(40, 167, 69, 0.1);
    padding: 8px;
    border-radius: 50%;
    animation: bounceIn 0.8s ease, pulse 2s infinite;
    box-shadow: 0 0 15px rgba(40, 167, 69, 0.3);
  }

  .processing-icon {
    color: #007bff;
    font-size: 1.5rem;
    background: rgba(0, 123, 255, 0.1);
    padding: 8px;
    border-radius: 50%;
    box-shadow: 0 0 15px rgba(0, 123, 255, 0.3);
  }

  .pending-icon {
    color: #6c757d;
    font-size: 1.5rem;
    background: rgba(108, 117, 125, 0.1);
    padding: 8px;
    border-radius: 50%;
    opacity: 0.6;
    animation: pending-pulse 1.5s infinite;
  }

  .rotating {
    animation: rotate 2s linear infinite;
  }

  .loader-status h4 {
    background: linear-gradient(135deg, #2c3e50, #34495e);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    font-weight: 700;
    font-size: 1.5rem;
    margin-bottom: 1rem;
  }

  .status-message {
    color: #495057;
    font-size: 1.1rem;
    font-weight: 500;
    padding: 0.5rem 1rem;
    background: rgba(73, 80, 87, 0.1);
    border-radius: 20px;
    display: inline-block;
  }

  .progress-details {
    margin-top: 1.5rem;
    padding: 1rem;
    background: linear-gradient(135deg, rgba(40, 167, 69, 0.1), rgba(32, 201, 151, 0.1));
    border-radius: 15px;
    border: 1px solid rgba(40, 167, 69, 0.2);
  }

  .progress-details small {
    font-size: 1rem;
    font-weight: 600;
    color: #495057;
  }

  .title-container {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 15px;
    margin-bottom: 1rem;
  }

  .rocket-emoji {
    font-size: 2rem;
    animation: rocket-float 2s ease-in-out infinite alternate;
  }

  .progress-numbers {
    font-size: 1.2rem;
    font-weight: 700;
    background: linear-gradient(135deg, #28a745, #20c997);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    padding: 0.5rem;
  }

  @keyframes rocket-float {
    0% { transform: translateY(0px) rotate(-3deg); }
    100% { transform: translateY(-8px) rotate(3deg); }
  }

  .loading-dots {
    display: flex;
    justify-content: center;
    gap: 5px;
    margin-top: 1.5rem;
  }

  .loading-dots span {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: #28a745;
    animation: dot-pulse 1.4s infinite both;
  }

  .loading-dots span:nth-child(2) {
    animation-delay: 0.2s;
  }

  .loading-dots span:nth-child(3) {
    animation-delay: 0.4s;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes scaleIn {
    from {
      opacity: 0;
      transform: scale(0.8);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  @keyframes rotate {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  @keyframes bounceIn {
    0% {
      opacity: 0;
      transform: scale(0.3);
    }
    50% {
      opacity: 1;
      transform: scale(1.05);
    }
    70% {
      transform: scale(0.9);
    }
    100% {
      opacity: 1;
      transform: scale(1);
    }
  }

  @keyframes dot-pulse {
    0%, 80%, 100% {
      transform: scale(0);
      opacity: 0.5;
    }
    40% {
      transform: scale(1);
      opacity: 1;
    }
  }

  @keyframes shimmer {
    0% { left: -100%; }
    100% { left: 100%; }
  }

  @keyframes textGlow {
    0% { text-shadow: 0 0 10px rgba(40, 167, 69, 0.5); }
    100% { text-shadow: 0 0 20px rgba(40, 167, 69, 0.8), 0 0 30px rgba(40, 167, 69, 0.3); }
  }

  @keyframes pending-pulse {
    0%, 100% { opacity: 0.6; transform: scale(1); }
    50% { opacity: 0.3; transform: scale(0.95); }
  }

  @keyframes pulse {
    0%, 100% { box-shadow: 0 0 15px rgba(40, 167, 69, 0.3); }
    50% { box-shadow: 0 0 25px rgba(40, 167, 69, 0.6), 0 0 35px rgba(40, 167, 69, 0.2); }
  }

  /* Ultra Fast Loading Overlay Styles */
  .fast-loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.95), rgba(118, 75, 162, 0.95));
    backdrop-filter: blur(20px);
    z-index: 99999;
    display: flex;
    align-items: center;
    justify-content: center;
    animation: fadeInOverlay 0.3s ease-out;
  }

  .fast-loading-content {
    position: relative;
    text-align: center;
    color: white;
  }

  .pulse-ring {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 200px;
    height: 200px;
    border: 3px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    animation: pulsing 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite;
  }

  .pulse-ring.delay-1 {
    animation-delay: 0.5s;
    width: 160px;
    height: 160px;
  }

  .pulse-ring.delay-2 {
    animation-delay: 1s;
    width: 120px;
    height: 120px;
  }

  .loading-center {
    position: relative;
    z-index: 2;
    padding: 2rem;
  }

  .loading-rocket {
    font-size: 4rem;
    color: #FFD700;
    margin-bottom: 1rem;
    animation: rocketBounce 1s ease-in-out infinite alternate;
    filter: drop-shadow(0 0 20px rgba(255, 215, 0, 0.7));
  }

  .loading-title {
    font-size: 2rem;
    font-weight: 800;
    margin-bottom: 0.5rem;
    text-shadow: 0 0 20px rgba(255, 255, 255, 0.8);
    background: linear-gradient(45deg, #FFD700, #FFA500);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .loading-subtitle {
    font-size: 1.2rem;
    margin-bottom: 2rem;
    opacity: 0.9;
    font-weight: 300;
  }

  .loading-bar {
    width: 300px;
    height: 6px;
    background: rgba(255, 255, 255, 0.3);
    border-radius: 10px;
    overflow: hidden;
    margin: 0 auto;
    box-shadow: 0 0 20px rgba(255, 255, 255, 0.3);
  }

  .loading-bar-fill {
    height: 100%;
    background: linear-gradient(90deg, #FFD700, #FFA500, #FFD700);
    background-size: 200% 100%;
    border-radius: 10px;
    animation: loadingBarFlow 1.5s ease-in-out infinite;
    box-shadow: 0 0 15px rgba(255, 215, 0, 0.8);
  }

  @keyframes fadeInOverlay {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes pulsing {
    0% {
      transform: translate(-50%, -50%) scale(1);
      opacity: 1;
    }
    100% {
      transform: translate(-50%, -50%) scale(1.3);
      opacity: 0;
    }
  }

  @keyframes rocketBounce {
    0% { transform: translateY(0px) rotate(-5deg); }
    100% { transform: translateY(-15px) rotate(5deg); }
  }

  @keyframes loadingBarFlow {
    0% {
      background-position: 0% 50%;
      width: 0%;
    }
    50% {
      background-position: 100% 50%;
      width: 100%;
    }
    100% {
      background-position: 200% 50%;
      width: 0%;
    }
  }

  /* Simple Loader Styles */
  .rotating-icon {
    animation: rotate 2s linear infinite;
  }

  .simple-loader-container {
    max-width: 400px;
    margin: 0 auto;
  }

  .progress-container {
    margin: 1.5rem 0;
  }

  /* Modal width adjustments for better action button display */
  #deliveryAssignmentsModal .modal-xl {
    max-width: 1400px;
  }

  #deliveryAssignmentsModal .table th:last-child,
  #deliveryAssignmentsModal .table td:last-child {
    width: 140px;
    min-width: 140px;
  }

  #deliveryAssignmentsModal .btn-group {
    display: flex;
    gap: 5px;
  }

  #deliveryAssignmentsModal .btn-group .btn {
    flex: 0 0 auto;
    min-width: 35px;
  }

  /* Ensure action buttons don't wrap */
  @media (max-width: 1399px) {
    #deliveryAssignmentsModal .modal-xl {
      max-width: 95vw;
    }
  }

  @media (max-width: 991px) {
    #deliveryAssignmentsModal .table th:last-child,
    #deliveryAssignmentsModal .table td:last-child {
      width: 100px;
      min-width: 100px;
    }

    #deliveryAssignmentsModal .btn-group .btn {
      min-width: 30px;
      padding: 0.25rem 0.4rem;
      font-size: 0.8rem;
    }
  }
</style>

<!-- Modal removed - using direct page links instead -->

<!-- Simple Attractive Loader Modal -->
<div class="modal fade show" id="bigLoaderModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false" style="display: none;">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content border-0 shadow-lg" style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(10px); border-radius: 20px;">
      <div class="modal-body text-center py-5 px-4">
        <div class="simple-loader-container">
          <!-- Animated Icon -->
          <div class="loader-icon-container mb-4">
            <div class="rotating-icon">
              <i class="fas fa-sync-alt" style="font-size: 3rem; color: #28a745;"></i>
            </div>
          </div>

          <!-- Title -->
          <h4 class="mb-3" style="color: #2c3e50; font-weight: 600;">
            🚀 Completing Assignments
          </h4>

          <!-- Progress Bar -->
          <div class="progress-container mb-4">
            <div class="progress" style="height: 12px; border-radius: 10px; background: #e9ecef;">
              <div class="progress-bar progress-bar-striped progress-bar-animated"
                   role="progressbar"
                   style="width: 0%; background: linear-gradient(45deg, #28a745, #20c997); border-radius: 10px;"
                   id="simple-progress-bar">
              </div>
            </div>
            <div class="progress-text mt-2">
              <span class="percentage-simple" style="font-size: 1.2rem; font-weight: bold; color: #28a745;">0%</span>
            </div>
          </div>

          <!-- Status -->
          <p class="status-message-simple mb-3" style="color: #6c757d; font-size: 1rem;">
            Processing pending assignments...
          </p>

          <!-- Counter -->
          <div class="counter-simple" style="background: rgba(40, 167, 69, 0.1); padding: 0.8rem; border-radius: 10px; color: #495057; font-weight: 600;">
            <span id="completed-count-simple">0</span> of <span id="total-count-simple">0</span> completed
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Ultra Fast Loading Overlay -->
<div id="fastLoadingOverlay" class="fast-loading-overlay" style="display: none;">
  <div class="fast-loading-content">
    <div class="pulse-ring"></div>
    <div class="pulse-ring delay-1"></div>
    <div class="pulse-ring delay-2"></div>
    <div class="loading-center">
      <i class="fas fa-rocket loading-rocket"></i>
      <h4 class="loading-title">🌾 Atma Nirbhar Farm</h4>
      <p class="loading-subtitle">Loading customer data...</p>
      <div class="loading-bar">
        <div class="loading-bar-fill"></div>
      </div>
    </div>
  </div>
</div>

<!-- Filter Loading Modal -->
<div class="modal fade" id="filterLoaderModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content border-0 shadow-lg" style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(10px); border-radius: 20px;">
      <div class="modal-body text-center py-5 px-4">
        <div class="simple-loader-container">
          <!-- Animated Icon -->
          <div class="loader-icon-container mb-4">
            <div class="rotating-icon">
              <i class="fas fa-filter" style="font-size: 3rem; color: #007bff;"></i>
            </div>
          </div>

          <!-- Title -->
          <h4 class="mb-3" style="color: #2c3e50; font-weight: 600;">
            🔍 Filtering Data
          </h4>

          <!-- Progress Bar -->
          <div class="progress-container mb-4">
            <div class="progress" style="height: 12px; border-radius: 10px; background: #e9ecef;">
              <div class="progress-bar progress-bar-striped progress-bar-animated"
                   role="progressbar"
                   style="width: 0%; background: linear-gradient(45deg, #007bff, #0056b3); border-radius: 10px;"
                   id="filter-progress-bar">
              </div>
            </div>
            <div class="progress-text mt-2">
              <span class="filter-percentage" style="font-size: 1.2rem; font-weight: bold; color: #007bff;">0%</span>
            </div>
          </div>

          <!-- Status -->
          <p class="filter-status-message" style="color: #6c757d; font-size: 1rem;">
            Loading customer patterns...
          </p>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Simple Custom Modal -->
<div id="deliveryModal" class="custom-modal" style="display: none;">
  <div class="custom-modal-backdrop" onclick="closeDeliveryModal()"></div>
  <div class="custom-modal-content">
    <div class="custom-modal-header">
      <h5 class="custom-modal-title">
        <i class="fas fa-truck me-2"></i>
        <span id="modalCustomerName">Delivery Assignments</span>
      </h5>
      <button type="button" class="custom-close-btn" onclick="closeDeliveryModal()">×</button>
    </div>
    <div class="custom-modal-body" id="modalContent">
      <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3">Loading assignments...</p>
      </div>
    </div>
    <div class="custom-modal-footer">
      <button type="button" class="btn btn-secondary" onclick="closeDeliveryModal()">Close</button>
    </div>
  </div>
</div>

<!-- Small Edit Modal -->
<div id="editModal" class="custom-modal" style="display: none;">
  <div class="custom-modal-backdrop" onclick="closeEditModal()"></div>
  <div class="custom-edit-modal-content">
    <div class="custom-modal-header">
      <h5 class="custom-modal-title">
        <i class="fas fa-edit me-2"></i>
        <span id="editModalTitle">Edit Assignment</span>
      </h5>
      <button type="button" class="custom-close-btn" onclick="closeEditModal()">×</button>
    </div>
    <div class="custom-modal-body" id="editModalContent">
      <div class="text-center py-3">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading edit form...</p>
      </div>
    </div>
  </div>
</div>

<style>
.bg-gradient-primary {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.modal-xl {
  max-width: 1200px;
}

.stats-card {
  border: none;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  transition: transform 0.2s;
}

.stats-card:hover {
  transform: translateY(-2px);
}

.table-responsive {
  border-radius: 8px;
  overflow: hidden;
}

/* Modal fixes for blank screen issue */
.modal {
  z-index: 1055;
}

.modal-backdrop {
  z-index: 1050;
  background-color: rgba(0, 0, 0, 0.5);
}

.modal.show .modal-dialog {
  transform: none;
}

.modal-open {
  overflow: hidden;
  padding-right: 0 !important;
}

.modal-open .modal {
  overflow-x: hidden;
  overflow-y: auto;
}

/* Ensure modal content is visible */
.modal-content {
  background-color: #fff;
  border: 1px solid rgba(0,0,0,.2);
  border-radius: .3rem;
  box-shadow: 0 .25rem .5rem rgba(0,0,0,.5);
  pointer-events: auto;
  position: relative;
  width: 100%;
}

/* Custom Modal Styles */
.custom-modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 10000;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 80px 0 20px 280px; /* Top padding for nav bar, left padding for sidebar */
}

.custom-modal-backdrop {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.7);
  cursor: pointer;
}

.custom-modal-content {
  position: relative;
  background-color: white;
  border-radius: 10px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
  width: 100%;
  max-width: 1400px;
  max-height: 85%;
  overflow: hidden;
  z-index: 10001;
  animation: modalFadeIn 0.3s ease-out;
  margin: 0 20px; /* Add some margin from screen edges */
}

/* Responsive adjustments for modal positioning */
@media (max-width: 1200px) {
  .custom-modal {
    padding: 60px 0 20px 200px; /* Smaller sidebar on medium screens */
  }
}

@media (max-width: 992px) {
  .custom-modal {
    padding: 60px 20px 20px 20px; /* No sidebar on smaller screens */
  }

  .custom-modal-content {
    max-width: 95%;
  }
}

@media (max-width: 768px) {
  .custom-modal {
    padding: 80px 10px 20px 10px; /* Mobile spacing */
  }

  .custom-modal-content {
    max-width: 98%;
    margin: 0 10px;
  }
}

.custom-modal-header {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  padding: 1rem 1.5rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-radius: 10px 10px 0 0;
}

.custom-modal-title {
  margin: 0;
  font-size: 1.2rem;
  font-weight: 600;
}

.custom-close-btn {
  background: none;
  border: none;
  color: white;
  font-size: 2rem;
  cursor: pointer;
  padding: 0;
  line-height: 1;
  width: 30px;
  height: 30px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  transition: background-color 0.2s;
}

.custom-close-btn:hover {
  background-color: rgba(255, 255, 255, 0.2);
}

.custom-modal-body {
  padding: 1.5rem;
  max-height: 70vh;
  overflow-y: auto;
}

.custom-modal-footer {
  padding: 1rem 1.5rem;
  border-top: 1px solid #e9ecef;
  display: flex;
  justify-content: flex-end;
  background-color: #f8f9fa;
  border-radius: 0 0 10px 10px;
}

@keyframes modalFadeIn {
  from {
    opacity: 0;
    transform: scale(0.8);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

/* Prevent body scroll when modal is open */
body.modal-open {
  overflow: hidden !important;
  position: fixed !important;
  width: 100% !important;
}

/* Ensure normal body behavior when no modal */
body:not(.modal-open) {
  overflow: auto !important;
  position: static !important;
}

/* Small Edit Modal Styles */
.custom-edit-modal-content {
  position: relative;
  background-color: white;
  border-radius: 10px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
  width: 100%;
  max-width: 600px;
  max-height: 80%;
  overflow: hidden;
  z-index: 10001;
  animation: modalFadeIn 0.3s ease-out;
  margin: 0 20px; /* Add some margin from screen edges */
}
</style>

<%= render 'shared/attractive_loader_styles' %>
<%= render 'shared/super_attractive_loader_styles' %>

<%= render 'shared/attractive_loader_js' %>
<%= render 'shared/super_attractive_loader_js' %>

<script>
// Edit Pattern Modal Function - Defined at top for global access
window.openEditPatternModal = function(customerId, customerName, scheduledQuantity, scheduledProduct, month, year) {
  console.log('Opening modal for:', customerName, 'Quantity:', scheduledQuantity);

  const modal = document.getElementById('editPatternModal');
  if (!modal) {
    console.error('Modal not found!');
    return;
  }

  // Set form values
  const customerIdField = document.getElementById('editCustomerId');
  const customerNameField = document.getElementById('editCustomerName');
  const quantityField = document.getElementById('editScheduledQuantity');
  const monthField = document.getElementById('editMonth');
  const yearField = document.getElementById('editYear');
  const monthDisplay = document.getElementById('editMonthDisplay');

  if (customerIdField) customerIdField.value = customerId || '';
  if (customerNameField) customerNameField.value = customerName || '';
  if (quantityField) quantityField.value = scheduledQuantity || '';
  if (monthField) monthField.value = month || '';
  if (yearField) yearField.value = year || '';

  // Set month display
  const months = ['', 'January', 'February', 'March', 'April', 'May', 'June',
                 'July', 'August', 'September', 'October', 'November', 'December'];
  if (monthDisplay) monthDisplay.textContent = (months[month] || 'Unknown') + ' ' + year;

  // Show modal
  modal.style.display = 'flex';
  document.body.classList.add('modal-open');
  console.log('Modal should be visible now');
};

window.closeEditPatternModal = function() {
  const modal = document.getElementById('editPatternModal');
  if (modal) {
    modal.style.display = 'none';
    document.body.classList.remove('modal-open');
    console.log('Edit modal closed');
  }
};

// Event delegation for edit pattern buttons
document.addEventListener('click', function(e) {
  const button = e.target.closest('[data-action="edit-pattern"]');
  if (button) {
    e.preventDefault();

    const customerId = button.getAttribute('data-customer-id');
    const customerName = button.getAttribute('data-customer-name');
    const scheduledQuantity = button.getAttribute('data-scheduled-quantity');
    const scheduledProduct = button.getAttribute('data-scheduled-product');
    const month = button.getAttribute('data-month');
    const year = button.getAttribute('data-year');

    console.log('Button clicked - calling openEditPatternModal with:', {
      customerId, customerName, scheduledQuantity, scheduledProduct, month, year
    });

    // Call the function directly
    window.openEditPatternModal(customerId, customerName, scheduledQuantity, scheduledProduct, month, year);
  }
});

// Simple modal functions
function openDeliveryModal(customerId, customerName, month, year) {
  console.log(`Opening modal for ${customerName}`);

  // Update title
  document.getElementById('modalCustomerName').textContent = `${customerName} - Deliveries`;

  // Show modal
  const modal = document.getElementById('deliveryModal');
  modal.style.display = 'flex';
  document.body.classList.add('modal-open');

  // Load content
  loadModalContent(customerId, customerName, month, year);

  // Ensure handlers are initialized after modal opens
  setTimeout(() => {
    initializeModalButtonHandlers();
  }, 300);
}

function closeDeliveryModal() {
  const modal = document.getElementById('deliveryModal');
  modal.style.display = 'none';
  document.body.classList.remove('modal-open');

  // Ensure body returns to normal state
  document.body.style.overflow = '';
  document.body.style.position = '';
  document.body.style.width = '';

  console.log('Modal closed');
}

// Note: Functions will be made globally available after loadModalContent is defined

// Fast loading overlay functions
function showFastLoader() {
  const overlay = document.getElementById('fastLoadingOverlay');
  if (overlay) {
    overlay.style.display = 'flex';
    document.body.style.overflow = 'hidden';
  }
}

function hideFastLoader() {
  const overlay = document.getElementById('fastLoadingOverlay');
  if (overlay) {
    overlay.style.display = 'none';
    document.body.style.overflow = '';
  }
}

// Enhanced form submission with smart loader selection
function handleFormSubmission(form) {
  const startTime = Date.now();

  // Show fast loader immediately
  showFastLoader();

  // Set a timer to switch to detailed loader if request takes more than 1 second
  const loaderTimer = setTimeout(() => {
    hideFastLoader();
    const modalElement = document.getElementById('filterLoaderModal');
    if (modalElement) {
      const modal = new bootstrap.Modal(modalElement, {
        backdrop: 'static',
        keyboard: false
      });
      modal.show();

      // Simulate progress for longer requests
      let progress = 0;
      const progressBar = document.getElementById('filter-progress-bar');
      const progressText = document.querySelector('.filter-percentage');
      const statusMessage = document.querySelector('.filter-status-message');

      const progressInterval = setInterval(() => {
        progress += Math.random() * 15;
        if (progress > 90) progress = 90;

        if (progressBar) progressBar.style.width = progress + '%';
        if (progressText) progressText.textContent = Math.round(progress) + '%';

        // Update status messages
        if (statusMessage) {
          const messages = [
            'Optimizing database queries...',
            'Processing customer data...',
            'Calculating delivery patterns...',
            'Applying smart caching...',
            'Finalizing results...'
          ];
          const messageIndex = Math.floor(progress / 20);
          statusMessage.textContent = messages[messageIndex] || 'Loading customer patterns...';
        }
      }, 200);

      // Store the interval so we can clear it later
      window.filterProgressInterval = progressInterval;
    }
  }, 1000);

  // Store timer reference so we can clear it if request completes quickly
  window.fastLoaderTimer = loaderTimer;

  return true; // Allow form submission to continue
}

// Add event listeners when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
  // Ensure clean page state on load
  document.body.classList.remove('modal-open');
  document.body.style.overflow = '';
  document.body.style.position = '';
  document.body.style.width = '';

  // Remove any potential style attributes that might interfere
  document.documentElement.style.overflow = '';
  document.documentElement.style.position = '';

  // Enhanced form submission handler
  const filterForm = document.getElementById('patterns-filter-form');
  if (filterForm) {
    filterForm.addEventListener('submit', function(e) {
      // Let the form submit naturally but show appropriate loader
      handleFormSubmission(this);
    });
  }

  // Add click handlers to pattern filter buttons
  const patternLinks = document.querySelectorAll('a[href*="customer-patterns"]');
  patternLinks.forEach(link => {
    link.addEventListener('click', function(e) {
      // Only handle if it's a pattern filter link
      if (this.href.includes('pattern=') || this.href.includes('customer-patterns')) {
        showFastLoader();

        // Set timer for longer requests
        window.fastLoaderTimer = setTimeout(() => {
          hideFastLoader();
          const modalElement = document.getElementById('filterLoaderModal');
          if (modalElement) {
            const modal = new bootstrap.Modal(modalElement, {
              backdrop: 'static',
              keyboard: false
            });
            modal.show();
          }
        }, 1000);
      }
    });
  });

  // Add click handlers to all delivery buttons
  const deliveryButtons = document.querySelectorAll('.delivery-modal-btn');
  deliveryButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();

      const customerId = this.getAttribute('data-customer-id');
      const customerName = this.getAttribute('data-customer-name');
      const month = this.getAttribute('data-month');
      const year = this.getAttribute('data-year');

      openDeliveryModal(customerId, customerName, month, year);
    });
  });

  // Close modal on Escape key
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      closeDeliveryModal();
      closeEditModal();
    }
  });

  // Handle page unload to clean up loaders
  window.addEventListener('beforeunload', function() {
    if (window.fastLoaderTimer) {
      clearTimeout(window.fastLoaderTimer);
    }
    if (window.filterProgressInterval) {
      clearInterval(window.filterProgressInterval);
    }
  });
});

// Global modal functions for assignment actions - Enhanced with debugging
window.editAssignment = function(id) {
  console.log('🎯 editAssignment function called with ID:', id);

  if (!id) {
    console.error('❌ No assignment ID provided to editAssignment function');
    alert('Error: No assignment ID provided');
    return;
  }

  try {
    // Open small edit modal
    const editModal = document.getElementById('editModal');
    const editModalContent = document.getElementById('editModalContent');
    const editModalTitle = document.getElementById('editModalTitle');

    if (!editModal) {
      console.error('❌ Edit modal element not found');
      alert('Error: Edit modal not found');
      return;
    }

    if (!editModalTitle) {
      console.error('❌ Edit modal title element not found');
      return;
    }

    // Update title
    editModalTitle.textContent = `Edit Assignment #${id}`;
    console.log('✅ Modal title updated');

    // Show modal
    editModal.style.display = 'flex';
    document.body.classList.add('modal-open');
    console.log('✅ Edit modal displayed');

    // Load edit form
    loadEditForm(id);
    console.log('✅ Loading edit form for assignment ID:', id);

  } catch (error) {
    console.error('❌ Error in editAssignment function:', error);
    alert('Error opening edit modal: ' + error.message);
  }
};

// Ensure the function is available immediately
if (typeof window.editAssignment === 'function') {
  console.log('✅ editAssignment function is properly defined and available globally');
} else {
  console.error('❌ editAssignment function failed to be defined globally');
}

// Make loadEditForm globally available
window.loadEditForm = function(id) {
  const editModalContent = document.getElementById('editModalContent');

  // Show loading spinner
  editModalContent.innerHTML = `
    <div class="text-center py-3">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
      <p class="mt-2">Loading edit form...</p>
    </div>
  `;

  fetch(`/assign_deliveries/${id}/edit.json`, {
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    })
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      editModalContent.innerHTML = data.html;
    })
    .catch(error => {
      console.error('Error loading edit form:', error);
      editModalContent.innerHTML = `
        <div class="alert alert-danger text-center">
          <i class="fas fa-exclamation-triangle me-2"></i>
          Error loading edit form. <button class="btn btn-link p-0" onclick="closeEditModal()">Close</button>
        </div>
      `;
    });
}

window.closeEditModal = function() {
  const editModal = document.getElementById('editModal');
  editModal.style.display = 'none';
  document.body.classList.remove('modal-open');

  // Ensure body returns to normal state
  document.body.style.overflow = '';
  document.body.style.position = '';
  document.body.style.width = '';

  console.log('Edit modal closed');
};

window.deleteAssignment = function(id) {
  console.log('🗑️ deleteAssignment called with ID:', id);

  if (confirm('Are you sure you want to delete this assignment? This action cannot be undone.')) {
    // Find the button using the event object or by searching the DOM
    let button = null;

    if (typeof event !== 'undefined' && event.target) {
      button = event.target.closest('button');
    } else {
      // Fallback: find the button by onclick attribute
      const buttons = document.querySelectorAll('button[onclick*="deleteAssignment(' + id + ')"]');
      if (buttons.length > 0) {
        button = buttons[0];
      }
    }

    if (!button) {
      console.error('❌ Could not find the delete button for assignment', id);
      window.showSimpleToast('Error: Could not find button', 'error');
      return;
    }

    const originalContent = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
    button.disabled = true;

    console.log('Deleting assignment:', id);

    fetch(`/assign_deliveries/${id}.json`, {
      method: 'DELETE',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
      }
    })
    .then(response => {
      console.log('Delete response status:', response.status);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      console.log('✅ Delete response data:', data);
      if (data.success) {
        console.log('✅ Assignment deleted successfully, showing toast and reloading modal');
        window.showSimpleToast(data.message || 'Assignment deleted successfully!', 'success');

        setTimeout(() => {
          console.log('🔄 Reloading modal after deletion');
          window.reloadCurrentModal();
        }, 500); // Small delay to let toast show
      } else {
        console.error('❌ Delete failed:', data);
        window.showSimpleToast(data.message || 'Error deleting assignment', 'error');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      window.showSimpleToast('Error deleting assignment: ' + error.message, 'error');
    })
    .finally(() => {
      button.innerHTML = originalContent;
      button.disabled = false;
    });
  }
};

window.completeAssignment = function(id) {
  console.log('🎯 completeAssignment called with ID:', id);

  if (confirm('Mark this assignment as completed?')) {
    // Find the button using the event object or by searching the DOM
    let button = null;

    if (typeof event !== 'undefined' && event.target) {
      button = event.target.closest('button');
    } else {
      // Fallback: find the button by onclick attribute
      const buttons = document.querySelectorAll('button[onclick*="completeAssignment(' + id + ')"]');
      if (buttons.length > 0) {
        button = buttons[0];
      }
    }

    if (!button) {
      console.error('❌ Could not find the complete button for assignment', id);
      window.showSimpleToast('Error: Could not find button', 'error');
      return;
    }

    const originalContent = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
    button.disabled = true;

    console.log('Completing assignment:', id);

    fetch(`/assign_deliveries/${id}/complete.json`, {
      method: 'PATCH',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
      }
    })
    .then(response => {
      console.log('Complete response status:', response.status);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      console.log('✅ Complete response data:', data);
      if (data.success) {
        console.log('✅ Assignment completed successfully, showing toast and reloading modal');
        window.showSimpleToast(data.message || 'Assignment completed successfully!', 'success');

        setTimeout(() => {
          console.log('🔄 Reloading modal after completion');
          window.reloadCurrentModal();
        }, 500); // Small delay to let toast show
      } else {
        console.error('❌ Complete failed:', data);
        window.showSimpleToast(data.message || 'Error completing assignment', 'error');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      window.showSimpleToast('Error completing assignment: ' + error.message, 'error');
    })
    .finally(() => {
      button.innerHTML = originalContent;
      button.disabled = false;
    });
  }
};

window.completeTillToday = function(customerId, month, year) {
  if (confirm('Mark all pending assignments till today as completed?')) {
    const button = event.target.closest('button');
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Processing...';
    button.disabled = true;

    console.log('Sending complete till today request:', { customerId, month, year });

    fetch('/customer-patterns/complete_till_today', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
      },
      body: JSON.stringify({
        customer_id: customerId,
        month: month,
        year: year
      })
    })
    .then(response => {
      console.log('Response status:', response.status);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      console.log('Response data:', data);
      showSimpleToast(data.message || 'Assignments completed successfully!', 'success');
      reloadCurrentModal();
    })
    .catch(error => {
      console.error('Error:', error);
      showSimpleToast('Error completing assignments: ' + error.message, 'error');
    })
    .finally(() => {
      button.innerHTML = originalText;
      button.disabled = false;
    });
  }
};

window.reloadCurrentModal = function() {
  console.log('🔄 reloadCurrentModal called');

  if (window.currentModalData) {
    console.log('✅ Found currentModalData:', window.currentModalData);
    const { customerId, customerName, month, year } = window.currentModalData;
    console.log('🔄 Reloading modal content for:', { customerId, customerName, month, year });
    loadModalContent(customerId, customerName, month, year);

    // Ensure handlers are initialized after reload
    setTimeout(() => {
      initializeModalButtonHandlers();
    }, 200);
  } else {
    console.error('❌ No currentModalData found - cannot reload modal');
    window.showSimpleToast('Error: Cannot reload modal - no current data', 'error');
  }
};

// Handle edit form submission via event delegation
document.addEventListener('submit', function(e) {
  if (e.target.id === 'edit-assignment-form') {
    // Check if this form is inside a nested modal or has nested-modal-form class
    const isInNestedModal = e.target.closest('.custom-edit-modal-content, #editModal') ||
                           e.target.classList.contains('nested-modal-form');
    if (isInNestedModal) {
      console.log('🔄 Ignoring form submission - handled by nested modal script');
      return; // Let the nested modal script handle it
    }

    e.preventDefault();
    e.stopPropagation();

    console.log('Edit form submission intercepted via delegation');
    const form = e.target;
    const submitBtn = document.getElementById('update-assignment-btn');
    const originalText = submitBtn.textContent;

    console.log('Form action:', form.action);
    console.log('Submitting to:', form.action + '.json');

    // Show loading state
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Updating...';

    const formData = new FormData(form);

    fetch(form.action + '.json', {
      method: 'PATCH',
      body: formData,
      headers: {
        'Accept': 'application/json',
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
      }
    })
    .then(response => {
      console.log('Response status:', response.status);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      console.log('Response data:', data);
      if (data.success) {
        console.log('Update successful, closing modal and reloading');
        window.showSimpleToast(data.message || 'Assignment updated successfully!', 'success');
        // Close edit modal and reload main modal
        window.closeEditModal();
        window.reloadCurrentModal();
      } else {
        console.log('Update failed:', data);
        window.showSimpleToast(data.message || 'Error updating assignment', 'error');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      window.showSimpleToast('Error updating assignment: ' + error.message, 'error');
    })
    .finally(() => {
      submitBtn.disabled = false;
      submitBtn.textContent = originalText;
    });
  }
});


window.showSimpleToast = function(message, type) {
  // Remove existing toasts
  const existingToasts = document.querySelectorAll('.simple-toast');
  existingToasts.forEach(toast => toast.remove());

  const bgColor = type === 'success' ? '#28a745' : '#dc3545';
  const icon = type === 'success' ? 'check-circle' : 'exclamation-triangle';

  const toastHtml = `
    <div class="simple-toast" style="
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 99999;
      background: ${bgColor};
      color: white;
      padding: 12px 20px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.3);
      display: flex;
      align-items: center;
      gap: 8px;
      animation: slideInRight 0.3s ease-out;
      max-width: 400px;
      word-wrap: break-word;
    ">
      <i class="fas fa-${icon}"></i>
      <span>${message}</span>
      <button onclick="this.parentElement.remove()" style="
        background: none;
        border: none;
        color: white;
        font-size: 18px;
        cursor: pointer;
        margin-left: 10px;
        padding: 0;
        width: 20px;
        height: 20px;
      ">×</button>
    </div>
  `;

  document.body.insertAdjacentHTML('beforeend', toastHtml);

  // Auto remove after 5 seconds
  setTimeout(() => {
    const toast = document.querySelector('.simple-toast');
    if (toast) {
      toast.style.animation = 'slideOutRight 0.3s ease-in';
      setTimeout(() => toast.remove(), 300);
    }
  }, 5000);
};

// Add CSS for toast animations
if (!document.querySelector('#toast-animations')) {
  const style = document.createElement('style');
  style.id = 'toast-animations';
  style.textContent = `
    @keyframes slideInRight {
      from { transform: translateX(100%); opacity: 0; }
      to { transform: translateX(0); opacity: 1; }
    }
    @keyframes slideOutRight {
      from { transform: translateX(0); opacity: 1; }
      to { transform: translateX(100%); opacity: 0; }
    }
  `;
  document.head.appendChild(style);
}

function loadModalContent(customerId, customerName, month, year) {
  const modalContent = document.getElementById('modalContent');

  // Store current modal data for reloading
  window.currentModalData = {
    customerId: customerId,
    customerName: customerName,
    month: month,
    year: year
  };

  // Show loading spinner
  modalContent.innerHTML = `
    <div class="text-center py-5">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
      <p class="mt-3">Loading assignments...</p>
    </div>
  `;

  fetch(`/customer-patterns/customer_deliveries?customer_id=${customerId}&month=${month}&year=${year}`)
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      modalContent.innerHTML = data.html;

      // After loading content, ensure event handlers are properly attached
      setTimeout(() => {
        initializeModalButtonHandlers();
      }, 100);
    })
    .catch(error => {
      console.error('Error loading modal content:', error);
      modalContent.innerHTML = `
        <div class="alert alert-danger text-center">
          <i class="fas fa-exclamation-triangle me-2"></i>
          Error loading data. Please try again.
        </div>
      `;
    });
}

// Initialize modal button handlers after content is dynamically loaded
function initializeModalButtonHandlers() {
  console.log('🔧 Initializing modal button handlers...');

  // Ensure our functions are globally available
  if (typeof window.completeAssignment !== 'function') {
    console.error('❌ completeAssignment function not available');
    return;
  }

  if (typeof window.deleteAssignment !== 'function') {
    console.error('❌ deleteAssignment function not available');
    return;
  }

  if (typeof window.editAssignment !== 'function') {
    console.error('❌ editAssignment function not available');
    return;
  }

  // Find all buttons with onclick handlers and verify they work
  const completeButtons = document.querySelectorAll('button[onclick*="completeAssignment"]');
  const deleteButtons = document.querySelectorAll('button[onclick*="deleteAssignment"]');
  const editButtons = document.querySelectorAll('button[onclick*="editAssignment"]');

  console.log('✅ Found buttons:', {
    complete: completeButtons.length,
    delete: deleteButtons.length,
    edit: editButtons.length
  });

  // Optionally, we can also add event listeners as backup
  completeButtons.forEach(button => {
    // Add a backup event listener in case onclick fails
    button.addEventListener('click', function(e) {
      console.log('🎯 Complete button clicked via event listener');

      const onclickAttr = button.getAttribute('onclick');
      if (onclickAttr && onclickAttr.includes('completeAssignment')) {
        // Extract assignment ID from onclick attribute
        const match = onclickAttr.match(/completeAssignment\((\d+)\)/);
        if (match && match[1]) {
          const assignmentId = match[1];
          console.log('🎯 Calling completeAssignment with ID:', assignmentId);

          // Call the function directly if onclick didn't work
          if (typeof window.completeAssignment === 'function') {
            e.preventDefault();
            window.completeAssignment(assignmentId);
          }
        }
      }
    });
  });

  deleteButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      console.log('🗑️ Delete button clicked via event listener');

      const onclickAttr = button.getAttribute('onclick');
      if (onclickAttr && onclickAttr.includes('deleteAssignment')) {
        const match = onclickAttr.match(/deleteAssignment\((\d+)\)/);
        if (match && match[1]) {
          const assignmentId = match[1];
          console.log('🗑️ Calling deleteAssignment with ID:', assignmentId);

          if (typeof window.deleteAssignment === 'function') {
            e.preventDefault();
            window.deleteAssignment(assignmentId);
          }
        }
      }
    });
  });

  editButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      console.log('✏️ Edit button clicked via event listener');

      const onclickAttr = button.getAttribute('onclick');
      if (onclickAttr && onclickAttr.includes('editAssignment')) {
        const match = onclickAttr.match(/editAssignment\((\d+)\)/);
        if (match && match[1]) {
          const assignmentId = match[1];
          console.log('✏️ Calling editAssignment with ID:', assignmentId);

          if (typeof window.editAssignment === 'function') {
            e.preventDefault();
            window.editAssignment(assignmentId);
          }
        }
      }
    });
  });

  console.log('✅ Modal button handlers initialized successfully');

  // Add a test to verify the functions are working
  if (completeButtons.length > 0) {
    console.log('🧪 Testing first complete button...');
    const firstButton = completeButtons[0];
    const onclick = firstButton.getAttribute('onclick');
    console.log('🧪 First complete button onclick:', onclick);

    // Verify the function can be executed
    if (onclick && onclick.includes('completeAssignment')) {
      const match = onclick.match(/completeAssignment\((\d+)\)/);
      if (match && match[1]) {
        console.log('🧪 Assignment ID extracted:', match[1]);
        console.log('🧪 completeAssignment function available:', typeof window.completeAssignment);
      }
    }
  }
}

// Make delivery modal functions globally available
window.openDeliveryModal = openDeliveryModal;
window.closeDeliveryModal = closeDeliveryModal;
window.loadModalContent = loadModalContent;
window.initializeModalButtonHandlers = initializeModalButtonHandlers;

// Edit Pattern Modal Functions - COMMENTED OUT (duplicate - function defined at top of script)
/* window.openEditPatternModal = function(customerId, customerName, scheduledQuantity, scheduledProduct, month, year) {
  console.log('Opening modal for:', customerName, 'Quantity:', scheduledQuantity); // Debug log

  const modal = document.getElementById('editPatternModal');
  if (!modal) {
    console.error('Modal not found!');
    return;
  }

  // Set form values
  const customerIdField = document.getElementById('editCustomerId');
  const customerNameField = document.getElementById('editCustomerName');
  const quantityField = document.getElementById('editScheduledQuantity');
  const monthField = document.getElementById('editMonth');
  const yearField = document.getElementById('editYear');
  const monthDisplay = document.getElementById('editMonthDisplay');

  if (customerIdField) customerIdField.value = customerId || '';
  if (customerNameField) customerNameField.value = customerName || '';
  if (quantityField) quantityField.value = scheduledQuantity || '';
  if (monthField) monthField.value = month || '';
  if (yearField) yearField.value = year || '';
  if (monthDisplay) monthDisplay.textContent = getMonthName(month) + ' ' + year;

  // Update debug info
  const debugCustomerId = document.getElementById('debugCustomerId');
  const debugMonth = document.getElementById('debugMonth');
  const debugYear = document.getElementById('debugYear');
  if (debugCustomerId) debugCustomerId.textContent = customerId;
  if (debugMonth) debugMonth.textContent = month;
  if (debugYear) debugYear.textContent = year;

  // Load products dropdown
  loadProductsForEdit();

  // Set current product if available
  if (scheduledProduct && scheduledProduct !== 'null' && scheduledProduct !== '') {
    setTimeout(() => {
      const productField = document.getElementById('editScheduledProduct');
      if (productField) {
        // Try to find by name first, then by value
        const options = productField.querySelectorAll('option');
        for (let option of options) {
          if (option.textContent.toLowerCase().includes(scheduledProduct.toLowerCase())) {
            option.selected = true;
            break;
          }
        }
      }
    }, 500);
  }

  // Show modal with animation
  modal.classList.add('show');
  modal.style.display = 'flex';
  document.body.classList.add('modal-open');

  console.log('Modal should be visible now'); // Debug log
};

window.closeEditPatternModal = function() {
  const modal = document.getElementById('editPatternModal');
  if (!modal) return;

  modal.classList.remove('show');
  modal.style.display = 'none';
  document.body.classList.remove('modal-open');

  // Reset form
  const form = document.getElementById('editPatternForm');
  if (form) form.reset();
}; */

function getMonthName(monthNum) {
  const months = ['', 'January', 'February', 'March', 'April', 'May', 'June',
                 'July', 'August', 'September', 'October', 'November', 'December'];
  return months[monthNum];
}

function loadProductsForEdit() {
  const select = document.getElementById('editScheduledProduct');
  if (!select) return;

  select.innerHTML = '<option value="">Loading products...</option>';

  fetch('/products.json')
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    })
    .then(products => {
      select.innerHTML = '<option value="">Select Product</option>';

      if (products && products.length > 0) {
        products.forEach(product => {
          const option = document.createElement('option');
          option.value = product.id;
          option.textContent = `${product.name}${product.unit_type ? ' (' + product.unit_type + ')' : ''}`;
          select.appendChild(option);
        });
      } else {
        select.innerHTML = '<option value="">No products available</option>';
      }
    })
    .catch(error => {
      console.error('Error loading products:', error);
      select.innerHTML = '<option value="">Error loading products</option>';
    });
}

// Handle edit pattern form submission
document.addEventListener('DOMContentLoaded', function() {
  const editForm = document.getElementById('editPatternForm');
  if (editForm) {
    editForm.addEventListener('submit', function(e) {
      e.preventDefault();

  const submitBtn = document.getElementById('updatePatternBtn');
  const originalText = submitBtn.innerHTML;

  // Show attractive loading state
  submitBtn.disabled = true;
  submitBtn.innerHTML = '<div class="d-flex align-items-center"><div class="spinner-grow spinner-grow-sm text-light me-2" role="status"></div>Updating assignments...</div>';

  // Show progress container with animation
  const progressContainer = document.getElementById('updateProgressContainer');
  const progressBar = document.getElementById('progressBar');
  const progressText = document.getElementById('progressText');
  const progressStatus = document.getElementById('progressStatus');

  if (progressContainer) {
    progressContainer.style.display = 'block';
  }

  // Simulate progress animation
  let progress = 0;
  const progressInterval = setInterval(() => {
    progress += Math.random() * 15;
    if (progress > 85) progress = 85; // Stop at 85% until real completion

    if (progressBar && progressText && progressStatus) {
      progressBar.style.width = `${progress}%`;
      progressText.textContent = `${Math.round(progress)}%`;

      if (progress < 30) {
        progressStatus.textContent = 'Validating assignment data...';
      } else if (progress < 60) {
        progressStatus.textContent = 'Updating assignments...';
      } else {
        progressStatus.textContent = 'Recalculating amounts...';
      }
    }
  }, 200);

  const formData = {
    customer_id: document.getElementById('editCustomerId').value,
    scheduled_quantity: document.getElementById('editScheduledQuantity').value,
    unit: document.getElementById('editUnit').value,
    target_month: document.getElementById('editTargetMonth').value,
    target_year: document.getElementById('editTargetYear').value
  };

  fetch('/customer-patterns/update_pattern', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
    },
    body: JSON.stringify(formData)
  })
  .then(response => response.json())
  .then(data => {
    // Clear progress interval
    clearInterval(progressInterval);

    // Update progress to 100%
    const progressBar = document.getElementById('progressBar');
    const progressText = document.getElementById('progressText');
    const progressStatus = document.getElementById('progressStatus');

    if (progressBar && progressText && progressStatus) {
      progressBar.style.width = '100%';
      progressText.textContent = '100%';
      progressStatus.innerHTML = '<i class="fas fa-check text-success me-1"></i>Update completed successfully!';
    }

    if (data.success) {
      // Show enhanced success message
      const message = `✅ Successfully updated ${data.updated_count || 0} assignments for ${data.customer_name || 'customer'} in ${data.month_name || 'target month'} ${data.year || ''}!`;

      setTimeout(() => {
        window.showSimpleToast(message, 'success');
        closeEditPatternModal();
        // Reload the page to show updated data
        window.location.reload();
      }, 1000);
    } else {
      const errorMsg = data.message || 'Error updating pattern';
      if (progressStatus) {
        progressStatus.innerHTML = `<i class="fas fa-times text-danger me-1"></i>${errorMsg}`;
      }
      window.showSimpleToast(errorMsg, 'error');
    }
  })
  .catch(error => {
    // Clear progress interval
    clearInterval(progressInterval);

    console.error('Error:', error);
    const progressStatus = document.getElementById('progressStatus');
    if (progressStatus) {
      progressStatus.innerHTML = `<i class="fas fa-times text-danger me-1"></i>Error: ${error.message}`;
    }
    window.showSimpleToast('Error updating pattern: ' + error.message, 'error');
  })
  .finally(() => {
    // Clear progress interval as final cleanup
    clearInterval(progressInterval);

    // Reset button state
    submitBtn.disabled = false;
    submitBtn.innerHTML = originalText;

    // Hide progress container after a delay
    setTimeout(() => {
      if (progressContainer) {
        progressContainer.style.display = 'none';
      }
    }, 3000);
  });
    });
  }
});

// Add event listeners for edit pattern buttons
document.addEventListener('click', function(e) {
  if (e.target.closest('.edit-pattern-btn')) {
    const btn = e.target.closest('.edit-pattern-btn');
    const customerId = btn.getAttribute('data-customer-id');
    const customerName = btn.getAttribute('data-customer-name');
    const scheduledQuantity = btn.getAttribute('data-scheduled-quantity');
    const scheduledProduct = btn.getAttribute('data-scheduled-product');
    const month = btn.getAttribute('data-month');
    const year = btn.getAttribute('data-year');

    openEditPatternModal(customerId, customerName, scheduledQuantity, scheduledProduct, month, year);
  }
});

// Customer dropdown is now a native HTML select - no JavaScript needed!
console.log('✅ Customer dropdown ready - using native HTML select element');

// ✅ Customer dropdown implemented as native HTML select element!
  console.log('🔍 Searching for:', query);

  // Show loading
  dropdown.innerHTML = `
    <div class="search-dropdown-item" style="justify-content: center;">
      <div class="spinner-border spinner-border-sm text-primary" role="status"></div>
      <span class="ms-2">Searching...</span>
    </div>
  `;
  dropdown.style.display = 'block';

  // Search API call
  fetch(`/customer-patterns/search_customers?query=${encodeURIComponent(query)}`, {
    method: 'GET',
    headers: {
      'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
    }
  })
  .then(response => response.json())
  .then(data => {
    console.log('📊 Search results:', data);
    displaySearchResults(data, dropdown, query);
  })
  .catch(error => {
    console.error('❌ Search error:', error);
    dropdown.innerHTML = '<div class="search-dropdown-no-results text-danger">Search failed. Please try again.</div>';
  });
}

function displaySearchResults(data, dropdown, query) {
  if (data.success && data.customers && data.customers.length > 0) {
    console.log('✅ Found', data.customers.length, 'customers');

    const html = data.customers.map(customer => `
      <div class="search-dropdown-item" data-id="${customer.id}" data-name="${customer.name}"
           onclick="selectCustomer('${customer.id}', '${customer.name.replace(/'/g, '&#39;')}')"
           style="cursor: pointer;">
        <div class="customer-avatar">${customer.name.charAt(0).toUpperCase()}</div>
        <div class="flex-grow-1">
          <div class="fw-bold">${highlightText(customer.name, query)}</div>
        </div>
      </div>
    `).join('');

    dropdown.innerHTML = html;
    dropdown.style.display = 'block';
  } else {
    console.log('❌ No customers found');
    dropdown.innerHTML = `
      <div class="search-dropdown-no-results">
        <i class="fas fa-search text-muted mb-2" style="font-size: 20px;"></i>
        <div>No customers found for "<strong>${query}</strong>"</div>
      </div>
    `;
    dropdown.style.display = 'block';
  }
}

function highlightText(text, query) {
  if (!query) return text;
  const regex = new RegExp(`(${query})`, 'gi');
  return text.replace(regex, '<mark style="background: yellow;">$1</mark>');
}

// Global function for selecting customers
window.selectCustomer = function(id, name) {
  console.log('👆 Selected customer:', name);

  const input = document.getElementById('customerSearchInput');
  const hiddenInput = document.getElementById('selectedCustomerId');
  const dropdown = document.getElementById('customerSearchResults');

  if (input) input.value = name;
  if (hiddenInput) hiddenInput.value = id;
  if (dropdown) dropdown.style.display = 'none';

  // Auto-submit form
  const form = document.getElementById('patterns-filter-form');
  if (form) {
    setTimeout(() => form.submit(), 100);
  }
};

function setupCustomerSearch() {
  console.log('🚀 Setting up customer search functionality...');

  customerSearchInput.addEventListener('input', function() {
    const query = this.value.trim();
    console.log('🔤 Input changed, query:', query);

    clearTimeout(customerSearchTimeout);
    customerSearchTimeout = setTimeout(() => {
      if (query.length === 0) {
        hideCustomerSearch();
        selectedCustomerIdInput.value = '';
        return;
      }

      if (query.length < 1) {
        return;
      }

      console.log('🔍 Searching for customers with query:', query);
      searchCustomers(query);
    }, 300);
  });

  customerSearchInput.addEventListener('keydown', function(e) {
    const items = customerSearchResultsDiv.querySelectorAll('.search-dropdown-item');

    if (e.key === 'ArrowDown') {
      e.preventDefault();
      currentHighlightIndex = Math.min(currentHighlightIndex + 1, items.length - 1);
      highlightItem();
    } else if (e.key === 'ArrowUp') {
      e.preventDefault();
      currentHighlightIndex = Math.max(currentHighlightIndex - 1, -1);
      highlightItem();
    } else if (e.key === 'Enter') {
      e.preventDefault();
      if (currentHighlightIndex >= 0 && items[currentHighlightIndex]) {
        selectCustomer(
          items[currentHighlightIndex].dataset.id,
        items[currentHighlightIndex].dataset.name
      );
    }
  } else if (e.key === 'Escape') {
    hideCustomerSearch();
  }
});

customerSearchInput.addEventListener('focus', function() {
  console.log('🎯 Customer search input focused');
  const query = this.value.trim();
  if (query.length >= 1) {
    console.log('🔄 Re-searching on focus for:', query);
    searchCustomers(query);
  } else {
    // Show a hint when focused but empty
    customerSearchResultsDiv.innerHTML = `
      <div class="search-dropdown-no-results" style="padding: 15px; text-align: center; color: #666;">
        <i class="fas fa-info-circle me-2"></i>Start typing to search for customers...
        <br><small style="color: #999; margin-top: 5px;">Try typing "p", "a", "m", etc.</small>
      </div>
    `;
    customerSearchResultsDiv.style.display = 'block';
    console.log('💡 Showing hint dropdown');
  }
});

// Hide dropdown when clicking outside
document.addEventListener('click', function(e) {
  if (!e.target.closest('.position-relative')) {
    hideCustomerSearch();
  }
});

} // End setupCustomerSearch function

// Create super attractive loader instance
const superCustomerPatternsLoader = createSuperAttractiveLoader('superCustomerPatternsLoader');

function searchCustomers(query) {
  console.log('🔍 Starting search for:', query);

  // Show attractive loading indicator
  customerSearchResultsDiv.innerHTML = `
    <div class="search-dropdown-item" style="background: linear-gradient(135deg, #f8fafc, #f1f5f9); justify-content: center;">
      <div class="spinner-border spinner-border-sm text-primary me-2" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
      <span style="color: #4f46e5; font-weight: 500;">Searching customers...</span>
    </div>
  `;
  customerSearchResultsDiv.style.display = 'block';

  // Make API call to search customers
  fetch(`/customer-patterns/search_customers?query=${encodeURIComponent(query)}`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
    }
  })
  .then(response => {
    console.log('📡 API Response status:', response.status);
    return response.json();
  })
  .then(data => {
    console.log('📊 API Data received:', data);
    if (data.success && data.customers && data.customers.length > 0) {
      customerSearchResults = data.customers.slice(0, 8); // Limit to 8 results
      console.log('✅ Found customers:', customerSearchResults.length);
      displayCustomerResults();
    } else {
      console.log('❌ No customers found');
      customerSearchResultsDiv.innerHTML = `
        <div class="search-dropdown-no-results">
          <i class="fas fa-search text-muted mb-2" style="font-size: 24px;"></i>
          <div>No customers found for "<strong>${query}</strong>"</div>
          <small class="text-muted mt-1">Try searching with a different name</small>
        </div>
      `;
      customerSearchResultsDiv.style.display = 'block';
    }
  })
  .catch(error => {
    console.error('❌ Error searching customers:', error);
    customerSearchResultsDiv.innerHTML = '<div class="search-dropdown-no-results text-danger">Error searching customers. Please try again.</div>';
    customerSearchResultsDiv.style.display = 'block';
  });
}

function displayCustomerResults() {
  console.log('🎨 Displaying', customerSearchResults.length, 'customers');

  if (customerSearchResults.length === 0) {
    customerSearchResultsDiv.innerHTML = '<div class="search-dropdown-no-results">No customers found</div>';
    customerSearchResultsDiv.style.display = 'block';
    return;
  }

  const html = customerSearchResults.map((customer, index) => `
    <div class="search-dropdown-item ${index === currentHighlightIndex ? 'highlighted' : ''}"
         data-id="${customer.id}"
         data-name="${customer.name}"
         onclick="selectCustomer('${customer.id}', '${customer.name}')"
         style="cursor: pointer;">
      <div class="customer-avatar" style="background: #4f46e5;">${customer.name.charAt(0).toUpperCase()}</div>
      <div class="flex-grow-1">
        <div class="fw-bold">${highlightMatch(customer.name, customerSearchInput.value)}</div>
        ${customer.phone ? `<small class="text-muted"><i class="fas fa-phone fa-xs me-1"></i>${customer.phone}</small>` : ''}
        ${customer.member_id ? `<small class="text-muted ms-2"><i class="fas fa-id-card fa-xs me-1"></i>ID: ${customer.member_id}</small>` : ''}
      </div>
    </div>
  `).join('');

  customerSearchResultsDiv.innerHTML = html;
  customerSearchResultsDiv.style.display = 'block';
  currentHighlightIndex = -1;

  console.log('✅ Dropdown displayed with', customerSearchResults.length, 'items');
}

function highlightMatch(text, query) {
  if (!query) return text;
  const regex = new RegExp(`(${query})`, 'gi');
  return text.replace(regex, '<mark style="background: yellow; padding: 0;">$1</mark>');
}

function highlightItem() {
  const items = customerSearchResultsDiv.querySelectorAll('.search-dropdown-item');
  items.forEach((item, index) => {
    if (index === currentHighlightIndex) {
      item.classList.add('highlighted');
    } else {
      item.classList.remove('highlighted');
    }
  });
}

window.selectCustomer = function(id, name) {
  customerSearchInput.value = name;
  selectedCustomerIdInput.value = id;
  hideCustomerSearch();

  // Auto-submit form after selection
  const form = document.getElementById('patterns-filter-form') || customerSearchInput.closest('form');
  if (form) {
    setTimeout(() => form.submit(), 200);
  }
};

function hideCustomerSearch() {
  if (customerSearchResultsDiv) {
    customerSearchResultsDiv.style.display = 'none';
  }
  currentHighlightIndex = -1;
}

// Edit Pattern Modal Functions - COMMENTED OUT (another duplicate)
/* window.openEditPatternModal = function(customerId, customerName, scheduledQuantity, scheduledProduct, month, year) {
  console.log('Opening modal for:', customerName, 'Quantity:', scheduledQuantity); // Debug log

  const modal = document.getElementById('editPatternModal');
  if (!modal) {
    console.error('Modal not found!');
    return;
  }

  // Set form values
  const customerIdField = document.getElementById('editCustomerId');
  const customerNameField = document.getElementById('editCustomerName');
  const quantityField = document.getElementById('editScheduledQuantity');
  const monthField = document.getElementById('editMonth');
  const yearField = document.getElementById('editYear');
  const monthDisplay = document.getElementById('editMonthDisplay');

  if (customerIdField) customerIdField.value = customerId || '';
  if (customerNameField) customerNameField.value = customerName || '';
  if (quantityField) quantityField.value = scheduledQuantity || '';
  if (monthField) monthField.value = month || '';
  if (yearField) yearField.value = year || '';
  if (monthDisplay) monthDisplay.textContent = getMonthName(month) + ' ' + year;

  // Update debug info
  const debugCustomerId = document.getElementById('debugCustomerId');
  const debugMonth = document.getElementById('debugMonth');
  const debugYear = document.getElementById('debugYear');
  if (debugCustomerId) debugCustomerId.textContent = customerId;
  if (debugMonth) debugMonth.textContent = month;
  if (debugYear) debugYear.textContent = year;

  // Load products dropdown
  loadProductsForEdit();

  // Set current product if available
  if (scheduledProduct && scheduledProduct !== 'null' && scheduledProduct !== '') {
    setTimeout(() => {
      const productField = document.getElementById('editScheduledProduct');
      if (productField) {
        // Try to find by name first, then by value
        const options = productField.querySelectorAll('option');
        for (let option of options) {
          if (option.textContent.toLowerCase().includes(scheduledProduct.toLowerCase())) {
            option.selected = true;
            break;
          }
        }
      }
    }, 500);
  }

  // Show modal
  modal.style.display = 'flex';
  document.body.classList.add('modal-open');
  console.log('Modal should be visible now');
}

function closeEditPatternModal() {
  const modal = document.getElementById('editPatternModal');
  if (modal) {
    modal.style.display = 'none';
    document.body.classList.remove('modal-open');
    console.log('Edit modal closed');
  }
}

function getMonthName(monthNum) {
  const months = ['', 'January', 'February', 'March', 'April', 'May', 'June',
                 'July', 'August', 'September', 'October', 'November', 'December'];
  return months[monthNum];
}

function loadProductsForEdit() {
  const select = document.getElementById('editScheduledProduct');
  if (!select) {
    console.error('Product select element not found');
    return;
  }

  select.innerHTML = '<option value="">Loading...</option>';

  fetch('/products.json')
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(products => {
      select.innerHTML = '<option value="">Select Product</option>';

      if (products && products.length > 0) {
        products.forEach(product => {
          const option = document.createElement('option');
          option.value = product.id;
          option.textContent = `${product.name}${product.unit_type ? ' (' + product.unit_type + ')' : ''}`;
          select.appendChild(option);
        });
      } else {
        select.innerHTML = '<option value="">No products available</option>';
      }
    })
    .catch(error => {
      console.error('Error loading products:', error);
      select.innerHTML = '<option value="">Error loading products</option>';
    });
} */

}
</script>

<script type="text/javascript">
// Modern Edit Pattern Modal with Product Loading and Advanced Features
let currentProductsCache = null;
let isLoadingProducts = false;

// Define delivery modal functions in this script block to ensure availability
function openDeliveryModal(customerId, customerName, month, year) {
  console.log(`🚚 Opening delivery modal for ${customerName}`);

  // Update title
  const modalTitle = document.getElementById('modalCustomerName');
  if (modalTitle) {
    modalTitle.textContent = `${customerName} - Deliveries`;
  }

  // Show modal
  const modal = document.getElementById('deliveryModal');
  if (modal) {
    modal.style.display = 'flex';
    document.body.classList.add('modal-open');

    // Load content
    loadDeliveryModalContent(customerId, customerName, month, year);
  } else {
    console.error('❌ Delivery modal element not found');
  }
}

function closeDeliveryModal() {
  console.log('🔒 Closing delivery modal');
  const modal = document.getElementById('deliveryModal');
  if (modal) {
    modal.style.display = 'none';
    document.body.classList.remove('modal-open');

    // Ensure body returns to normal state
    document.body.style.overflow = '';
    document.body.style.position = '';
    document.body.style.width = '';
  }
}

function loadDeliveryModalContent(customerId, customerName, month, year) {
  const modalContent = document.getElementById('modalContent');
  if (!modalContent) {
    console.error('❌ Modal content element not found');
    return;
  }

  // Store current modal data for reloading
  window.currentModalData = {
    customerId: customerId,
    customerName: customerName,
    month: month,
    year: year
  };

  // Show loading spinner
  modalContent.innerHTML = `
    <div class="text-center py-5">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
      <p class="mt-3">Loading delivery assignments...</p>
    </div>
  `;

  fetch(`/customer-patterns/customer_deliveries?customer_id=${customerId}&month=${month}&year=${year}`)
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      return response.json();
    })
    .then(data => {
      modalContent.innerHTML = data.html;
    })
    .catch(error => {
      console.error('❌ Error loading delivery assignments:', error);
      modalContent.innerHTML = `
        <div class="alert alert-danger text-center">
          <i class="fas fa-exclamation-triangle me-2"></i>
          Error loading delivery assignments. Please try again.
          <br><small class="text-muted">${error.message}</small>
        </div>
      `;
    });
}

// Make delivery functions globally available
window.openDeliveryModal = openDeliveryModal;
window.closeDeliveryModal = closeDeliveryModal;
window.loadDeliveryModalContent = loadDeliveryModalContent;

// Enhanced modal opening function with comprehensive data loading
async function openEditPatternModal(customerId, customerName, scheduledQuantity, scheduledProduct, month, year) {
  console.log('🎯 Opening comprehensive edit pattern modal for:', customerName);

  const modal = document.getElementById('editPatternModal');
  const loadingOverlay = document.getElementById('modalLoadingOverlay');

  if (!modal) {
    console.error('❌ Modal element not found!');
    return;
  }

  try {
    // Show modal with loading state
    modal.style.display = 'flex';
    document.body.classList.add('modal-open');

    if (loadingOverlay) {
      loadingOverlay.style.display = 'flex';
    }

    // Set basic form values
    setModalFormValues(customerId, customerName, scheduledQuantity, scheduledProduct, month, year);

    // Load all data in parallel for better performance
    await Promise.all([
      loadProductsForModal(scheduledProduct),
      loadDeliveryPeopleForModal(),
      loadAssignmentSummary(customerId, month, year)
    ]);

    // Hide loading overlay
    if (loadingOverlay) {
      loadingOverlay.style.display = 'none';
    }

    console.log('✅ Modal opened successfully with all data loaded');

    // Add pulse animation to quantity field for attention
    const quantityField = document.getElementById('editScheduledQuantity');
    if (quantityField) {
      quantityField.classList.add('pulse-animation');
      setTimeout(() => {
        quantityField.classList.remove('pulse-animation');
      }, 2000);
    }

    // Setup real-time calculation updates
    setupRealTimeCalculations();

  } catch (error) {
    console.error('❌ Error opening modal:', error);
    if (loadingOverlay) {
      loadingOverlay.style.display = 'none';
    }
    showToast(`Error loading modal: ${error.message}`, 'error');
  }
}

// Set form values in the modal
function setModalFormValues(customerId, customerName, scheduledQuantity, scheduledProduct, month, year) {
  // Basic fields
  const customerIdField = document.getElementById('editCustomerId');
  const customerNameField = document.getElementById('editCustomerName');
  const quantityField = document.getElementById('editScheduledQuantity');
  const monthField = document.getElementById('editMonth');
  const yearField = document.getElementById('editYear');
  const targetMonthField = document.getElementById('editTargetMonth');
  const targetYearField = document.getElementById('editTargetYear');

  if (customerIdField) customerIdField.value = customerId || '';
  if (customerNameField) customerNameField.value = `🏠 ${customerName || ''}`;
  if (quantityField) quantityField.value = scheduledQuantity || '';
  if (monthField) monthField.value = month || '';
  if (yearField) yearField.value = year || '';
  if (targetMonthField) targetMonthField.value = month || '';
  if (targetYearField) targetYearField.value = year || '';

  // Debug fields
  const debugCustomerId = document.getElementById('debugCustomerId');
  const debugMonth = document.getElementById('debugMonth');
  const debugYear = document.getElementById('debugYear');
  const editMonthDisplay = document.getElementById('editMonthDisplay');

  if (debugCustomerId) debugCustomerId.textContent = customerId || 'N/A';
  if (debugMonth) debugMonth.textContent = month || 'N/A';
  if (debugYear) debugYear.textContent = year || 'N/A';
  if (editMonthDisplay) {
    const monthName = month ? new Date(year, month-1).toLocaleString('default', { month: 'long', year: 'numeric' }) : 'Unknown';
    editMonthDisplay.textContent = monthName;
  }
}

// Load products for the modal
async function loadProductsForModal(selectedProduct = null) {
  console.log('📦 Loading products for modal...');

  const productSelect = document.getElementById('editScheduledProduct');
  if (!productSelect) return;

  // Show loading state
  productSelect.innerHTML = '<option value="">🔄 Loading products...</option>';

  try {
    // Use cached products if available
    if (!currentProductsCache) {
      isLoadingProducts = true;
      const response = await fetch('/customer-patterns/get_products', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
        }
      });

      if (!response.ok) {
        const text = await response.text();
        throw new Error(`HTTP ${response.status}: ${response.statusText}. ${text}`);
      }

      const data = await response.json();

      if (data.success) {
        currentProductsCache = data.products || [];
      } else {
        throw new Error(data.error || 'Failed to load products');
      }

      isLoadingProducts = false;
    }

    // Populate the select
    productSelect.innerHTML = '<option value="">🎯 Select Product</option>';

    currentProductsCache.forEach(product => {
      const option = document.createElement('option');
      option.value = product.id;
      const price = product.price || 0;
      const unitType = product.unit_type || 'units';
      option.textContent = `🥛 ${product.name} (₹${price}/${unitType})`;

      // Select the current product if it matches
      if (selectedProduct && product.name === selectedProduct) {
        option.selected = true;
      }

      productSelect.appendChild(option);
    });

    console.log(`✅ Loaded ${currentProductsCache.length} products`);

  } catch (error) {
    console.error('❌ Error loading products:', error);
    productSelect.innerHTML = '<option value="">❌ Error loading products</option>';
    showToast(`Failed to load products: ${error.message}`, 'error');
  }
}

// Enhanced close modal function
function closeEditPatternModal() {
  console.log('🔒 Closing edit pattern modal');

  const modal = document.getElementById('editPatternModal');
  if (modal) {
    modal.style.display = 'none';
    document.body.classList.remove('modal-open');

    // Reset form
    const form = document.getElementById('editPatternForm');
    if (form) form.reset();

    // Clear any error states
    const inputs = modal.querySelectorAll('.form-control, .form-select');
    inputs.forEach(input => {
      input.classList.remove('is-invalid');
    });
  }
}

// Enhanced form submission with comprehensive loading states and progress tracking
async function submitPatternUpdate(event) {
  event.preventDefault();

  const submitBtn = document.getElementById('updatePatternBtn');
  const progressContainer = document.getElementById('updateProgressContainer');
  const progressBar = document.getElementById('progressBar');
  const progressText = document.getElementById('progressText');
  const progressStatus = document.getElementById('progressStatus');
  const originalBtnText = submitBtn.innerHTML;

  try {
    // Show progress container and update button state
    progressContainer.style.display = 'block';
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<i class="fas fa-cog fa-spin me-2"></i>🚀 Processing Updates...';

    // Animate progress - phase 1: preparing
    updateProgress(10, 'Validating form data...');

    // Get comprehensive form data
    const formData = new FormData();
    formData.append('customer_id', document.getElementById('editCustomerId').value);
    formData.append('target_month', document.getElementById('editTargetMonth').value);
    formData.append('target_year', document.getElementById('editTargetYear').value);
    formData.append('scheduled_quantity', document.getElementById('editScheduledQuantity').value);
    formData.append('product_id', document.getElementById('editScheduledProduct').value);
    formData.append('delivery_person_id', document.getElementById('editDeliveryPerson').value);

    updateProgress(25, 'Submitting update request...');

    // Submit the comprehensive update
    const response = await fetch('/customer-patterns/update_pattern', {
      method: 'POST',
      body: formData,
      headers: {
        'X-Requested-With': 'XMLHttpRequest',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
      }
    });

    updateProgress(60, 'Processing server response...');

    const result = await response.json();

    if (result.success) {
      updateProgress(85, 'Update completed successfully!');

      // Show detailed success message
      const details = [
        `✅ Updated ${result.updated_count}/${result.total_assignments} assignments`,
        `📅 Month: ${result.month_name} ${result.year}`,
        result.delivery_person_updated ? '👤 Delivery person updated' : '',
        result.errors?.length > 0 ? `⚠️ ${result.errors.length} minor issues` : ''
      ].filter(Boolean).join(' • ');

      showToast(`🎯 ${result.message}\n${details}`, 'success');

      updateProgress(100, 'All assignments updated successfully!');

      // Wait a moment to show completion, then close
      setTimeout(() => {
        closeEditPatternModal();
        // Reload the page to show updated data
        setTimeout(() => {
          window.location.reload();
        }, 500);
      }, 1500);

    } else {
      throw new Error(result.message || 'Update failed');
    }

  } catch (error) {
    console.error('❌ Error updating pattern:', error);
    updateProgress(0, `Error: ${error.message}`);
    showToast(`❌ Update Failed: ${error.message}`, 'error');

    // Hide progress after error
    setTimeout(() => {
      progressContainer.style.display = 'none';
    }, 3000);
  } finally {
    // Restore button state
    submitBtn.disabled = false;
    submitBtn.innerHTML = originalBtnText;
  }

  // Progress update helper function
  function updateProgress(percent, status) {
    if (progressBar) {
      progressBar.style.width = `${percent}%`;
    }
    if (progressText) {
      progressText.textContent = `${percent}%`;
    }
    if (progressStatus) {
      progressStatus.textContent = status;
    }
  }
}

// Modern toast notification system
function showToast(message, type = 'info') {
  // Create toast container if it doesn't exist
  let toastContainer = document.getElementById('toastContainer');
  if (!toastContainer) {
    toastContainer = document.createElement('div');
    toastContainer.id = 'toastContainer';
    toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
    toastContainer.style.zIndex = '9999';
    document.body.appendChild(toastContainer);
  }

  // Create toast element
  const toast = document.createElement('div');
  toast.className = 'toast show';
  toast.setAttribute('role', 'alert');

  const bgClass = type === 'success' ? 'bg-success' : type === 'error' ? 'bg-danger' : 'bg-info';

  toast.innerHTML = `
    <div class="toast-header ${bgClass} text-white border-0">
      <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-triangle' : 'info-circle'} me-2"></i>
      <strong class="me-auto">${type === 'success' ? 'Success' : type === 'error' ? 'Error' : 'Info'}</strong>
      <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
    </div>
    <div class="toast-body ${bgClass} text-white">
      ${message}
    </div>
  `;

  toastContainer.appendChild(toast);

  // Auto remove after 5 seconds
  setTimeout(() => {
    if (toast.parentNode) {
      toast.parentNode.removeChild(toast);
    }
  }, 5000);
}

// Event delegation for both edit pattern and delivery buttons
document.addEventListener('click', function(e) {
  // Handle edit pattern buttons
  if (e.target.closest('[data-action="edit-pattern"]')) {
    e.preventDefault();
    const button = e.target.closest('[data-action="edit-pattern"]');
    console.log('🎯 Edit Pattern button clicked via delegation');

    const customerId = button.getAttribute('data-customer-id');
    const customerName = button.getAttribute('data-customer-name');
    const scheduledQuantity = button.getAttribute('data-scheduled-quantity');
    const scheduledProduct = button.getAttribute('data-scheduled-product');
    const month = button.getAttribute('data-month');
    const year = button.getAttribute('data-year');

    openEditPatternModal(customerId, customerName, scheduledQuantity, scheduledProduct, month, year);
    return;
  }

  // Handle delivery modal buttons with event delegation
  if (e.target.closest('.delivery-modal-btn')) {
    e.preventDefault();
    const button = e.target.closest('.delivery-modal-btn');
    console.log('🚚 Delivery button clicked - opening delivery modal');

    const customerId = button.getAttribute('data-customer-id');
    const customerName = button.getAttribute('data-customer-name');
    const month = button.getAttribute('data-month');
    const year = button.getAttribute('data-year');

    // Call the delivery modal function
    if (typeof window.openDeliveryModal === 'function') {
      console.log('✅ Found openDeliveryModal function, calling it...');
      window.openDeliveryModal(customerId, customerName, month, year);
    } else {
      console.error('❌ openDeliveryModal function still not found!');
      console.log('Available modal functions:', Object.keys(window).filter(key => key.includes('Modal')));

      // Try calling the function directly if it exists in local scope
      if (typeof openDeliveryModal === 'function') {
        console.log('🔄 Trying direct function call...');
        openDeliveryModal(customerId, customerName, month, year);
      }
    }
    return;
  }
});

// Form submission handler
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('editPatternForm');
  if (form) {
    form.addEventListener('submit', submitPatternUpdate);
  }
});

// Global function exports
window.openEditPatternModal = openEditPatternModal;
window.closeEditPatternModal = closeEditPatternModal;

// Ensure all assignment modal functions are globally available
console.log('🔧 Ensuring assignment modal functions are available...');

// Re-export editAssignment function to ensure availability
if (!window.editAssignment) {
  window.editAssignment = function(id) {
    console.log('🎯 Backup editAssignment function called with ID:', id);

    if (!id) {
      console.error('❌ No assignment ID provided');
      alert('Error: No assignment ID provided');
      return;
    }

    const editModal = document.getElementById('editModal');
    const editModalTitle = document.getElementById('editModalTitle');

    if (!editModal || !editModalTitle) {
      console.error('❌ Edit modal elements not found');
      alert('Error: Edit modal not found');
      return;
    }

    editModalTitle.textContent = `Edit Assignment #${id}`;
    editModal.style.display = 'flex';
    document.body.classList.add('modal-open');

    // Load edit form
    if (window.loadEditForm) {
      window.loadEditForm(id);
    } else {
      console.error('❌ loadEditForm function not found');
    }
  };
}

// Note: deleteAssignment is already defined above, so this backup is not needed

// Export closeEditModal function
if (!window.closeEditModal) {
  window.closeEditModal = function() {
    console.log('🔒 Closing edit modal');
    const editModal = document.getElementById('editModal');
    if (editModal) {
      editModal.style.display = 'none';
      document.body.classList.remove('modal-open');
      document.body.style.overflow = '';
      document.body.style.position = '';
      document.body.style.width = '';
    }
  };
}

console.log('✅ Assignment modal functions exported:', {
  editAssignment: typeof window.editAssignment,
  deleteAssignment: typeof window.deleteAssignment,
  closeEditModal: typeof window.closeEditModal,
  loadEditForm: typeof window.loadEditForm
});

// Add comprehensive event delegation for dynamically loaded content
document.addEventListener('click', function(e) {
  // Handle edit assignment buttons from dynamic content
  if (e.target.classList.contains('edit-assignment-btn') ||
      e.target.closest('.edit-assignment-btn') ||
      e.target.getAttribute('onclick')?.includes('editAssignment')) {

    e.preventDefault();
    e.stopPropagation();

    console.log('🎯 Edit assignment button clicked via delegation');

    // Try to get the assignment ID from various sources
    const button = e.target.closest('button') || e.target;
    const assignmentId = button.dataset.assignmentId ||
                        button.dataset.id ||
                        button.getAttribute('data-assignment-id') ||
                        button.getAttribute('data-id');

    console.log('Assignment ID found:', assignmentId);

    if (assignmentId && window.editAssignment) {
      console.log('✅ Calling editAssignment with ID:', assignmentId);
      window.editAssignment(assignmentId);
    } else {
      console.error('❌ Could not find assignment ID or editAssignment function');
      console.log('Button element:', button);
      console.log('Available data attributes:', button.dataset);
    }

    return false;
  }

  // Handle delete assignment buttons from dynamic content
  if (e.target.classList.contains('delete-assignment-btn') ||
      e.target.closest('.delete-assignment-btn') ||
      e.target.getAttribute('onclick')?.includes('deleteAssignment')) {

    e.preventDefault();
    e.stopPropagation();

    console.log('🗑️ Delete assignment button clicked via delegation');

    const button = e.target.closest('button') || e.target;
    const assignmentId = button.dataset.assignmentId ||
                        button.dataset.id ||
                        button.getAttribute('data-assignment-id') ||
                        button.getAttribute('data-id');

    if (assignmentId && window.deleteAssignment) {
      window.deleteAssignment(assignmentId);
    } else {
      console.error('❌ Could not find assignment ID or deleteAssignment function');
    }

    return false;
  }
});

// Log all available window functions that contain 'assignment' or 'modal'
const availableFunctions = Object.keys(window).filter(key =>
  key.toLowerCase().includes('assignment') ||
  key.toLowerCase().includes('modal') ||
  key.toLowerCase().includes('edit')
);
console.log('🔍 Available window functions (assignment/modal/edit related):', availableFunctions);

// Customer Search Functionality
// Removed duplicate customer search implementation

// Load delivery people for the modal
async function loadDeliveryPeopleForModal() {
  console.log('👥 Loading delivery people for modal...');

  const deliveryPersonSelect = document.getElementById('editDeliveryPerson');
  if (!deliveryPersonSelect) return;

  try {
    const response = await fetch('/customer-patterns/get_delivery_people', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const data = await response.json();

    if (data.success) {
      deliveryPersonSelect.innerHTML = '<option value="">🎯 Select Delivery Person</option>';

      data.delivery_people.forEach(person => {
        const option = document.createElement('option');
        option.value = person.id;
        option.textContent = `🚚 ${person.name}`;
        deliveryPersonSelect.appendChild(option);
      });

      console.log(`✅ Loaded ${data.delivery_people.length} delivery people`);
    } else {
      throw new Error(data.error || 'Failed to load delivery people');
    }

  } catch (error) {
    console.error('❌ Error loading delivery people:', error);
    deliveryPersonSelect.innerHTML = '<option value="">❌ Error loading staff</option>';
    showToast(`Failed to load delivery people: ${error.message}`, 'error');
  }
}

// Load assignment summary for the modal
async function loadAssignmentSummary(customerId, month, year) {
  console.log('📊 Loading assignment summary...');

  try {
    const response = await fetch(`/customer-patterns/get_assignment_summary?customer_id=${customerId}&month=${month}&year=${year}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const data = await response.json();

    if (data.success) {
      const summary = data.summary;

      // Update summary display
      updateElement('currentAssignmentsCount', summary.total_assignments);
      updateElement('currentTotalQuantity', `${summary.current_total_quantity} L`);
      updateElement('assignmentDateRange', summary.date_range);
      updateElement('exampleAssignmentCount', summary.total_assignments);

      console.log(`✅ Loaded assignment summary: ${summary.total_assignments} assignments`);

      // Store for real-time calculations
      window.currentAssignmentSummary = summary;

    } else {
      throw new Error(data.error || 'Failed to load assignment summary');
    }

  } catch (error) {
    console.error('❌ Error loading assignment summary:', error);
    updateElement('currentAssignmentsCount', 'Error');
    updateElement('currentTotalQuantity', 'Error');
    updateElement('assignmentDateRange', 'Error');
    showToast(`Failed to load assignment summary: ${error.message}`, 'error');
  }
}

// Setup real-time calculation updates
function setupRealTimeCalculations() {
  const quantityInput = document.getElementById('editScheduledQuantity');
  const productSelect = document.getElementById('editScheduledProduct');

  if (quantityInput) {
    quantityInput.addEventListener('input', updateEstimatedTotal);
  }

  if (productSelect) {
    productSelect.addEventListener('change', updateEstimatedTotal);
  }
}

// Update estimated total in real-time
function updateEstimatedTotal() {
  const newQuantity = parseFloat(document.getElementById('editScheduledQuantity')?.value || 0);
  const summary = window.currentAssignmentSummary;

  if (summary && summary.total_assignments > 0) {
    const newTotal = (newQuantity * summary.total_assignments).toFixed(2);
    updateElement('estimatedNewTotal', `${newTotal} L`);
  } else {
    updateElement('estimatedNewTotal', '-');
  }
}

// Utility function to update element content safely
function updateElement(id, content) {
  const element = document.getElementById(id);
  if (element) {
    element.textContent = content;
  }
}

// Delivery modal functions already made globally available above

// ============ FINAL COMPREHENSIVE MODAL DATA LOADING ENHANCEMENT ============

// Enhanced openEditPatternModal with comprehensive data loading
window.openEditPatternModal = function(customerId, customerName, scheduledQuantity, scheduledProduct, month, year) {
  console.log('🚀 Opening comprehensive edit modal for:', customerName, 'Quantity:', scheduledQuantity);

  const modal = document.getElementById('editPatternModal');
  if (!modal) {
    console.error('Modal not found!');
    return;
  }

  // Set basic form values
  const customerIdField = document.getElementById('editCustomerId');
  const customerNameField = document.getElementById('editCustomerName');
  const quantityField = document.getElementById('editScheduledQuantity');
  const monthField = document.getElementById('editMonth');
  const yearField = document.getElementById('editYear');
  const monthDisplay = document.getElementById('editMonthDisplay');

  if (customerIdField) customerIdField.value = customerId || '';
  if (customerNameField) customerNameField.value = customerName || '';
  if (quantityField) quantityField.value = scheduledQuantity || '';
  if (monthField) monthField.value = month || '';
  if (yearField) yearField.value = year || '';

  // Set month display
  const months = ['', 'January', 'February', 'March', 'April', 'May', 'June',
                 'July', 'August', 'September', 'October', 'November', 'December'];
  if (monthDisplay) monthDisplay.textContent = (months[month] || 'Unknown') + ' ' + year;

  // Show modal with loading state
  modal.style.display = 'flex';
  document.body.classList.add('modal-open');

  // Load all comprehensive data in parallel
  loadComprehensiveModalData(customerId, customerName, scheduledQuantity, scheduledProduct, month, year);

  console.log('✅ Modal opened and data loading initiated');
};

// Comprehensive data loading function
function loadComprehensiveModalData(customerId, customerName, scheduledQuantity, scheduledProduct, month, year) {
  console.log('🔄 Loading comprehensive modal data...');

  // Show loading states for all sections
  showLoadingStates();

  // Load all data in parallel using Promise.all
  Promise.all([
    loadProductsForModal(),
    loadDeliveryPeopleForModal(),
    loadAssignmentSummary(customerId, month, year)
  ])
  .then(([products, deliveryPeople, assignmentSummary]) => {
    console.log('✅ All modal data loaded successfully');

    // Hide loading states
    hideLoadingStates();

    // Set selected product if available
    if (scheduledProduct && scheduledProduct !== 'null' && scheduledProduct !== '') {
      setSelectedProduct(scheduledProduct);
    }

    // Setup real-time calculations
    setupRealTimeCalculations();

    // Show success feedback
    showLoadingSuccess();

  })
  .catch(error => {
    console.error('❌ Error loading modal data:', error);
    showLoadingError('Error loading modal data: ' + error.message);
  });
}

// Load products for modal
function loadProductsForModal() {
  return fetch('/customer-patterns/get_products', {
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    }
  })
  .then(response => {
    if (!response.ok) throw new Error(`Products: ${response.status}`);
    return response.json();
  })
  .then(data => {
    const select = document.getElementById('editScheduledProduct');
    if (!select) return;

    select.innerHTML = '<option value="">🎯 Select Product</option>';

    if (data.products && data.products.length > 0) {
      data.products.forEach(product => {
        const option = document.createElement('option');
        option.value = product.id;
        option.textContent = `${product.name}${product.unit_type ? ' (' + product.unit_type + ')' : ''}`;
        select.appendChild(option);
      });
      console.log('✅ Products loaded:', data.products.length);
    } else {
      select.innerHTML = '<option value="">No products available</option>';
    }

    return data.products;
  });
}

// Load delivery people for modal
function loadDeliveryPeopleForModal() {
  return fetch('/customer-patterns/get_delivery_people', {
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    }
  })
  .then(response => {
    if (!response.ok) throw new Error(`Delivery People: ${response.status}`);
    return response.json();
  })
  .then(data => {
    const select = document.getElementById('editDeliveryPerson');
    if (!select) return;

    select.innerHTML = '<option value="">🚚 Select Delivery Person</option>';

    if (data.delivery_people && data.delivery_people.length > 0) {
      data.delivery_people.forEach(person => {
        const option = document.createElement('option');
        option.value = person.id;
        option.textContent = `${person.name}${person.phone ? ' (' + person.phone + ')' : ''}`;
        select.appendChild(option);
      });
      console.log('✅ Delivery people loaded:', data.delivery_people.length);
    } else {
      select.innerHTML = '<option value="">No delivery people available</option>';
    }

    return data.delivery_people;
  });
}

// Load assignment summary
function loadAssignmentSummary(customerId, month, year) {
  return fetch(`/customer-patterns/get_assignment_summary?customer_id=${customerId}&month=${month}&year=${year}`, {
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    }
  })
  .then(response => {
    if (!response.ok) throw new Error(`Assignment Summary: ${response.status}`);
    return response.json();
  })
  .then(data => {
    // Store summary globally for calculations
    window.currentAssignmentSummary = data.summary;

    // Update UI with summary data
    updateElement('totalAssignments', data.summary?.total_assignments || 0);
    updateElement('completedAssignments', data.summary?.completed_assignments || 0);
    updateElement('pendingAssignments', data.summary?.pending_assignments || 0);
    updateElement('currentTotalQuantity', (data.summary?.total_quantity || 0) + ' L');

    // Calculate estimated new total
    calculateEstimatedTotal();

    console.log('✅ Assignment summary loaded:', data.summary);
    return data.summary;
  });
}

// Show loading states
function showLoadingStates() {
  const loadingElements = [
    { id: 'editScheduledProduct', text: '🔄 Loading products...' },
    { id: 'editDeliveryPerson', text: '🔄 Loading delivery people...' },
    { id: 'totalAssignments', text: '...' },
    { id: 'completedAssignments', text: '...' },
    { id: 'pendingAssignments', text: '...' },
    { id: 'currentTotalQuantity', text: '...' },
    { id: 'estimatedNewTotal', text: '...' }
  ];

  loadingElements.forEach(item => {
    const element = document.getElementById(item.id);
    if (element) {
      if (element.tagName === 'SELECT') {
        element.innerHTML = `<option value="">${item.text}</option>`;
      } else {
        element.textContent = item.text;
      }
    }
  });
}

// Hide loading states
function hideLoadingStates() {
  // Loading states are replaced by actual data, no need to explicitly hide
  console.log('✅ Loading states cleared');
}

// Set selected product
function setSelectedProduct(scheduledProduct) {
  setTimeout(() => {
    const productField = document.getElementById('editScheduledProduct');
    if (productField) {
      const options = productField.querySelectorAll('option');
      for (let option of options) {
        if (option.textContent.toLowerCase().includes(scheduledProduct.toLowerCase())) {
          option.selected = true;
          console.log('✅ Product selected:', scheduledProduct);
          break;
        }
      }
    }
  }, 100);
}

// Setup real-time calculations
function setupRealTimeCalculations() {
  const quantityInput = document.getElementById('editScheduledQuantity');
  if (quantityInput) {
    quantityInput.addEventListener('input', calculateEstimatedTotal);
    console.log('✅ Real-time calculations setup complete');
  }
}

// Show loading success feedback
function showLoadingSuccess() {
  // Add a subtle visual indicator that loading is complete
  const modal = document.getElementById('editPatternModal');
  if (modal) {
    modal.classList.add('data-loaded');
    setTimeout(() => {
      modal.classList.remove('data-loaded');
    }, 2000);
  }
}

// Show loading error
function showLoadingError(message) {
  console.error('❌ Loading error:', message);

  // Show error in modal
  const errorDiv = document.createElement('div');
  errorDiv.className = 'alert alert-warning mt-2';
  errorDiv.innerHTML = `
    <i class="fas fa-exclamation-triangle me-2"></i>
    ${message}
    <button type="button" class="btn btn-sm btn-outline-warning ms-2" onclick="this.parentElement.remove()">
      Dismiss
    </button>
  `;

  const modalBody = document.querySelector('#editPatternModal .custom-modal-body');
  if (modalBody) {
    modalBody.insertBefore(errorDiv, modalBody.firstChild);
  }
}

// Enhanced submit function with comprehensive progress tracking
function submitPatternUpdate() {
  console.log('🚀 Starting comprehensive pattern update...');

  const form = document.getElementById('editPatternForm');
  if (!form) {
    console.error('Form not found');
    return;
  }

  const submitBtn = document.getElementById('submitPatternUpdate');
  const originalText = submitBtn ? submitBtn.innerHTML : 'Update Pattern';

  // Disable submit button and show loading
  if (submitBtn) {
    submitBtn.disabled = true;
    submitBtn.innerHTML = `
      <div class="d-flex align-items-center">
        <div class="spinner-border spinner-border-sm me-2" role="status"></div>
        <span>Updating all assignments...</span>
      </div>
    `;
  }

  // Show comprehensive progress modal
  showComprehensiveProgressModal();

  const formData = new FormData(form);

  fetch('/customer-patterns/update_pattern', {
    method: 'POST',
    body: formData,
    headers: {
      'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
    }
  })
  .then(response => {
    if (!response.ok) throw new Error(`HTTP ${response.status}`);
    return response.json();
  })
  .then(data => {
    console.log('✅ Pattern update successful:', data);

    // Complete progress
    completeProgress();

    // Show success message
    setTimeout(() => {
      window.showSimpleToast(data.message || 'All delivery assignments updated successfully! 🎉', 'success');
      closeEditPatternModal();

      // Optionally reload the page to show updated data
      setTimeout(() => {
        window.location.reload();
      }, 1500);
    }, 2000);
  })
  .catch(error => {
    console.error('❌ Pattern update error:', error);
    hideComprehensiveProgress();
    window.showSimpleToast('Error updating pattern: ' + error.message, 'error');
  })
  .finally(() => {
    if (submitBtn) {
      submitBtn.disabled = false;
      submitBtn.innerHTML = originalText;
    }
  });
}

// Show comprehensive progress modal
function showComprehensiveProgressModal() {
  // Create or show existing progress modal
  let progressModal = document.getElementById('comprehensiveProgressModal');
  if (!progressModal) {
    progressModal = document.createElement('div');
    progressModal.id = 'comprehensiveProgressModal';
    progressModal.innerHTML = `
      <div class="custom-modal" style="display: flex;">
        <div class="custom-modal-content" style="max-width: 500px;">
          <div class="custom-modal-header">
            <h5 class="custom-modal-title">
              🚀 Updating Delivery Assignments
            </h5>
          </div>
          <div class="custom-modal-body text-center">
            <div class="progress-container mb-4">
              <div class="progress-circle">
                <svg width="120" height="120" class="progress-ring">
                  <circle cx="60" cy="60" r="52" class="progress-ring-circle" id="progressCircle"></circle>
                </svg>
                <div class="progress-text">
                  <div class="percentage" id="progressPercentage">0%</div>
                </div>
              </div>
            </div>
            <div class="loader-status">
              <h4>Processing Updates</h4>
              <div class="status-message" id="progressStatus">Preparing update...</div>
            </div>
            <div class="progress-details mt-3">
              <small id="progressDetails">Initializing comprehensive update process...</small>
            </div>
          </div>
        </div>
      </div>
    `;
    document.body.appendChild(progressModal);
  }

  progressModal.style.display = 'flex';

  // Animate progress
  animateProgress();
}

// Animate progress
function animateProgress() {
  let progress = 0;
  const progressCircle = document.getElementById('progressCircle');
  const progressPercentage = document.getElementById('progressPercentage');
  const progressStatus = document.getElementById('progressStatus');
  const progressDetails = document.getElementById('progressDetails');

  const circumference = 2 * Math.PI * 52;
  if (progressCircle) {
    progressCircle.style.strokeDasharray = circumference;
    progressCircle.style.strokeDashoffset = circumference;
  }

  const statusMessages = [
    'Validating update parameters...',
    'Updating customer delivery person...',
    'Processing scheduled assignments...',
    'Updating assignment quantities...',
    'Recalculating totals and schedules...',
    'Saving changes to database...',
    'Finalizing updates...'
  ];

  const detailMessages = [
    'Preparing comprehensive update process...',
    'Customer assignment preferences updated',
    'Processing all existing delivery schedules',
    'Applying new quantity to all assignments',
    'Optimizing delivery schedules and routes',
    'Committing all changes with data consistency',
    'All delivery assignments updated successfully!'
  ];

  const interval = setInterval(() => {
    progress += Math.random() * 15;
    if (progress > 95) progress = 95;

    if (progressCircle) {
      const offset = circumference - (progress / 100) * circumference;
      progressCircle.style.strokeDashoffset = offset;
    }

    if (progressPercentage) {
      progressPercentage.textContent = Math.round(progress) + '%';
    }

    // Update status messages based on progress
    const statusIndex = Math.floor((progress / 100) * statusMessages.length);
    if (progressStatus && statusMessages[statusIndex]) {
      progressStatus.textContent = statusMessages[statusIndex];
    }

    if (progressDetails && detailMessages[statusIndex]) {
      progressDetails.textContent = detailMessages[statusIndex];
    }

    if (progress >= 95) {
      clearInterval(interval);
    }
  }, 300);

  window.progressInterval = interval;
}

// Complete progress
function completeProgress() {
  const progressCircle = document.getElementById('progressCircle');
  const progressPercentage = document.getElementById('progressPercentage');
  const progressStatus = document.getElementById('progressStatus');
  const progressDetails = document.getElementById('progressDetails');

  if (window.progressInterval) {
    clearInterval(window.progressInterval);
  }

  // Complete the progress
  if (progressCircle) {
    progressCircle.style.strokeDashoffset = 0;
  }

  if (progressPercentage) {
    progressPercentage.textContent = '100%';
  }

  if (progressStatus) {
    progressStatus.textContent = 'Update completed successfully!';
  }

  if (progressDetails) {
    progressDetails.textContent = 'All delivery assignments have been updated with new settings 🎉';
  }

  // Hide progress modal after delay
  setTimeout(() => {
    hideComprehensiveProgress();
  }, 2000);
}

// Hide comprehensive progress
function hideComprehensiveProgress() {
  const progressModal = document.getElementById('comprehensiveProgressModal');
  if (progressModal) {
    progressModal.style.display = 'none';
  }

  if (window.progressInterval) {
    clearInterval(window.progressInterval);
  }
}

// Enhanced calculate estimated total with visual feedback
function calculateEstimatedTotal() {
  const newQuantity = parseFloat(document.getElementById('editScheduledQuantity')?.value || 0);
  const summary = window.currentAssignmentSummary;

  if (summary && summary.total_assignments > 0) {
    const newTotal = (newQuantity * summary.total_assignments).toFixed(2);
    const estimatedElement = document.getElementById('estimatedNewTotal');

    if (estimatedElement) {
      // Add visual feedback for change
      estimatedElement.style.transition = 'all 0.3s ease';
      estimatedElement.style.transform = 'scale(1.1)';
      estimatedElement.style.color = '#28a745';
      estimatedElement.textContent = `${newTotal} L`;

      setTimeout(() => {
        estimatedElement.style.transform = 'scale(1)';
        estimatedElement.style.color = '';
      }, 300);
    }
  } else {
    updateElement('estimatedNewTotal', '-');
  }
}

console.log('🎉 Comprehensive modal data loading system initialized!');

// ===== ENHANCED ASSIGNMENT MODAL FIX - FINAL SOLUTION =====
console.log('🛠️ Setting up enhanced assignment modal fix...');

// Ensure loadEditForm is globally available with robust error handling
window.loadEditForm = function(assignmentId) {
  console.log('📡 Enhanced loadEditForm called with ID:', assignmentId);

  const editModalContent = document.getElementById('editModalContent');
  if (!editModalContent) {
    console.error('❌ editModalContent element not found');
    alert('Error: Edit modal content area not found');
    return;
  }

  // Show enhanced loading state
  editModalContent.innerHTML = `
    <div class="text-center py-4">
      <div class="spinner-border text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
        <span class="visually-hidden">Loading...</span>
      </div>
      <h5>Loading Edit Form</h5>
      <p class="text-muted">Please wait while we load assignment #${assignmentId}...</p>
    </div>
  `;

  // Try the main endpoint
  const endpoint = `/assign_deliveries/${assignmentId}/edit.json`;
  console.log('📡 Fetching from:', endpoint);

  fetch(endpoint, {
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'X-Requested-With': 'XMLHttpRequest',
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
    }
  })
  .then(response => {
    console.log('📡 Response status:', response.status);
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    return response.json();
  })
  .then(data => {
    console.log('✅ Edit form data received:', data);
    if (data.html) {
      editModalContent.innerHTML = data.html;
    } else {
      throw new Error('No HTML content in response');
    }
  })
  .catch(error => {
    console.error('❌ Error loading edit form:', error);
    editModalContent.innerHTML = `
      <div class="alert alert-danger text-center">
        <i class="fas fa-exclamation-triangle mb-3 fa-2x text-danger"></i>
        <h5>Unable to Load Edit Form</h5>
        <p>Assignment #${assignmentId} could not be loaded.</p>
        <p class="small text-muted">Error: ${error.message}</p>
        <div class="mt-3">
          <button class="btn btn-secondary" onclick="window.closeEditModal()">Close</button>
          <button class="btn btn-primary ms-2" onclick="window.loadEditForm('${assignmentId}')">Retry</button>
        </div>
      </div>
    `;
  });
};

// Enhanced event delegation with comprehensive button detection
document.addEventListener('click', function(e) {
  // First check if this element or its closest button has a working onclick handler for editAssignment
  const actualButton = e.target.closest('button') || (e.target.tagName === 'BUTTON' ? e.target : null);

  if (actualButton && actualButton.getAttribute('onclick')?.includes('editAssignment')) {
    console.log('🎯 Found button with onclick editAssignment - letting it handle naturally');
    return; // Don't intercept, let the onclick handler work
  }

  // Only use event delegation for buttons that don't have onclick handlers
  const isEditButton =
    e.target.classList.contains('edit-assignment-btn') ||
    e.target.closest('.edit-assignment-btn') ||
    (actualButton && actualButton.classList.contains('btn-outline-primary') && actualButton.innerHTML?.includes('fa-edit'));

  if (isEditButton && actualButton) {
    console.log('🎯 Enhanced edit button detection triggered for button without onclick!');
    console.log('Button element:', actualButton);

    e.preventDefault();
    e.stopPropagation();

    let assignmentId = null;

    // Strategy 1: Data attributes
    assignmentId = actualButton.dataset.assignmentId ||
                  actualButton.dataset.id ||
                  actualButton.getAttribute('data-assignment-id') ||
                  actualButton.getAttribute('data-id');

    // Strategy 2: Parse onclick attribute
    if (!assignmentId) {
      const onclick = actualButton.getAttribute('onclick') || '';
      const match = onclick.match(/editAssignment\s*\(\s*['"]?(\d+)['"]?\s*\)/);
      if (match && match[1]) {
        assignmentId = match[1];
        console.log('✅ Extracted ID from onclick:', assignmentId);
      }
    }

    // Strategy 3: Search parent elements
    if (!assignmentId) {
      const parent = actualButton.closest('tr, .assignment-row, .card, .modal-body, [data-assignment-id]');
      if (parent) {
        assignmentId = parent.dataset.assignmentId ||
                      parent.dataset.id ||
                      parent.getAttribute('data-assignment-id') ||
                      parent.getAttribute('data-id');
        console.log('✅ Found ID in parent element:', assignmentId);
      }
    }

    // Strategy 4: Extract from nearby text
    if (!assignmentId) {
      const container = actualButton.closest('tr, .card, .modal-body');
      if (container) {
        const text = container.textContent || '';
        const match = text.match(/#(\d+)|ID:\s*(\d+)|Assignment\s+(\d+)/i);
        if (match) {
          assignmentId = match[1] || match[2] || match[3];
          console.log('✅ Extracted ID from text:', assignmentId);
        }
      }
    }

    console.log('🎯 Final assignment ID:', assignmentId);

    if (assignmentId) {
      console.log('✅ Calling editAssignment with ID:', assignmentId);
      if (window.editAssignment) {
        window.editAssignment(assignmentId);
      } else {
        console.error('❌ editAssignment function not available');
      }
    } else {
      console.error('❌ Could not determine assignment ID');
      console.log('Full debug info:', {
        button: actualButton,
        onclick: actualButton.getAttribute('onclick'),
        dataset: actualButton.dataset,
        innerHTML: actualButton.innerHTML,
        textContent: actualButton.textContent
      });
      alert('Unable to find assignment ID. Please check the console for details.');
    }

    return false;
  }
}, true);

console.log('✅ Enhanced assignment modal system ready!');
console.log('Functions available:', {
  editAssignment: typeof window.editAssignment,
  loadEditForm: typeof window.loadEditForm,
  closeEditModal: typeof window.closeEditModal,
  completeAssignment: typeof window.completeAssignment,
  deleteAssignment: typeof window.deleteAssignment,
  reloadCurrentModal: typeof window.reloadCurrentModal
});

// Final verification that our critical functions are available
if (typeof window.completeAssignment !== 'function') {
  console.error('❌ CRITICAL: completeAssignment function not available!');
}

if (typeof window.deleteAssignment !== 'function') {
  console.error('❌ CRITICAL: deleteAssignment function not available!');
}

if (typeof window.reloadCurrentModal !== 'function') {
  console.error('❌ CRITICAL: reloadCurrentModal function not available!');
}

</script>
