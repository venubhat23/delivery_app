<!-- Modal content loads here - no header needed as it's in main modal -->

<script>
// FORCE DEFINE ALL CRITICAL FUNCTIONS IN MODAL CONTEXT
console.log('üîß Force defining assignment functions in modal context...');

// ALWAYS define completeTillToday function (overwrite any existing)
console.log('üîß Defining completeTillToday function...');

  window.completeTillToday = function(customerId, month, year) {
    console.log('üéØ completeTillToday called from modal:', customerId, month, year);
    if (!confirm('Mark all pending assignments till today as completed?')) return;

    const button = event.target.closest('button');
    const originalHTML = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Processing...';
    button.disabled = true;

    fetch('/customer-patterns/complete_all_till_today', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      },
      body: JSON.stringify({
        customer_id: customerId,
        month: month,
        year: year
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert('‚úÖ Assignments completed successfully!');
        location.reload();
      } else {
        alert('‚ùå Error: ' + data.message);
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('‚ùå Error completing assignments');
    })
    .finally(() => {
      button.innerHTML = originalHTML;
      button.disabled = false;
    });
  };
}

if (typeof window.completeAssignment === 'function') {
  console.log('‚úÖ completeAssignment available');
} else {
  console.error('‚ùå completeAssignment not available - defining it now');

  window.completeAssignment = function(id) {
    console.log('‚úÖ completeAssignment called from modal:', id);
    if (!confirm('Mark this assignment as completed?')) return;

    const button = event.target.closest('button');
    const originalHTML = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
    button.disabled = true;

    fetch(`/customer-patterns/${id}/update_assignment.json`, {
      method: 'PATCH',
      body: JSON.stringify({ delivery_assignment: { status: 'completed' } }),
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert('‚úÖ Assignment completed successfully!');
        location.reload();
      } else {
        alert('‚ùå Error: ' + data.message);
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('‚ùå Error completing assignment');
    })
    .finally(() => {
      button.innerHTML = originalHTML;
      button.disabled = false;
    });
  };
}

if (typeof window.deleteAssignment === 'function') {
  console.log('‚úÖ deleteAssignment available');
} else {
  console.error('‚ùå deleteAssignment not available - defining it now');

  window.deleteAssignment = function(id) {
    console.log('üóëÔ∏è deleteAssignment called from modal:', id);
    if (!confirm('Are you sure you want to delete this assignment?')) return;

    const button = event.target.closest('button');
    const originalHTML = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
    button.disabled = true;

    fetch(`/customer-patterns/${id}/delete_assignment.json`, {
      method: 'DELETE',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert('‚úÖ Assignment deleted successfully!');
        location.reload();
      } else {
        alert('‚ùå Error: ' + data.message);
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('‚ùå Error deleting assignment');
    })
    .finally(() => {
      button.innerHTML = originalHTML;
      button.disabled = false;
    });
  };
}

if (typeof window.editAssignment === 'function') {
  console.log('‚úÖ editAssignment available');
} else {
  console.error('‚ùå editAssignment not available - defining it now');

  window.editAssignment = function(id) {
    console.log('‚úèÔ∏è editAssignment called from modal:', id);

    fetch(`/customer-patterns/${id}/edit_assignment.json`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        // Update the edit modal content
        const editModalContent = document.getElementById('editModalContent');
        if (editModalContent) {
          editModalContent.innerHTML = data.html;
        }

        // Show the edit modal
        const editModal = document.getElementById('editModal');
        if (editModal) {
          const modalInstance = new bootstrap.Modal(editModal);
          modalInstance.show();
        }
      } else {
        alert('‚ùå Error loading edit form: ' + data.message);
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('‚ùå Error loading edit form');
    });
  };
}

// ALWAYS define completeAll function (overwrite any existing)
console.log('üîß Defining completeAll function...');
  window.completeAll = function(customerId, month, year) {
    console.log('üéØ completeAll called from modal context:', customerId, month, year);
    if (!confirm('Mark ALL pending assignments for this customer as completed?')) return;

    const button = event.target.closest('button');
    const originalHTML = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Processing...';
    button.disabled = true;

    fetch('/customer-patterns/complete_all', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      },
      body: JSON.stringify({
        customer_id: customerId,
        month: month,
        year: year
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert('‚úÖ All assignments completed successfully!');
        // Close all modals and reopen
        setTimeout(() => {
          location.reload();
        }, 1000);
      } else {
        alert('‚ùå Error completing assignments: ' + data.message);
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('‚ùå Error completing assignments');
    })
    .finally(() => {
      button.innerHTML = originalHTML;
      button.disabled = false;
    });
  };
}

if (typeof window.reloadCurrentModal === 'function') {
  console.log('‚úÖ reloadCurrentModal available');
} else {
  console.error('‚ùå reloadCurrentModal not available - defining simple version');

  // Define simple reloadCurrentModal function
  window.reloadCurrentModal = function() {
    console.log('üîÑ Simple reloadCurrentModal called - reloading page');
    location.reload();
  };
}

console.log('‚úÖ Assignment functions loaded:', {
  completeTillToday: typeof window.completeTillToday,
  completeAssignment: typeof window.completeAssignment,
  deleteAssignment: typeof window.deleteAssignment,
  editAssignment: typeof window.editAssignment,
  completeAll: typeof window.completeAll,
  reloadCurrentModal: typeof window.reloadCurrentModal
});
</script>

<% if @delivery_assignments.any? %>
  <!-- Action Buttons at Top -->
  <div class="mb-4">
    <!-- Always show bulk delete button when there are assignments -->
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h5 class="mb-0">
        <i class="fas fa-list me-2 text-primary"></i>
        <%= @customer.name %> - Deliveries (<%= @delivery_assignments.count %> assignments)
      </h5>
      <!-- Bulk Delete Button - Always visible -->
      <button class="btn btn-danger btn-lg shadow" id="bulkDeleteBtn" onclick="bulkDeleteAssignments()" style="display: inline-block; opacity: 0.5; cursor: not-allowed;" disabled>
        <i class="fas fa-trash me-2"></i>
        Delete Selected (<span id="selectedCount">0</span>)
      </button>
    </div>

    <!-- Pending assignments alert and action buttons -->
    <% if @pending_till_today_count > 0 || @pending_till_month_end_count > 0 %>
      <div class="alert alert-warning d-flex align-items-center">
        <i class="fas fa-exclamation-triangle me-3 fa-2x text-warning"></i>
        <div class="flex-grow-1">
          <strong>‚ö†Ô∏è Pending Assignments Alert</strong><br>
          <small>There are <strong><%= @pending_till_today_count %></strong> pending assignments till today and <strong><%= @pending_till_month_end_count %></strong> total pending assignments this month.</small>
        </div>
        <div class="btn-group">
          <% if @pending_till_today_count > 0 %>
            <button class="btn btn-dark btn-lg shadow" onclick="
              if (!confirm('Mark all pending assignments till today as completed?')) return;
              const button = this;
              const originalHTML = button.innerHTML;
              button.innerHTML = '<i class=&quot;fas fa-spinner fa-spin me-1&quot;></i>Processing...';
              button.disabled = true;
              fetch('/customer-patterns/complete_all_till_today', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'X-CSRF-Token': document.querySelector('meta[name=&quot;csrf-token&quot;]').getAttribute('content')
                },
                body: JSON.stringify({ customer_id: <%= @customer.id %>, month: <%= @month %>, year: <%= @year %> })
              })
              .then(response => response.json())
              .then(data => {
                if (data.success) {
                  alert('‚úÖ Assignments till today completed successfully!');
                  setTimeout(() => location.reload(), 1000);
                } else {
                  alert('‚ùå Error: ' + (data.message || 'Unknown error'));
                }
              })
              .catch(error => {
                console.error('Error:', error);
                alert('‚ùå Error completing assignments till today');
              })
              .finally(() => {
                button.innerHTML = originalHTML;
                button.disabled = false;
              });
            ">
              <i class="fas fa-check-circle me-2"></i>
              Complete Till Today (<%= @pending_till_today_count %>)
            </button>
          <% end %>
          <% if @pending_till_month_end_count > 0 %>
            <button class="btn btn-success btn-lg shadow" onclick="
              if (!confirm('Mark ALL pending assignments for this customer as completed?')) return;
              const button = this;
              const originalHTML = button.innerHTML;
              button.innerHTML = '<i class=&quot;fas fa-spinner fa-spin me-1&quot;></i>Processing...';
              button.disabled = true;
              fetch('/customer-patterns/complete_all', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'X-CSRF-Token': document.querySelector('meta[name=&quot;csrf-token&quot;]').getAttribute('content')
                },
                body: JSON.stringify({ customer_id: <%= @customer.id %>, month: <%= @month %>, year: <%= @year %> })
              })
              .then(response => response.json())
              .then(data => {
                if (data.success) {
                  alert('‚úÖ All assignments completed successfully!');
                  setTimeout(() => location.reload(), 1000);
                } else {
                  alert('‚ùå Error: ' + (data.message || 'Unknown error'));
                }
              })
              .catch(error => {
                console.error('Error:', error);
                alert('‚ùå Error completing assignments');
              })
              .finally(() => {
                button.innerHTML = originalHTML;
                button.disabled = false;
              });
            ">
              <i class="fas fa-check-double me-2"></i>
              Complete All This Month (<%= @pending_till_month_end_count %>)
            </button>
          <% end %>
        </div>
      </div>
    <% end %>
  </div>

    <!-- Attractive Table -->
    <div class="card">
      <div class="table-responsive">
        <table class="table table-hover mb-0">
          <thead class="table-dark">
            <tr>
              <th style="width: 50px;">
                <input type="checkbox" id="selectAllCheckbox" class="form-check-input" onclick="window.toggleAll(this)" title="Select/Deselect All">
              </th>
              <th><i class="fas fa-calendar me-1"></i>Date</th>
              <th><i class="fas fa-cube me-1"></i>Product</th>
              <th><i class="fas fa-weight me-1"></i>Quantity</th>
              <th><i class="fas fa-user me-1"></i>Person</th>
              <th><i class="fas fa-info-circle me-1"></i>Status</th>
              <th><i class="fas fa-rupee-sign me-1"></i>Amount</th>
              <th><i class="fas fa-cogs me-1"></i>Actions</th>
            </tr>
          </thead>
          <tbody>
            <% @delivery_assignments.each_with_index do |assignment, index| %>
              <tr class="<%= 'table-light' if index.even? %>">
                <td>
                  <input type="checkbox" class="form-check-input assignment-checkbox"
                         data-assignment-id="<%= assignment.id %>" onclick="window.updateDeleteButton()">
                </td>
                <td>
                  <div class="d-flex align-items-center">
                    <div class="date-circle bg-primary text-white rounded-circle d-flex align-items-center justify-content-center me-2" style="width: 35px; height: 35px; font-size: 12px; font-weight: bold;">
                      <%= assignment.scheduled_date.strftime("%d") %>
                    </div>
                    <div>
                      <div class="fw-semibold"><%= assignment.scheduled_date.strftime("%b %Y") %></div>
                      <small class="text-muted"><%= assignment.scheduled_date.strftime("%A") %></small>
                    </div>
                  </div>
                </td>
                <td>
                  <div class="d-flex align-items-center">
                    <i class="fas fa-cube text-primary me-2"></i>
                    <div>
                      <div class="fw-semibold"><%= assignment.product.name %></div>
                      <small class="text-muted"><%= assignment.product.unit_type %></small>
                    </div>
                  </div>
                </td>
                <td>
                  <span class="badge bg-light text-dark border">
                    <strong><%= assignment.quantity %></strong> <%= assignment.unit %>
                  </span>
                </td>
                <td>
                  <div class="d-flex align-items-center">
                    <div class="avatar-sm bg-info text-white rounded-circle d-flex align-items-center justify-content-center me-2" style="width: 30px; height: 30px; font-size: 12px;">
                      <%= assignment.user&.name&.first&.upcase || 'N' %>
                    </div>
                    <span class="text-muted small"><%= assignment.user&.name || 'No user assigned' %></span>
                  </div>
                </td>
                <td>
                  <% case assignment.status %>
                  <% when 'completed' %>
                    <span class="badge bg-success rounded-pill">
                      <i class="fas fa-check me-1"></i>Completed
                    </span>
                  <% when 'pending' %>
                    <span class="badge bg-warning rounded-pill">
                      <i class="fas fa-clock me-1"></i>Pending
                    </span>
                  <% when 'in_progress' %>
                    <span class="badge bg-info rounded-pill">
                      <i class="fas fa-truck me-1"></i>In Progress
                    </span>
                  <% else %>
                    <span class="badge bg-danger rounded-pill">
                      <i class="fas fa-times me-1"></i>Cancelled
                    </span>
                  <% end %>
                </td>
                <td>
                  <div class="text-success fw-bold">
                    ‚Çπ<%= number_with_precision(assignment.final_amount, precision: 2) %>
                  </div>
                  <% if assignment.has_discount? %>
                    <small class="text-muted">
                      <del>‚Çπ<%= number_with_precision(assignment.total_amount, precision: 2) %></del>
                    </small>
                  <% end %>
                </td>
                <td>
                  <div class="btn-group btn-group-sm" role="group">
                    <button class="btn btn-outline-primary btn-sm" onclick="window.editAssignment(<%= assignment.id %>)" title="Edit">
                      <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn btn-outline-success btn-sm" onclick="window.completeAssignment(<%= assignment.id %>)" title="Complete" <%= 'disabled' if assignment.status == 'completed' %>>
                      <i class="fas fa-check"></i>
                    </button>
                    <button class="btn btn-outline-danger btn-sm" onclick="window.deleteAssignment(<%= assignment.id %>)" title="Delete">
                      <i class="fas fa-trash"></i>
                    </button>
                  </div>
                </td>
              </tr>
            <% end %>
          </tbody>
          <tfoot class="table-light">
            <tr>
              <th colspan="6" class="text-end">Total:</th>
              <th>
                <div class="text-success fw-bold">
                  ‚Çπ<%= number_with_precision(@delivery_assignments.sum(&:final_amount), precision: 2) %>
                </div>
              </th>
              <th></th>
            </tr>
          </tfoot>
        </table>
      </div>
    </div>


<% else %>
  <!-- Attractive Empty State -->
  <div class="text-center py-5">
    <div class="empty-state-icon mb-4">
      <i class="fas fa-calendar-times fa-4x text-muted"></i>
    </div>
    <h4 class="text-muted mb-3">No Assignments Found</h4>
    <p class="text-muted mb-4">
      No delivery assignments were found for <strong><%= @customer.name %></strong> in <strong><%= @month_name %></strong>.
    </p>
    <a href="<%= new_delivery_assignment_path(customer_id: @customer.id) %>" class="btn btn-primary" target="_blank">
      <i class="fas fa-plus me-1"></i>Create New Assignment
    </a>
  </div>
<% end %>

<script>
console.log('üìù Modal loaded - bulk delete functions are defined in main page');

// Initialize delete button when modal loads
setTimeout(function() {
  console.log('üì¶ Modal initialization - calling updateDeleteButton...');
  if (typeof window.updateDeleteButton === 'function') {
    window.updateDeleteButton();
  } else {
    console.error('‚ùå updateDeleteButton not available in modal');
  }
}, 100);
</script>

<style>
/* Bulk Delete Button Styling */
#bulkDeleteBtn {
  transition: all 0.3s ease;
  border: none;
  box-shadow: 0 4px 8px rgba(220, 53, 69, 0.3);
}

#bulkDeleteBtn:hover {
  background: linear-gradient(135deg, #c82333, #bd2130) !important;
  transform: translateY(-2px);
  box-shadow: 0 6px 12px rgba(220, 53, 69, 0.4);
}

/* Checkbox Styling */
.assignment-checkbox {
  transform: scale(1.2);
  cursor: pointer;
}

#selectAllCheckbox {
  transform: scale(1.3);
  cursor: pointer;
}

/* Selected Row Highlighting */
.assignment-checkbox:checked {
  accent-color: #dc3545;
}

.row-selected {
  background-color: rgba(220, 53, 69, 0.1) !important;
  border-left: 3px solid #dc3545;
}

/* Table Header Checkbox Column */
th:first-child {
  text-align: center;
  vertical-align: middle;
}

td:first-child {
  text-align: center;
  vertical-align: middle;
}

/* Better button group spacing */
.btn-group .btn {
  margin-right: 8px;
}

.btn-group .btn:last-child {
  margin-right: 0;
}

/* Smooth transitions for row states */
tbody tr {
  transition: opacity 0.3s ease, transform 0.2s ease;
}

.deleting-row {
  opacity: 0.5;
  transform: scale(0.98);
  pointer-events: none;
}

/* Success message animation */
@keyframes slideInRight {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

.success-message {
  animation: slideInRight 0.5s ease-out;
}
</style>