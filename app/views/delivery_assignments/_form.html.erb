<div class="row">
  <div class="col-md-8">
    <div class="card">
      <div class="card-body">
        <%= form_with model: @delivery_assignment, local: true, class: "row g-3" do |form| %>
          <% if @delivery_assignment.errors.any? %>
            <div class="col-12">
              <div class="alert alert-danger">
                <h5>Please fix the following errors:</h5>
                <ul class="mb-0">
                  <% @delivery_assignment.errors.full_messages.each do |message| %>
                    <li><%= message %></li>
                  <% end %>
                </ul>
              </div>
            </div>
          <% end %>

          <!-- Customer Search Dropdown -->
          <div class="col-md-6">
            <%= form.label :customer_id, class: "form-label fw-bold" %>
            <div class="customer-search-container position-relative">
              <input type="text" 
                     class="form-control customer-search-input" 
                     id="customer-search-input"
                     placeholder="Search customers by name..."
                     autocomplete="off">
              <div class="search-icon">
                <i class="fas fa-search"></i>
              </div>
              <%= form.hidden_field :customer_id, id: 'customer-select' %>
              <div class="customer-suggestions" id="customer-suggestions" style="display: none;">
                <!-- Customer suggestions will be populated here -->
              </div>
              <div class="customer-loading" id="customer-loading" style="display: none;">
                <i class="fas fa-spinner fa-spin me-2"></i>Searching customers...
              </div>
              <%= render 'shared/attractive_loader', loader_id: 'customerSearchLoader', loading_text: 'Searching customers' %>
              <div class="selected-customer" id="selected-customer" style="display: none;">
                <div class="selected-customer-info">
                  <div class="selected-customer-name"></div>
                  <div class="selected-customer-phone"></div>
                </div>
                <button type="button" class="btn btn-sm btn-outline-secondary clear-customer">
                  <i class="fas fa-times"></i>
                </button>
              </div>
            </div>
            <div class="form-text">
              <small><i class="fas fa-info-circle me-1"></i>Start typing to search customers by name, phone, email, or member ID</small>
            </div>
          </div>

          <!-- Delivery Person Search Dropdown -->
          <div class="col-md-6">
            <%= form.label :delivery_person_id, "Delivery Person", class: "form-label fw-bold" %>
            <div class="delivery-person-search-container position-relative">
              <input type="text" 
                     class="form-control delivery-person-search-input" 
                     id="delivery-person-search-input"
                     placeholder="Search delivery people by name..."
                     autocomplete="off">
              <div class="search-icon">
                <i class="fas fa-search"></i>
              </div>
              <%= form.hidden_field :delivery_person_id, id: 'delivery-person-select' %>
              <div class="delivery-person-suggestions" id="delivery-person-suggestions" style="display: none;">
                <!-- Delivery person suggestions will be populated here -->
              </div>
              <div class="delivery-person-loading" id="delivery-person-loading" style="display: none;">
                <i class="fas fa-spinner fa-spin me-2"></i>Searching delivery people...
              </div>
              <%= render 'shared/attractive_loader', loader_id: 'deliveryPersonSearchLoader', loading_text: 'Searching delivery people' %>
              <div class="selected-delivery-person" id="selected-delivery-person" style="display: none;">
                <div class="selected-delivery-person-info">
                  <div class="selected-delivery-person-name"></div>
                  <div class="selected-delivery-person-email"></div>
                </div>
                <button type="button" class="btn btn-sm btn-outline-secondary clear-delivery-person">
                  <i class="fas fa-times"></i>
                </button>
              </div>
            </div>
            <div class="form-text">
              <small><i class="fas fa-info-circle me-1"></i>Start typing to search delivery people by name</small>
            </div>
          </div>

          <!-- Product Search Dropdown -->
          <div class="col-md-6">
            <%= form.label :product_id, class: "form-label fw-bold" %>
            <%= form.hidden_field :product_id, id: "selected_product_id" %>
            <div class="position-relative">
              <input type="text" 
                     class="form-control" 
                     id="product_search_input"
                     placeholder="Search products by name..." 
                     autocomplete="off"
                     value="<%= @delivery_assignment.product&.name %>"
                     required>
              <div class="search-results-dropdown d-none" id="product_search_results">
                <div class="search-loading d-none">
                  <div class="p-3 text-center">
                    <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                    Searching products...
                  </div>
                </div>
                <div class="search-results-list"></div>
                <div class="search-no-results d-none">
                  <div class="p-3 text-muted text-center">
                    <i class="fas fa-search me-2"></i>No products found
                  </div>
                </div>
              </div>
            </div>
            <div class="form-text">
              <small><i class="fas fa-info-circle me-1"></i>Start typing to search products by name</small>
            </div>
          </div>

          <div class="col-md-6">
            <%= form.label :quantity, class: "form-label fw-bold" %>
            <%= form.number_field :quantity, class: "form-control", required: true, step: "0.01" %>
          </div>

          <!-- Enhanced Date Picker -->
          <div class="col-md-6">
            <%= form.label :scheduled_date, "Delivery Date", class: "form-label fw-bold" %>
            <%= form.date_field :scheduled_date, class: "form-control", required: true, value: @delivery_assignment.scheduled_date || Date.today %>
          </div>

          <div class="col-md-6">
            <%= form.label :status, class: "form-label fw-bold" %>
            <%= form.select :status, 
                options_for_select([
                  ['Pending', 'pending'],
                  ['In Progress', 'in_progress'],
                  ['Completed', 'completed'],
                  ['Cancelled', 'cancelled']
                ], @delivery_assignment.status), 
                {}, { class: "form-select", required: true } %>
          </div>

          <div class="col-12">
            <%= form.label :special_instructions, class: "form-label fw-bold" %>
            <%= form.text_area :special_instructions, class: "form-control", rows: 3, 
                placeholder: "Any special delivery instructions..." %>
          </div>

          <div class="col-12">
            <div class="d-flex gap-2">
              <%= form.submit "Update Assignment", class: "btn btn-primary" %>
              <%= link_to "Cancel", @delivery_assignment, class: "btn btn-secondary" %>
            </div>
          </div>
        <% end %>
      </div>
    </div>
  </div>

  <!-- Enhanced Info Panel -->
  <div class="col-md-4">
    <div class="card">
      <div class="card-header">
        <h5 class="card-title mb-0">
          <i class="fas fa-info-circle me-2"></i>Assignment Info
        </h5>
      </div>
      <div class="card-body">
        <div class="mb-3">
          <strong>Current Status:</strong><br>
          <span class="<%= @delivery_assignment.status_badge_class %>"><%= @delivery_assignment.status_display %></span>
        </div>
        
        <div class="mb-3">
          <strong>Assignment ID:</strong><br>
          <code>#<%= @delivery_assignment.id %></code>
        </div>
        
        <div class="mb-3">
          <strong>Created:</strong><br>
          <small class="text-muted"><%= @delivery_assignment.created_at.strftime("%B %d, %Y at %I:%M %p") %></small>
        </div>
        
        <% if @delivery_assignment.completed_at %>
          <div class="mb-3">
            <strong>Completed:</strong><br>
            <small class="text-muted"><%= @delivery_assignment.completed_at.strftime("%B %d, %Y at %I:%M %p") %></small>
          </div>
        <% end %>

        <% if @delivery_assignment.overdue? %>
          <div class="alert alert-warning">
            <i class="fas fa-exclamation-triangle me-1"></i>
            This assignment is overdue!
          </div>
        <% end %>

        <!-- Assignment History -->
        <div class="mt-4">
          <h6 class="text-muted">
            <i class="fas fa-history me-2"></i>Quick Actions
          </h6>
          <div class="d-grid gap-2">
            <% if @delivery_assignment.pending? %>
              <%= link_to complete_delivery_assignment_path(@delivery_assignment), 
                  method: :patch, 
                  class: "btn btn-success btn-sm",
                  data: { 
                    confirm: "Mark this delivery as completed?" 
                  } do %>
                <i class="fas fa-check me-1"></i>Mark Complete
              <% end %>
            <% end %>
            
            <% if @delivery_assignment.can_generate_invoice? %>
              <%= link_to "Generate Invoice", "#", class: "btn btn-info btn-sm" %>
            <% end %>
          </div>
        </div>
      </div>
    </div>

    <!-- Additional Info Card -->
    <div class="card mt-3">
      <div class="card-header">
        <h5 class="card-title mb-0">
          <i class="fas fa-lightbulb me-2"></i>Quick Tips
        </h5>
      </div>
      <div class="card-body">
        <ul class="list-unstyled small">
          <li class="mb-2">
            <i class="fas fa-search text-primary me-2"></i>
            <span>Use search boxes to quickly find and change customers, products, and delivery people</span>
          </li>
          <li class="mb-2">
            <i class="fas fa-calendar text-warning me-2"></i>
            <span>Changing the delivery date will update the schedule</span>
          </li>
          <li class="mb-2">
            <i class="fas fa-edit text-info me-2"></i>
            <span>All fields can be modified except assignment ID</span>
          </li>
          <li class="mb-2">
            <i class="fas fa-save text-success me-2"></i>
            <span>Changes are saved immediately when you click Update</span>
          </li>
        </ul>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Initialize existing customer/delivery person if editing
  <% if @delivery_assignment.customer_id.present? %>
    const existingCustomer = {
      id: '<%= @delivery_assignment.customer_id %>',
      name: '<%= j(@delivery_assignment.customer&.name || '') %>',
      phone: '<%= j(@delivery_assignment.customer&.phone_number.presence || @delivery_assignment.customer&.alt_phone_number || '') %>'
    };
    if (existingCustomer.name) {
      selectCustomer(existingCustomer.id, existingCustomer.name, existingCustomer.phone);
    }
  <% end %>
  
  <% if @delivery_assignment.user_id.present? %>
    const existingDeliveryPerson = {
      id: '<%= @delivery_assignment.user_id %>',
      name: '<%= j(@delivery_assignment.user&.name || '') %>',
      email: '<%= j(@delivery_assignment.user&.email || '') %>'
    };
    if (existingDeliveryPerson.name) {
      selectDeliveryPerson(existingDeliveryPerson.id, existingDeliveryPerson.name, existingDeliveryPerson.email);
    }
  <% end %>
  
  // Initialize search functionality
  initializeCustomerSearch();
  initializeDeliveryPersonSearch();
  initializeProductSearch();
});

// Customer Search Functionality
const customerSearchInput = document.getElementById('customer-search-input');
const customerSuggestions = document.getElementById('customer-suggestions');
const customerLoading = document.getElementById('customer-loading');
const selectedCustomer = document.getElementById('selected-customer');
const customerSelect = document.getElementById('customer-select');
let customerSearchTimeout;
let currentCustomerSearchTerm = '';
let currentCustomerPage = 1;
let isCustomerLoadingMore = false;
let hasMoreCustomerData = true;

function initializeCustomerSearch() {
  if (!customerSearchInput) return;
  
  // Trigger customer search as you type
  customerSearchInput.addEventListener('input', function(e) {
    clearTimeout(customerSearchTimeout);
    const query = this.value.trim();
    currentCustomerSearchTerm = query;
    
    // Reset pagination on new search
    currentCustomerPage = 1;
    hasMoreCustomerData = true;
    
    if (query.length === 0) {
      // Show all customers when input is empty
      customerSearchTimeout = setTimeout(() => {
        showCustomerLoading();
        fetchCustomerSuggestions('', true);
      }, 100);
      return;
    }
    
    // Add debouncing - wait 300ms after user stops typing
    customerSearchTimeout = setTimeout(() => {
      showCustomerLoading();
      fetchCustomerSuggestions(query, true);
    }, 300);
  });
  
  // Handle focus - show dropdown with all customers
  customerSearchInput.addEventListener('focus', function() {
    if (!customerSelect.value) {
      const query = this.value.trim();
      currentCustomerPage = 1;
      hasMoreCustomerData = true;
      showCustomerLoading();
      fetchCustomerSuggestions(query, true);
    }
  });
  
  // Handle blur (with delay to allow clicking suggestions)
  customerSearchInput.addEventListener('blur', function() {
    setTimeout(() => {
      hideCustomerSuggestions();
    }, 200);
  });
}

// Clear customer button
document.addEventListener('click', function(e) {
  if (e.target.closest('.clear-customer')) {
    clearSelectedCustomer();
  }
});

function fetchCustomerSuggestions(query, resetList = false) {
  if (resetList) {
    currentCustomerPage = 1;
    hasMoreCustomerData = true;
  }
  
  fetch(`/assign_deliveries/search_suggestions?q=${encodeURIComponent(query)}&page=${currentCustomerPage}`)
    .then(response => response.json())
    .then(data => {
      hideCustomerLoading();
      // Filter only customer suggestions
      const customerSuggestionsList = data.suggestions.filter(s => s.type === 'customer');
      hasMoreCustomerData = data.has_more;
      
      if (resetList || currentCustomerPage === 1) {
        displayCustomerSuggestions(customerSuggestionsList);
      } else {
        appendCustomerSuggestions(customerSuggestionsList);
      }
      
      isCustomerLoadingMore = false;
    })
    .catch(error => {
      console.error('Customer search error:', error);
      hideCustomerLoading();
      isCustomerLoadingMore = false;
    });
}

function displayCustomerSuggestions(suggestions) {
  if (suggestions.length === 0) {
    customerSuggestions.innerHTML = '<div class="customer-suggestion-item">No customers found</div>';
    customerSuggestions.style.display = 'block';
    return;
  }
  
  const html = suggestions.map(suggestion => {
    const highlightedName = highlightSearchTerm(suggestion.label, currentCustomerSearchTerm);
    const phone = suggestion.phone || '';
    
    return `
      <div class="customer-suggestion-item" data-customer-id="${suggestion.id}" data-customer-name="${suggestion.label}" data-customer-phone="${phone}">
        <div class="customer-suggestion-name">${highlightedName}</div>
        ${phone ? `<div class="customer-suggestion-phone"><i class="fas fa-phone me-1"></i>${phone}</div>` : ''}
      </div>
    `;
  }).join('');
  
  customerSuggestions.innerHTML = html;
  if (hasMoreCustomerData) {
    customerSuggestions.innerHTML += '<div class="load-more-indicator" style="padding: 0.5rem; text-align: center; color: #666; font-size: 0.85rem;">Scroll for more...</div>';
  }
  customerSuggestions.style.display = 'block';
  
  attachCustomerSuggestionEventListeners();
  attachCustomerScrollListener();
}

function appendCustomerSuggestions(suggestions) {
  if (suggestions.length === 0) return;
  
  // Remove the load more indicator if it exists
  const loadMoreIndicator = customerSuggestions.querySelector('.load-more-indicator');
  if (loadMoreIndicator) {
    loadMoreIndicator.remove();
  }
  
  const html = suggestions.map(suggestion => {
    const highlightedName = highlightSearchTerm(suggestion.label, currentCustomerSearchTerm);
    const phone = suggestion.phone || '';
    
    return `
      <div class="customer-suggestion-item" data-customer-id="${suggestion.id}" data-customer-name="${suggestion.label}" data-customer-phone="${phone}">
        <div class="customer-suggestion-name">${highlightedName}</div>
        ${phone ? `<div class="customer-suggestion-phone"><i class="fas fa-phone me-1"></i>${phone}</div>` : ''}
      </div>
    `;
  }).join('');
  
  customerSuggestions.insertAdjacentHTML('beforeend', html);
  
  if (hasMoreCustomerData) {
    customerSuggestions.insertAdjacentHTML('beforeend', '<div class="load-more-indicator" style="padding: 0.5rem; text-align: center; color: #666; font-size: 0.85rem;">Scroll for more...</div>');
  }
  
  attachCustomerSuggestionEventListeners();
}

function attachCustomerSuggestionEventListeners() {
  // Add click handlers to new items only
  document.querySelectorAll('.customer-suggestion-item:not([data-listeners-attached])').forEach(item => {
    if (item.dataset.customerId) {
      item.addEventListener('click', function() {
        selectCustomer(
          this.dataset.customerId,
          this.dataset.customerName,
          this.dataset.customerPhone
        );
      });
      
      item.addEventListener('mouseenter', function() {
        document.querySelectorAll('.customer-suggestion-item.active').forEach(active => {
          active.classList.remove('active');
        });
        this.classList.add('active');
      });
      
      item.setAttribute('data-listeners-attached', 'true');
    }
  });
}

function attachCustomerScrollListener() {
  customerSuggestions.removeEventListener('scroll', handleCustomerScroll);
  customerSuggestions.addEventListener('scroll', handleCustomerScroll);
}

function handleCustomerScroll() {
  if (!hasMoreCustomerData || isCustomerLoadingMore) return;
  
  const scrollTop = customerSuggestions.scrollTop;
  const scrollHeight = customerSuggestions.scrollHeight;
  const clientHeight = customerSuggestions.clientHeight;
  
  // Load more when user scrolls to within 50px of the bottom
  if (scrollTop + clientHeight >= scrollHeight - 50) {
    isCustomerLoadingMore = true;
    currentCustomerPage++;
    
    // Show loading indicator
    const loadMoreIndicator = customerSuggestions.querySelector('.load-more-indicator');
    if (loadMoreIndicator) {
      loadMoreIndicator.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Loading more...';
    }
    
    fetchCustomerSuggestions(currentCustomerSearchTerm, false);
  }
}

function selectCustomer(id, name, phone) {
  customerSelect.value = id;
  customerSearchInput.style.display = 'none';
  selectedCustomer.style.display = 'flex';
  
  selectedCustomer.querySelector('.selected-customer-name').textContent = name;
  selectedCustomer.querySelector('.selected-customer-phone').textContent = phone ? phone : 'No phone number';
  
  hideCustomerSuggestions();
}

function clearSelectedCustomer() {
  customerSelect.value = '';
  customerSearchInput.value = '';
  customerSearchInput.style.display = 'block';
  selectedCustomer.style.display = 'none';
  hideCustomerSuggestions();
}

function showCustomerLoading() {
  customerLoading.style.display = 'block';
  customerSuggestions.style.display = 'none';
}

function hideCustomerLoading() {
  customerLoading.style.display = 'none';
}

function hideCustomerSuggestions() {
  customerSuggestions.style.display = 'none';
  customerLoading.style.display = 'none';
}

// Delivery Person Search Functionality
const deliveryPersonSearchInput = document.getElementById('delivery-person-search-input');
const deliveryPersonSuggestions = document.getElementById('delivery-person-suggestions');
const deliveryPersonLoading = document.getElementById('delivery-person-loading');
const selectedDeliveryPerson = document.getElementById('selected-delivery-person');
const deliveryPersonSelect = document.getElementById('delivery-person-select');
let deliveryPersonSearchTimeout;
let currentDeliveryPersonSearchTerm = '';
let currentDeliveryPersonPage = 1;
let isDeliveryPersonLoadingMore = false;
let hasMoreDeliveryPersonData = true;

function initializeDeliveryPersonSearch() {
  if (!deliveryPersonSearchInput) return;
  
  // Trigger delivery person search as you type
  deliveryPersonSearchInput.addEventListener('input', function(e) {
    clearTimeout(deliveryPersonSearchTimeout);
    const query = this.value.trim();
    currentDeliveryPersonSearchTerm = query;
    
    // Reset pagination on new search
    currentDeliveryPersonPage = 1;
    hasMoreDeliveryPersonData = true;
    
    if (query.length === 0) {
      // Show all delivery people when input is empty
      deliveryPersonSearchTimeout = setTimeout(() => {
        showDeliveryPersonLoading();
        fetchDeliveryPersonSuggestions('', true);
      }, 100);
      return;
    }
    
    // Add debouncing - wait 300ms after user stops typing
    deliveryPersonSearchTimeout = setTimeout(() => {
      showDeliveryPersonLoading();
      fetchDeliveryPersonSuggestions(query, true);
    }, 300);
  });
  
  // Handle focus - show dropdown with all delivery people
  deliveryPersonSearchInput.addEventListener('focus', function() {
    if (!deliveryPersonSelect.value) {
      const query = this.value.trim();
      currentDeliveryPersonPage = 1;
      hasMoreDeliveryPersonData = true;
      showDeliveryPersonLoading();
      fetchDeliveryPersonSuggestions(query, true);
    }
  });
  
  // Handle blur (with delay to allow clicking suggestions)
  deliveryPersonSearchInput.addEventListener('blur', function() {
    setTimeout(() => {
      hideDeliveryPersonSuggestions();
    }, 200);
  });
}

// Clear delivery person button
document.addEventListener('click', function(e) {
  if (e.target.closest('.clear-delivery-person')) {
    clearSelectedDeliveryPerson();
  }
});

function fetchDeliveryPersonSuggestions(query, resetList = false) {
  if (resetList) {
    currentDeliveryPersonPage = 1;
    hasMoreDeliveryPersonData = true;
  }
  
  fetch(`/api/delivery_people/search?q=${encodeURIComponent(query)}&page=${currentDeliveryPersonPage}`)
    .then(response => response.json())
    .then(data => {
      hideDeliveryPersonLoading();
      
      const deliveryPersonSuggestionsList = data.results || [];
      hasMoreDeliveryPersonData = data.pagination?.more || false;
      
      if (resetList || currentDeliveryPersonPage === 1) {
        displayDeliveryPersonSuggestions(deliveryPersonSuggestionsList);
      } else {
        appendDeliveryPersonSuggestions(deliveryPersonSuggestionsList);
      }
      
      isDeliveryPersonLoadingMore = false;
    })
    .catch(error => {
      console.error('Delivery person search error:', error);
      hideDeliveryPersonLoading();
      isDeliveryPersonLoadingMore = false;
    });
}

function displayDeliveryPersonSuggestions(suggestions) {
  if (suggestions.length === 0) {
    deliveryPersonSuggestions.innerHTML = '<div class="delivery-person-suggestion-item">No delivery people found</div>';
    deliveryPersonSuggestions.style.display = 'block';
    return;
  }
  
  const html = suggestions.map(suggestion => {
    const highlightedName = highlightSearchTerm(suggestion.text || suggestion.name, currentDeliveryPersonSearchTerm);
    const email = suggestion.email || '';
    
    return `
      <div class="delivery-person-suggestion-item" data-delivery-person-id="${suggestion.id}" data-delivery-person-name="${suggestion.text || suggestion.name}" data-delivery-person-email="${email}">
        <div class="delivery-person-suggestion-name">${highlightedName}</div>
        ${email ? `<div class="delivery-person-suggestion-email"><i class="fas fa-envelope me-1"></i>${email}</div>` : ''}
      </div>
    `;
  }).join('');
  
  deliveryPersonSuggestions.innerHTML = html;
  if (hasMoreDeliveryPersonData) {
    deliveryPersonSuggestions.innerHTML += '<div class="load-more-indicator" style="padding: 0.5rem; text-align: center; color: #666; font-size: 0.85rem;">Scroll for more...</div>';
  }
  deliveryPersonSuggestions.style.display = 'block';
  
  attachDeliveryPersonSuggestionEventListeners();
  attachDeliveryPersonScrollListener();
}

function appendDeliveryPersonSuggestions(suggestions) {
  if (suggestions.length === 0) return;
  
  // Remove the load more indicator if it exists
  const loadMoreIndicator = deliveryPersonSuggestions.querySelector('.load-more-indicator');
  if (loadMoreIndicator) {
    loadMoreIndicator.remove();
  }
  
  const html = suggestions.map(suggestion => {
    const highlightedName = highlightSearchTerm(suggestion.text || suggestion.name, currentDeliveryPersonSearchTerm);
    const email = suggestion.email || '';
    
    return `
      <div class="delivery-person-suggestion-item" data-delivery-person-id="${suggestion.id}" data-delivery-person-name="${suggestion.text || suggestion.name}" data-delivery-person-email="${email}">
        <div class="delivery-person-suggestion-name">${highlightedName}</div>
        ${email ? `<div class="delivery-person-suggestion-email"><i class="fas fa-envelope me-1"></i>${email}</div>` : ''}
      </div>
    `;
  }).join('');
  
  deliveryPersonSuggestions.insertAdjacentHTML('beforeend', html);
  
  if (hasMoreDeliveryPersonData) {
    deliveryPersonSuggestions.insertAdjacentHTML('beforeend', '<div class="load-more-indicator" style="padding: 0.5rem; text-align: center; color: #666; font-size: 0.85rem;">Scroll for more...</div>');
  }
  
  attachDeliveryPersonSuggestionEventListeners();
}

function attachDeliveryPersonSuggestionEventListeners() {
  // Add click handlers to new items only
  document.querySelectorAll('.delivery-person-suggestion-item:not([data-listeners-attached])').forEach(item => {
    if (item.dataset.deliveryPersonId) {
      item.addEventListener('click', function() {
        selectDeliveryPerson(
          this.dataset.deliveryPersonId,
          this.dataset.deliveryPersonName,
          this.dataset.deliveryPersonEmail
        );
      });
      
      item.addEventListener('mouseenter', function() {
        document.querySelectorAll('.delivery-person-suggestion-item.active').forEach(active => {
          active.classList.remove('active');
        });
        this.classList.add('active');
      });
      
      item.setAttribute('data-listeners-attached', 'true');
    }
  });
}

function attachDeliveryPersonScrollListener() {
  deliveryPersonSuggestions.removeEventListener('scroll', handleDeliveryPersonScroll);
  deliveryPersonSuggestions.addEventListener('scroll', handleDeliveryPersonScroll);
}

function handleDeliveryPersonScroll() {
  if (!hasMoreDeliveryPersonData || isDeliveryPersonLoadingMore) return;
  
  const scrollTop = deliveryPersonSuggestions.scrollTop;
  const scrollHeight = deliveryPersonSuggestions.scrollHeight;
  const clientHeight = deliveryPersonSuggestions.clientHeight;
  
  // Load more when user scrolls to within 50px of the bottom
  if (scrollTop + clientHeight >= scrollHeight - 50) {
    isDeliveryPersonLoadingMore = true;
    currentDeliveryPersonPage++;
    
    // Show loading indicator
    const loadMoreIndicator = deliveryPersonSuggestions.querySelector('.load-more-indicator');
    if (loadMoreIndicator) {
      loadMoreIndicator.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Loading more...';
    }
    
    fetchDeliveryPersonSuggestions(currentDeliveryPersonSearchTerm, false);
  }
}

function selectDeliveryPerson(id, name, email) {
  deliveryPersonSelect.value = id;
  deliveryPersonSearchInput.style.display = 'none';
  selectedDeliveryPerson.style.display = 'flex';
  
  selectedDeliveryPerson.querySelector('.selected-delivery-person-name').textContent = name;
  selectedDeliveryPerson.querySelector('.selected-delivery-person-email').textContent = email ? email : 'No email';
  
  hideDeliveryPersonSuggestions();
}

function clearSelectedDeliveryPerson() {
  deliveryPersonSelect.value = '';
  deliveryPersonSearchInput.value = '';
  deliveryPersonSearchInput.style.display = 'block';
  selectedDeliveryPerson.style.display = 'none';
  hideDeliveryPersonSuggestions();
}

function showDeliveryPersonLoading() {
  deliveryPersonLoading.style.display = 'block';
  deliveryPersonSuggestions.style.display = 'none';
}

function hideDeliveryPersonLoading() {
  deliveryPersonLoading.style.display = 'none';
}

function hideDeliveryPersonSuggestions() {
  deliveryPersonSuggestions.style.display = 'none';
  deliveryPersonLoading.style.display = 'none';
}

function highlightSearchTerm(text, term) {
  if (!term) return text;
  
  const regex = new RegExp(`(${term})`, 'gi');
  return text.replace(regex, '<span class="search-highlight">$1</span>');
}

// Available data loaded from server (for product search)
const availableProducts = [
  <% @products.each_with_index do |p, index| %>
    {
      id: <%= p.id %>,
      name: "<%= j(p.name) %>",
      price: "<%= p.price %>",
      unit_type: "<%= p.unit_type %>"
    }<%= index < @products.count - 1 ? ',' : '' %>
  <% end %>
];

// Product Search
function initializeProductSearch() {
  const searchInput = document.getElementById('product_search_input');
  const searchResults = document.getElementById('product_search_results');
  const hiddenField = document.getElementById('selected_product_id');
  
  if (!searchInput || !searchResults || !hiddenField) return;
  
  let searchTimeout = null;
  
  searchInput.addEventListener('input', function() {
    const query = this.value.trim();
    
    if (searchTimeout) {
      clearTimeout(searchTimeout);
    }
    
    if (query.length < 1) {
      hideSearchResults(searchResults);
      return;
    }
    
    searchTimeout = setTimeout(() => {
      performProductSearch(query, searchInput, searchResults, hiddenField);
    }, 200);
  });
  
  // Clear hidden field when input is cleared
  searchInput.addEventListener('input', function() {
    if (this.value.trim() === '') {
      hiddenField.value = '';
    }
  });
  
  // Hide results when clicking outside
  document.addEventListener('click', function(e) {
    if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
      hideSearchResults(searchResults);
    }
  });
}

function performProductSearch(query, searchInput, searchResults, hiddenField) {
  const filteredProducts = availableProducts.filter(product =>
    product.name.toLowerCase().includes(query.toLowerCase())
  );
  
  if (filteredProducts.length > 0) {
    displayProductResults(filteredProducts, searchInput, searchResults, hiddenField);
  } else {
    showNoResults(searchResults, 'products');
  }
}

function displayProductResults(products, searchInput, searchResults, hiddenField) {
  const resultsList = searchResults.querySelector('.search-results-list');
  resultsList.innerHTML = '';
  
  products.forEach(product => {
    const resultItem = document.createElement('div');
    resultItem.className = 'search-result-item p-3 border-bottom cursor-pointer';
    resultItem.innerHTML = `
      <div class="d-flex align-items-center">
        <div class="me-3">
          <div class="avatar-circle bg-success">
            ${product.name.charAt(0).toUpperCase()}
          </div>
        </div>
        <div class="flex-grow-1">
          <div class="fw-bold">${product.name}</div>
          <div class="text-muted small">
            <i class="fas fa-rupee-sign me-1"></i>Rs ${product.price}
            <i class="fas fa-balance-scale me-1 ms-2"></i>${product.unit_type}
          </div>
        </div>
      </div>
    `;
    
    resultItem.addEventListener('click', function() {
      selectProduct(product, searchInput, searchResults, hiddenField);
    });
    
    resultsList.appendChild(resultItem);
  });
  
  showSearchResults(searchResults);
}

function selectProduct(product, searchInput, searchResults, hiddenField) {
  searchInput.value = product.name;
  hiddenField.value = product.id;
  hideSearchResults(searchResults);
}

// Search Helper Functions
function showSearchLoading(searchResults) {
  searchResults.classList.remove('d-none');
  searchResults.querySelector('.search-loading').classList.remove('d-none');
  searchResults.querySelector('.search-results-list').innerHTML = '';
  searchResults.querySelector('.search-no-results').classList.add('d-none');
}

function hideSearchLoading(searchResults) {
  searchResults.querySelector('.search-loading').classList.add('d-none');
}

function showSearchResults(searchResults) {
  searchResults.classList.remove('d-none');
  searchResults.querySelector('.search-no-results').classList.add('d-none');
}

function showNoResults(searchResults, type = 'items') {
  searchResults.classList.remove('d-none');
  const noResultsDiv = searchResults.querySelector('.search-no-results');
  noResultsDiv.classList.remove('d-none');
  noResultsDiv.innerHTML = `
    <div class="p-3 text-muted text-center">
      <i class="fas fa-search me-2"></i>No ${type} found
    </div>
  `;
  searchResults.querySelector('.search-results-list').innerHTML = '';
}

function hideSearchResults(searchResults) {
  searchResults.classList.add('d-none');
}
</script>

<style>
/* Form Styles */
.form-label.fw-bold {
  color: #5a5c69;
  font-weight: 600;
}

/* Customer Search Styles */
.customer-search-container {
  position: relative;
}

.customer-search-input {
  padding-right: 2.5rem !important;
  border-radius: 12px !important;
  border: 2px solid rgba(102, 126, 234, 0.2) !important;
  transition: all 0.3s ease;
  background: white;
}

.customer-search-input:focus {
  border-color: #667eea !important;
  box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25) !important;
}

.customer-search-container .search-icon {
  position: absolute;
  right: 1rem;
  top: 50%;
  transform: translateY(-50%);
  color: #667eea;
  pointer-events: none;
  z-index: 10;
}

.customer-suggestions {
  position: absolute;
  top: 100%;
  left: 0;
  min-width: 400px;
  width: max-content;
  max-width: 500px;
  background: white;
  border: 1px solid rgba(102, 126, 234, 0.2);
  border-radius: 12px;
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  z-index: 1000;
  max-height: 450px;
  overflow-y: auto;
  margin-top: 0.5rem;
}

.customer-suggestion-item {
  padding: 1rem 1.5rem;
  border-bottom: 1px solid rgba(102, 126, 234, 0.05);
  cursor: pointer;
  transition: all 0.3s ease;
}

.customer-suggestion-item:hover {
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
}

.customer-suggestion-item:last-child {
  border-bottom: none;
  border-radius: 0 0 12px 12px;
}

.customer-suggestion-item:first-child {
  border-radius: 12px 12px 0 0;
}

.customer-suggestion-name {
  font-weight: 600;
  color: #2d3748;
  margin-bottom: 0.25rem;
}

.customer-suggestion-phone {
  font-size: 0.875rem;
  color: #718096;
}

.customer-loading {
  position: absolute;
  top: 100%;
  left: 0;
  min-width: 400px;
  width: max-content;
  max-width: 500px;
  background: white;
  border: 1px solid rgba(102, 126, 234, 0.2);
  border-radius: 12px;
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  z-index: 1000;
  padding: 1rem 1.5rem;
  margin-top: 0.5rem;
  text-align: center;
  color: #718096;
  font-size: 0.875rem;
}

.selected-customer {
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
  border: 2px solid #667eea;
  border-radius: 12px;
  padding: 1rem;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.selected-customer-info {
  flex: 1;
}

.selected-customer-name {
  font-weight: 600;
  color: #2d3748;
  margin-bottom: 0.25rem;
}

.selected-customer-phone {
  font-size: 0.875rem;
  color: #718096;
}

.clear-customer {
  border-radius: 8px !important;
  padding: 0.25rem 0.5rem !important;
}

/* Delivery Person Search Styles */
.delivery-person-search-container {
  position: relative;
}

.delivery-person-search-input {
  padding-right: 2.5rem !important;
  border-radius: 12px !important;
  border: 2px solid rgba(102, 126, 234, 0.2) !important;
  transition: all 0.3s ease;
  background: white;
}

.delivery-person-search-input:focus {
  border-color: #667eea !important;
  box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25) !important;
}

.delivery-person-search-container .search-icon {
  position: absolute;
  right: 1rem;
  top: 50%;
  transform: translateY(-50%);
  color: #667eea;
  pointer-events: none;
  z-index: 10;
}

.delivery-person-suggestions {
  position: absolute;
  top: 100%;
  left: 0;
  min-width: 400px;
  width: max-content;
  max-width: 500px;
  background: white;
  border: 1px solid rgba(102, 126, 234, 0.2);
  border-radius: 12px;
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  z-index: 1000;
  max-height: 450px;
  overflow-y: auto;
  margin-top: 0.5rem;
}

.delivery-person-suggestion-item {
  padding: 1rem 1.5rem;
  border-bottom: 1px solid rgba(102, 126, 234, 0.05);
  cursor: pointer;
  transition: all 0.3s ease;
}

.delivery-person-suggestion-item:hover {
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
}

.delivery-person-suggestion-item:last-child {
  border-bottom: none;
  border-radius: 0 0 12px 12px;
}

.delivery-person-suggestion-item:first-child {
  border-radius: 12px 12px 0 0;
}

.delivery-person-suggestion-name {
  font-weight: 600;
  color: #2d3748;
  margin-bottom: 0.25rem;
}

.delivery-person-suggestion-email {
  font-size: 0.875rem;
  color: #718096;
}

.delivery-person-loading {
  position: absolute;
  top: 100%;
  left: 0;
  min-width: 400px;
  width: max-content;
  max-width: 500px;
  background: white;
  border: 1px solid rgba(102, 126, 234, 0.2);
  border-radius: 12px;
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  z-index: 1000;
  padding: 1rem 1.5rem;
  margin-top: 0.5rem;
  text-align: center;
  color: #718096;
  font-size: 0.875rem;
}

.selected-delivery-person {
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
  border: 2px solid #667eea;
  border-radius: 12px;
  padding: 1rem;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.selected-delivery-person-info {
  flex: 1;
}

.selected-delivery-person-name {
  font-weight: 600;
  color: #2d3748;
  margin-bottom: 0.25rem;
}

.selected-delivery-person-email {
  font-size: 0.875rem;
  color: #718096;
}

.clear-delivery-person {
  border-radius: 8px !important;
  padding: 0.25rem 0.5rem !important;
}

.search-highlight {
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.2) 0%, rgba(118, 75, 162, 0.2) 100%);
  padding: 0.1rem 0.3rem;
  border-radius: 4px;
  font-weight: 600;
}

/* Legacy search styles for product search */
.search-results-dropdown {
  position: absolute;
  top: 100%;
  left: 0;
  right: 0;
  background: white;
  border: 1px solid #e3e6f0;
  border-radius: 0.35rem;
  box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
  z-index: 1000;
  max-height: 300px;
  overflow-y: auto;
}

.search-result-item {
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.search-result-item:hover {
  background-color: #f8f9fc;
}

.search-result-item:last-child {
  border-bottom: none;
}

/* Avatar Styles */
.avatar-circle {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: linear-gradient(45deg, #4e73df, #224abe);
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: bold;
  font-size: 16px;
}

.avatar-circle.bg-info {
  background: linear-gradient(45deg, #36b9cc, #258391);
}

.avatar-circle.bg-success {
  background: linear-gradient(45deg, #1cc88a, #13855c);
}

/* Search Input Focus */
.form-control:focus {
  border-color: #4e73df;
  box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
}

/* Loading Styles */
.search-loading {
  color: #6c757d;
}

.search-no-results {
  color: #6c757d;
}

/* Utility Classes */
.cursor-pointer {
  cursor: pointer;
}

/* Card Enhancement */
.card {
  border: 1px solid #e3e6f0;
  box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
}

.card-header {
  background-color: #f8f9fc;
  border-bottom: 1px solid #e3e6f0;
}

/* Alert Styles */
.alert-warning {
  background-color: #fff3cd;
  border-color: #ffecb3;
  color: #856404;
}

.alert-danger {
  background-color: #f8d7da;
  border-color: #f5c6cb;
  color: #721c24;
}

/* Button Styles */
.btn-primary {
  background-color: #4e73df;
  border-color: #4e73df;
}

.btn-primary:hover {
  background-color: #2e59d9;
  border-color: #2653d4;
}

.btn-secondary {
  background-color: #858796;
  border-color: #858796;
}

.btn-secondary:hover {
  background-color: #717384;
  border-color: #6c757d;
}

.btn-success {
  background-color: #1cc88a;
  border-color: #1cc88a;
}

.btn-success:hover {
  background-color: #17a673;
  border-color: #169b6b;
}

.btn-info {
  background-color: #36b9cc;
  border-color: #36b9cc;
}

.btn-info:hover {
  background-color: #2c9faf;
  border-color: #2a96a5;
}

/* Status Badge Styles */
.badge {
  font-size: 0.875em;
  font-weight: 500;
  padding: 0.5em 0.75em;
  border-radius: 0.35rem;
}

/* Responsive Improvements */
@media (max-width: 768px) {
  .search-results-dropdown {
    max-height: 200px;
  }
  
  .avatar-circle {
    width: 32px;
    height: 32px;
    font-size: 14px;
  }
  
  .form-text small {
    font-size: 0.75rem;
  }
}

/* Spinner Animation */
@keyframes spinner-border {
  to {
    transform: rotate(360deg);
  }
}

.spinner-border {
  display: inline-block;
  width: 1rem;
  height: 1rem;
  vertical-align: text-bottom;
  border: 0.125em solid currentColor;
  border-right-color: transparent;
  border-radius: 50%;
  animation: spinner-border 0.75s linear infinite;
}

.spinner-border-sm {
  width: 0.75rem;
  height: 0.75rem;
  border-width: 0.1em;
}

/* Form Group Spacing */
.row.g-3 > * {
  padding-right: calc(var(--bs-gutter-x) * 0.5);
  padding-left: calc(var(--bs-gutter-x) * 0.5);
  margin-top: var(--bs-gutter-y);
}

/* Input Group Styling */
.position-relative {
  position: relative;
}

/* Custom Select Styling */
.form-select {
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m1 6 7 7 7-7'/%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: right 0.75rem center;
  background-size: 16px 12px;
}

.form-select:focus {
  border-color: #4e73df;
  box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);
}

/* Text Area Styling */
.form-control[rows] {
  resize: vertical;
}

/* Code Styling */
code {
  color: #e83e8c;
  font-size: 87.5%;
  word-wrap: break-word;
  background-color: #f8f9fa;
  padding: 0.125rem 0.25rem;
  border-radius: 0.25rem;
}
</style>