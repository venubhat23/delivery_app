<!-- Enhanced Invoices Index Page -->
<div class="container-fluid">
  <div class="row" style="margin-top: 2rem; margin-left: 1rem; padding-top: 1.5rem;">
    <div class="col-12">
<div class="page-header">
  <div class="d-flex justify-content-between align-items-center">
    <div>
      <h1 class="h2 mb-2">
        <i class="fas fa-file-invoice me-3"></i>Invoice Management
      </h1>
      <p class="text-muted mb-0">Manage your invoices, track payments, and monitor overdue accounts</p>
    </div>
    <div class="d-flex gap-2">
      <%= link_to generate_invoices_path, class: 'btn btn-success' do %>
        <i class="fas fa-plus me-2"></i>Generate Invoice
      <% end %>
      <button type="button" class="btn btn-primary" onclick="openGenerateMonthlyModal()">
        <i class="fas fa-calendar me-2"></i>Generate Monthly for All
      </button>
    </div>
  </div>
</div>

<!-- Enhanced Stats Cards -->
<div class="row mb-4">
  <div class="col-md-3 mb-3">
    <div class="stats-card">
      <div class="stats-icon">
        <i class="fas fa-clock"></i>
      </div>
      <div class="stats-number"><%= @stats[:pending] %></div>
      <div class="stats-label">Pending Invoices</div>
      <div class="stats-sublabel">₹<%= number_with_delimiter(@stats[:total_pending_amount] || 0) %></div>
    </div>
  </div>
  <div class="col-md-3 mb-3">
    <div class="stats-card stats-card-success">
      <div class="stats-icon">
        <i class="fas fa-check-circle"></i>
      </div>
      <div class="stats-number"><%= @stats[:paid] %></div>
      <div class="stats-label">Paid Invoices</div>
      <div class="stats-sublabel">₹<%= number_with_delimiter(@stats[:total_paid_amount] || 0) %></div>
    </div>
  </div>
  <div class="col-md-3 mb-3">
    <div class="stats-card stats-card-danger">
      <div class="stats-icon">
        <i class="fas fa-exclamation-triangle"></i>
      </div>
      <div class="stats-number"><%= @stats[:overdue] %></div>
      <div class="stats-label">Overdue Invoices</div>
      <div class="stats-sublabel">Action Required</div>
    </div>
  </div>
  <div class="col-md-3 mb-3">
    <div class="stats-card stats-card-info">
      <div class="stats-icon">
        <i class="fas fa-file-invoice"></i>
      </div>
      <div class="stats-number"><%= @stats[:pending] + @stats[:paid] + @stats[:overdue] %></div>
      <div class="stats-label">Total Invoices</div>
      <div class="stats-sublabel">All Time</div>
    </div>
  </div>
</div>

<!-- Enhanced Filters -->
<div class="card mb-4">
  <div class="card-body">
    <div class="row align-items-center">
      <div class="col-md-8">
        <%= form_with url: invoices_path, method: :get, local: true, class: 'row g-3' do |form| %>
          <div class="col-md-3">
            <div data-controller="searchable-select" data-searchable-select-search-type-value="local" data-searchable-select-placeholder-value="Search customers (e.g., 'pr' for Pramod, Pradeep)...">
              <%= form.select :customer_id, 
                    options_from_collection_for_select(@customers, :id, :name, params[:customer_id]),
                    { prompt: 'All Customers' },
                    { class: 'form-select', data: { "searchable-select-target" => "select" } } %>
            </div>
          </div>
          <div class="col-md-2">
            <%= form.select :status, 
                  options_for_select([
                    ['All Statuses', ''],
                    ['Pending', 'pending'],
                    ['Paid', 'paid'],
                    ['Overdue', 'overdue']
                  ], params[:status]),
                  {},
                  { class: 'form-select' } %>
          </div>
          <div class="col-md-2">
            <%= form.select :month,
                  options_for_select((1..12).map { |m| [Date::MONTHNAMES[m], m] }.unshift(['All Months', '']), params[:month]),
                  {},
                  { class: 'form-select' } %>
          </div>
          <div class="col-md-2">
            <%= form.select :year,
                  options_for_select((2020..Date.current.year + 1).to_a.reverse.map { |y| [y, y] }.unshift(['All Years', '']), params[:year]),
                  {},
                  { class: 'form-select' } %>
          </div>
          <div class="col-md-3">
            <div class="search-container position-relative">
              <%= form.text_field :search, 
                    placeholder: 'Search invoices, customers...',
                    value: params[:search],
                    class: 'form-control search-input',
                    autocomplete: 'off',
                    id: 'live-search-input' %>
              <div class="search-icon">
                <i class="fas fa-search"></i>
              </div>
              <div class="search-suggestions" id="search-suggestions" style="display: none;">
                <!-- Suggestions will be populated here -->
              </div>
              <div class="search-loading" id="search-loading" style="display: none;">
                <i class="fas fa-spinner fa-spin me-2"></i>Searching...
              </div>
              <%= render 'shared/super_attractive_loader', loader_id: 'superInvoiceSearchLoader', loading_text: 'Analyzing Invoice Data' %>
            </div>
          </div>
          <div class="col-md-1">
            <%= form.submit 'Filter', class: 'btn btn-outline-primary' %>
          </div>
        <% end %>
      </div>
      <div class="col-md-4 text-end">
        <div class="d-flex align-items-center justify-content-end">
          <button type="button" class="btn btn-success btn-sm me-2" id="bulkWhatsAppBtn" style="display: none;"
                  title="Automatically open separate WhatsApp Web tabs for all selected customers. Allow popups when prompted.">
            <i class="fab fa-whatsapp me-2"></i>Send Bulk WhatsApp (<span id="selectedCount">0</span>)
          </button>
          <button type="button" class="btn btn-primary btn-sm me-2" onclick="openWhatsAppInvoiceModal()">
            <i class="fab fa-whatsapp me-2"></i>Generate & Send Invoice
          </button>
          <span class="badge bg-primary me-2"><%= @invoices.count %> invoices</span>
          <div class="btn-group btn-group-sm" role="group">
            <button type="button" class="btn btn-outline-secondary active" id="tableView">
              <i class="fas fa-table"></i>
            </button>
            <button type="button" class="btn btn-outline-secondary" id="cardView">
              <i class="fas fa-th"></i>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Invoices Table -->
<div class="card">
  <div class="card-header">
    <div class="d-flex justify-content-between align-items-center">
      <h6 class="mb-0">
        <i class="fas fa-list me-2"></i>Invoice List
      </h6>
      <div class="d-flex align-items-center">
        <% if params.to_unsafe_h.any? { |k, v| k.in?(['customer_id', 'status', 'month', 'year', 'search']) && v.present? } %>
          <span class="badge bg-info me-2">Filtered Results</span>
        <% end %>
      </div>
    </div>
  </div>
  <div class="card-body p-0">
    <% if @invoices.any? %>
      <!-- Table View -->
      <div id="tableViewContent" class="table-responsive">
        <table class="table table-hover mb-0">
          <thead>
            <tr>
              <th width="40">
                <input type="checkbox" id="selectAll" class="form-check-input">
              </th>
              <th><i class="fas fa-hashtag me-1"></i>Invoice #</th>
              <th><i class="fas fa-user me-1"></i>Customer</th>
              <th><i class="fas fa-calendar me-1"></i>Date</th>
              <th><i class="fas fa-calendar-times me-1"></i>Due Date</th>
              <th><i class="fas fa-rupee-sign me-1"></i>Amount</th>
              <th><i class="fas fa-info-circle me-1"></i>Status</th>
              <th><i class="fas fa-tag me-1"></i>Type</th>
              <th><i class="fas fa-cogs me-1"></i>Actions</th>
            </tr>
          </thead>
          <tbody>
            <% @invoices.each do |invoice| %>
              <tr class="invoice-row">
                <td>
                  <% if invoice.customer.phone_number.present? && invoice.status != 'paid' %>
                    <input type="checkbox" 
                           class="form-check-input invoice-checkbox" 
                           data-invoice-id="<%= invoice.id %>"
                           data-customer-name="<%= invoice.customer.name %>"
                           data-customer-phone="<%= invoice.customer.phone_number %>"
                           data-invoice-number="<%= invoice.formatted_number %>"
                           data-amount="<%= invoice.total_amount %>">
                  <% end %>
                </td>
                <td>
                  <div class="d-flex align-items-center">
                    <div class="invoice-avatar me-3">
                      #
                    </div>
                    <div>
                      <strong class="text-primary"><%= link_to invoice.formatted_number, invoice, class: 'text-decoration-none' %></strong>
                    </div>
                  </div>
                </td>
                <td>
                  <div class="customer-info">
                    <strong><%= invoice.customer.name %></strong>
                    <% if invoice.customer.phone_number.present? %>
                      <div class="text-muted small">
                        <i class="fas fa-phone me-1"></i><%= invoice.customer.phone_number %>
                      </div>
                    <% end %>
                  </div>
                </td>
                <td>
                  <span class="text-muted">
                    <%= invoice.invoice_date.strftime('%d %b %Y') %>
                  </span>
                </td>
                <td>
                  <div class="due-date-cell">
                    <span class="<%= invoice.overdue? ? 'text-danger fw-bold' : 'text-muted' %>">
                      <%= invoice.due_date.strftime('%d %b %Y') %>
                    </span>
                    <% if invoice.overdue? %>
                      <div class="text-danger small">
                        <i class="fas fa-exclamation-triangle me-1"></i>
                        <%= invoice.days_overdue %> days overdue
                      </div>
                    <% end %>
                  </div>
                </td>
                <td>
                  <span class="fw-bold text-success">
                    ₹<%= number_with_delimiter(invoice.total_amount) %>
                  </span>
                </td>
                <td>
                  <% case invoice.status %>
                  <% when 'pending' %>
                    <span class="badge bg-warning">
                      <i class="fas fa-clock me-1"></i>Pending
                    </span>
                  <% when 'paid' %>
                    <span class="badge bg-success">
                      <i class="fas fa-check me-1"></i>Paid
                    </span>
                  <% when 'overdue' %>
                    <span class="badge bg-danger">
                      <i class="fas fa-exclamation-triangle me-1"></i>Overdue
                    </span>
                  <% end %>
                </td>
                <td>
                  <span class="badge bg-info">
                    <i class="fas fa-tag me-1"></i>
                    <%= invoice.invoice_type&.humanize || 'Manual' %>
                  </span>
                </td>
                <td>
                  <div class="btn-group" role="group">
                    <%= link_to invoice, class: "btn btn-sm btn-outline-primary", title: "View Invoice" do %>
                      <i class="fas fa-eye"></i>
                    <% end %>
                    <%= link_to invoice_path(invoice, format: :pdf), 
                          class: 'btn btn-sm btn-outline-info', 
                          title: 'Download PDF', 
                          target: '_blank' do %>
                      <i class="fas fa-file-pdf"></i>
                    <% end %>
                    <button type="button" 
                            class="btn btn-sm btn-outline-warning share-whatsapp-btn" 
                            data-invoice-id="<%= invoice.id %>"
                            data-invoice-number="<%= invoice.formatted_number %>"
                            data-customer-name="<%= invoice.customer.name %>"
                            data-customer-phone="<%= invoice.customer.phone_number %>"
                            data-amount="<%= invoice.total_amount %>"
                            data-bs-toggle="modal" 
                            data-bs-target="#shareWhatsAppModal"
                            title="Share via WhatsApp">
                      <i class="fab fa-whatsapp"></i>
                    </button>
                    <% if invoice.status != 'paid' %>
                      <%= button_to convert_to_completed_invoice_path(invoice), 
                            method: :patch, 
                            class: 'btn btn-sm btn-outline-success', 
                            data: { confirm: 'Are you sure you want to convert this invoice to completed?' }, 
                            title: 'Convert to Completed' do %>
                        <i class="fas fa-check-double"></i>
                      <% end %>
                    <% end %>
                  </div>
                </td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </div>
      
      <!-- Pagination -->
      <div class="d-flex justify-content-center mt-4">
        <%= paginate @invoices, theme: 'twitter-bootstrap-4' %>
      </div>
      
      <!-- Card View (Hidden by default) -->
      <div id="cardViewContent" class="d-none">
        <div class="row p-4">
          <% @invoices.each do |invoice| %>
            <div class="col-md-6 col-lg-4 mb-4">
              <div class="invoice-card">
                <div class="invoice-card-header">
                  <div class="invoice-number">
                    <i class="fas fa-file-invoice me-2"></i>
                    <%= invoice.formatted_number %>
                  </div>
                  <div class="invoice-status">
                    <% case invoice.status %>
                    <% when 'pending' %>
                      <span class="badge bg-warning">Pending</span>
                    <% when 'paid' %>
                      <span class="badge bg-success">Paid</span>
                    <% when 'overdue' %>
                      <span class="badge bg-danger">Overdue</span>
                    <% end %>
                  </div>
                </div>
                
                <div class="invoice-card-body">
                  <h6 class="customer-name"><%= invoice.customer.name %></h6>
                  
                  <div class="invoice-details">
                    <div class="detail-item">
                      <i class="fas fa-calendar me-2 text-muted"></i>
                      <span>Date: <%= invoice.invoice_date.strftime('%d %b %Y') %></span>
                    </div>
                    <div class="detail-item">
                      <i class="fas fa-calendar-times me-2 text-muted"></i>
                      <span class="<%= invoice.overdue? ? 'text-danger' : '' %>">
                        Due: <%= invoice.due_date.strftime('%d %b %Y') %>
                      </span>
                    </div>
                    <div class="detail-item">
                      <i class="fas fa-rupee-sign me-2 text-muted"></i>
                      <span class="fw-bold text-success">₹<%= number_with_delimiter(invoice.total_amount) %></span>
                    </div>
                  </div>
                  
                  <div class="invoice-actions mt-3">
                    <%= link_to invoice, class: "btn btn-sm btn-outline-primary me-1" do %>
                      <i class="fas fa-eye me-1"></i>View
                    <% end %>
                    <%= link_to invoice_path(invoice, format: :pdf), 
                          class: 'btn btn-sm btn-outline-info me-1', 
                          target: '_blank' do %>
                      <i class="fas fa-file-pdf me-1"></i>PDF
                    <% end %>
                    <button type="button" 
                            class="btn btn-sm btn-outline-warning me-1 share-whatsapp-btn" 
                            data-invoice-id="<%= invoice.id %>"
                            data-invoice-number="<%= invoice.formatted_number %>"
                            data-customer-name="<%= invoice.customer.name %>"
                            data-customer-phone="<%= invoice.customer.phone_number %>"
                            data-amount="<%= invoice.total_amount %>"
                            data-bs-toggle="modal" 
                            data-bs-target="#shareWhatsAppModal">
                      <i class="fab fa-whatsapp me-1"></i>WhatsApp
                    </button>
                    <% if invoice.status != 'paid' %>
                      <%= button_to convert_to_completed_invoice_path(invoice), 
                            method: :patch, 
                            class: 'btn btn-sm btn-outline-success', 
                            data: { confirm: 'Convert to completed?' } do %>
                        <i class="fas fa-check-double me-1"></i>Complete
                      <% end %>
                    <% end %>
                  </div>
                </div>
              </div>
            </div>
          <% end %>
        </div>
        
        <!-- Pagination for Card View -->
        <div class="d-flex justify-content-center mt-4">
          <%= paginate @invoices, theme: 'twitter-bootstrap-4' %>
        </div>
      </div>
    <% else %>
      <div class="empty-state">
        <i class="fas fa-file-invoice"></i>
        <h4>No Invoices Found</h4>
        <% if params.to_unsafe_h.any? { |k, v| k.in?(['customer_id', 'status', 'month', 'year', 'search']) && v.present? } %>
          <p>No invoices match your current filters.</p>
          <%= link_to invoices_path, class: "btn btn-outline-primary me-2" do %>
            <i class="fas fa-times me-2"></i>Clear Filters
          <% end %>
        <% else %>
          <p>Start by generating your first invoice.</p>
        <% end %>
        <div class="mt-3">
          <%= link_to generate_invoices_path, class: 'btn btn-success me-2' do %>
            <i class="fas fa-plus me-2"></i>Generate Invoice
          <% end %>
          <button type="button" class="btn btn-primary" onclick="openGenerateMonthlyModal()">
            <i class="fas fa-calendar me-2"></i>Generate Monthly for All
          </button>
        </div>
      </div>
    <% end %>
  </div>
</div>

<style>
/* Enhanced Invoices Index Styles - Modern & Professional */

/* Page Layout Improvements */
.page-header {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border-radius: 20px;
  padding: 2.5rem;
  margin-bottom: 2rem;
  box-shadow: 0 20px 40px rgba(102, 126, 234, 0.2);
  position: relative;
  overflow: hidden;
}

.page-header::before {
  content: '';
  position: absolute;
  top: -50%;
  right: -50%;
  width: 200%;
  height: 200%;
  background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
  animation: rotate 20s linear infinite;
}

.page-header h1 {
  color: white !important;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  position: relative;
  z-index: 2;
}

.page-header p {
  color: rgba(255, 255, 255, 0.9) !important;
  position: relative;
  z-index: 2;
}

.page-header .btn {
  position: relative;
  z-index: 2;
  backdrop-filter: blur(10px);
  background: rgba(255, 255, 255, 0.15) !important;
  border: 1px solid rgba(255, 255, 255, 0.2);
  color: white;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
}

.page-header .btn:hover {
  background: rgba(255, 255, 255, 0.25) !important;
  transform: translateY(-2px);
}

@keyframes rotate {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Enhanced Stats Cards */
.stats-card {
  background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
  border-radius: 20px;
  padding: 2rem;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
  border: 1px solid rgba(102, 126, 234, 0.1);
}

.stats-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 4px;
  background: var(--primary-gradient);
}

.stats-card::after {
  content: '';
  position: absolute;
  top: 0;
  right: 0;
  width: 60px;
  height: 60px;
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  border-radius: 0 0 0 60px;
}

.stats-card:hover {
  box-shadow: 0 20px 60px rgba(102, 126, 234, 0.15);
  transform: translateY(-8px) scale(1.02);
}

.stats-card .stats-icon {
  position: absolute;
  top: 1.5rem;
  right: 1.5rem;
  width: 50px;
  height: 50px;
  background: var(--primary-gradient);
  border-radius: 15px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 20px;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
  z-index: 2;
}

.stats-card .stats-number {
  font-size: 2.5rem;
  font-weight: 800;
  background: var(--primary-gradient);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  line-height: 1;
  margin-bottom: 0.5rem;
  position: relative;
  z-index: 2;
}

.stats-card .stats-label {
  color: var(--text-secondary);
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 1px;
  font-size: 0.8rem;
  position: relative;
  z-index: 2;
}

.stats-sublabel {
  color: var(--text-secondary);
  font-size: 0.75rem;
  font-weight: 500;
  margin-top: 0.25rem;
  position: relative;
  z-index: 2;
}

.stats-card-success::before {
  background: var(--success-gradient);
}

.stats-card-warning::before {
  background: var(--warning-gradient);
}

.stats-card-danger::before {
  background: var(--danger-gradient);
}

.stats-card-info::before {
  background: var(--dark-gradient);
}

.stats-card-success .stats-icon {
  background: var(--success-gradient);
}

.stats-card-warning .stats-icon {
  background: var(--warning-gradient);
}

.stats-card-danger .stats-icon {
  background: var(--danger-gradient);
}

.stats-card-info .stats-icon {
  background: var(--dark-gradient);
}

/* Enhanced Filter Card */
.card {
  border-radius: 20px;
  border: none;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
  transition: all 0.3s ease;
  overflow: hidden;
}

.card:hover {
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.12);
  transform: translateY(-2px);
}

.card-header {
  background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
  border-bottom: 1px solid rgba(102, 126, 234, 0.1);
  padding: 1.5rem 2rem;
}

.card-body {
  padding: 2rem;
}

/* Enhanced Invoice Table */
.table {
  border-radius: 20px;
  overflow: hidden;
  box-shadow: none;
  margin: 0;
}

.table thead th {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  font-size: 0.875rem;
  padding: 1.5rem 1rem;
  border: none;
  position: relative;
}

.table thead th i {
  opacity: 0.8;
  margin-right: 0.5rem;
}

.invoice-row {
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  border-bottom: 1px solid rgba(102, 126, 234, 0.05);
}

.invoice-row:hover {
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.03) 0%, rgba(118, 75, 162, 0.03) 100%);
  transform: translateX(8px) scale(1.01);
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.1);
}

.invoice-row td {
  padding: 1.5rem 1rem;
  vertical-align: middle;
  border-color: rgba(102, 126, 234, 0.05);
}

/* Enhanced Invoice Avatar */
.invoice-avatar {
  width: 50px;
  height: 50px;
  border-radius: 15px;
  background: var(--primary-gradient);
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: 700;
  font-size: 18px;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
  transition: all 0.3s ease;
}

.invoice-avatar:hover {
  transform: scale(1.1) rotate(5deg);
  box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
}

/* Enhanced Invoice Cards */
.invoice-card {
  background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
  border-radius: 20px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  overflow: hidden;
  border: 1px solid rgba(102, 126, 234, 0.1);
  position: relative;
}

.invoice-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 4px;
  background: var(--primary-gradient);
}

.invoice-card:hover {
  box-shadow: 0 25px 50px rgba(102, 126, 234, 0.15);
  transform: translateY(-10px) scale(1.02);
}

.invoice-card-header {
  padding: 2rem;
  background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid rgba(102, 126, 234, 0.1);
  position: relative;
}

.invoice-card-body {
  padding: 2rem;
}

.invoice-number {
  font-weight: 700;
  color: var(--text-primary);
  margin-bottom: 1rem;
  font-size: 1.1rem;
}

.customer-name {
  font-weight: 700;
  color: var(--text-primary);
  margin-bottom: 1rem;
  font-size: 1.1rem;
}

.invoice-details {
  margin-bottom: 1.5rem;
}

.detail-item {
  display: flex;
  align-items: center;
  margin-bottom: 0.5rem;
  font-size: 0.875rem;
}

.invoice-actions {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
}

/* Info Sections */
.customer-info,
.due-date-cell {
  display: flex;
  flex-direction: column;
}

/* Enhanced Badges */
.badge {
  padding: 0.5rem 1rem;
  border-radius: 25px;
  font-weight: 600;
  font-size: 0.8rem;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
}

.badge:hover {
  transform: translateY(-1px);
  box-shadow: 0 6px 18px rgba(0, 0, 0, 0.15);
}

.badge.bg-info {
  background: linear-gradient(135deg, #06b6d4 0%, #0891b2 100%) !important;
}

.badge.bg-success {
  background: linear-gradient(135deg, #10b981 0%, #059669 100%) !important;
}

.badge.bg-danger {
  background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%) !important;
}

.badge.bg-warning {
  background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%) !important;
}

.badge.bg-secondary {
  background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%) !important;
}

.badge.bg-primary {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
}

/* Enhanced Action Buttons */
.btn-group .btn {
  border-radius: 12px !important;
  margin-right: 6px;
  padding: 0.5rem 0.75rem;
  transition: all 0.3s ease;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.btn-group .btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
}

.btn-group .btn:last-child {
  margin-right: 0;
}

.btn-outline-primary {
  border: 2px solid #667eea;
  color: #667eea;
  background: transparent;
}

.btn-outline-primary:hover {
  background: #667eea;
  color: white;
  border-color: #667eea;
}

.btn-outline-warning {
  border: 2px solid #f59e0b;
  color: #f59e0b;
  background: transparent;
}

.btn-outline-warning:hover {
  background: #f59e0b;
  color: white;
  border-color: #f59e0b;
}

.btn-outline-danger {
  border: 2px solid #ef4444;
  color: #ef4444;
  background: transparent;
}

.btn-outline-danger:hover {
  background: #ef4444;
  color: white;
  border-color: #ef4444;
}

.btn-outline-success {
  border: 2px solid #10b981;
  color: #10b981;
  background: transparent;
}

.btn-outline-success:hover {
  background: #10b981;
  color: white;
  border-color: #10b981;
}

.btn-outline-info {
  border: 2px solid #06b6d4;
  color: #06b6d4;
  background: transparent;
}

.btn-outline-info:hover {
  background: #06b6d4;
  color: white;
  border-color: #06b6d4;
}

/* Enhanced View Toggle Buttons */
#cardView, #tableView {
  transition: all 0.3s ease;
  border-radius: 12px;
  padding: 0.75rem 1rem;
  border: 2px solid rgba(102, 126, 234, 0.2);
  background: transparent;
  color: #667eea;
}

#cardView.active, #tableView.active {
  background: var(--primary-gradient);
  color: white;
  border-color: transparent;
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
  transform: translateY(-2px);
}

#cardView:hover, #tableView:hover {
  border-color: #667eea;
  transform: translateY(-1px);
}

/* Enhanced Empty State */
.empty-state {
  text-align: center;
  padding: 4rem 2rem;
  color: var(--text-secondary);
}

.empty-state i {
  font-size: 5rem;
  opacity: 0.2;
  margin-bottom: 2rem;
  background: var(--primary-gradient);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.empty-state h4 {
  color: var(--text-primary);
  margin-bottom: 1rem;
  font-weight: 700;
}

.empty-state p {
  font-size: 1.1rem;
  margin-bottom: 2rem;
}

/* Enhanced Form Controls */
.form-select, .form-control {
  border-radius: 12px;
  border: 2px solid rgba(102, 126, 234, 0.2);
  padding: 0.75rem 1rem;
  transition: all 0.3s ease;
  background: white;
}

.form-select:focus, .form-control:focus {
  border-color: #667eea;
  box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
}

/* CSS Variables */
:root {
  --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  --success-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
  --warning-gradient: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
  --danger-gradient: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
  --dark-gradient: linear-gradient(135deg, #2c3e50 0%, #3498db 100%);
  --text-primary: #2d3748;
  --text-secondary: #718096;
  --border-color: #e2e8f0;
}

/* Enhanced Search Styles */
.search-container {
  position: relative;
  z-index: 10;
}

/* Ensure parent containers don't clip the dropdown */
.card-body {
  overflow: visible !important;
}

.row {
  overflow: visible !important;
}

.search-input {
  padding-right: 2.5rem !important;
  border-radius: 25px !important;
  border: 2px solid rgba(102, 126, 234, 0.2) !important;
  transition: all 0.3s ease;
  background: white;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

.search-input:focus {
  border-color: #667eea !important;
  box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25), 0 8px 25px rgba(102, 126, 234, 0.15) !important;
  transform: translateY(-1px);
}

.search-icon {
  position: absolute;
  right: 1rem;
  top: 50%;
  transform: translateY(-50%);
  color: #667eea;
  pointer-events: none;
  z-index: 10;
}

.search-suggestions {
  position: fixed !important;
  background: white;
  border: 2px solid rgba(102, 126, 234, 0.3);
  border-radius: 15px;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15), 0 8px 25px rgba(102, 126, 234, 0.1);
  z-index: 9999 !important;
  max-height: 400px;
  overflow-y: auto;
  margin-top: 0.5rem;
  min-width: 300px;
  backdrop-filter: blur(10px);
}

.search-suggestion-item {
  padding: 1rem 1.5rem;
  border-bottom: 1px solid rgba(102, 126, 234, 0.1);
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: space-between;
  background: rgba(255, 255, 255, 0.95);
}

.search-suggestion-item:hover {
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
  transform: translateX(4px);
  border-left: 3px solid #667eea;
}

.search-suggestion-item.active {
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.15) 0%, rgba(118, 75, 162, 0.15) 100%);
  border-left: 3px solid #667eea;
}

.search-suggestion-item:last-child {
  border-bottom: none;
  border-radius: 0 0 15px 15px;
}

.search-suggestion-item:first-child {
  border-radius: 15px 15px 0 0;
}

.suggestion-main {
  display: flex;
  flex-direction: column;
  flex: 1;
}

.suggestion-label {
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 0.25rem;
}

.suggestion-meta {
  font-size: 0.875rem;
  color: var(--text-secondary);
  display: flex;
  align-items: center;
  gap: 1rem;
}

.suggestion-type {
  padding: 0.25rem 0.75rem;
  border-radius: 15px;
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.suggestion-type.customer {
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  color: white;
}

.suggestion-type.invoice {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
}

.search-loading {
  position: absolute;
  top: 100%;
  left: 0;
  right: 0;
  background: white;
  border: 1px solid rgba(102, 126, 234, 0.2);
  border-radius: 15px;
  box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
  z-index: 1000;
  padding: 1rem 1.5rem;
  margin-top: 0.5rem;
  text-align: center;
  color: var(--text-secondary);
  font-size: 0.875rem;
}

.search-no-results {
  padding: 2rem 1.5rem;
  text-align: center;
  color: var(--text-secondary);
  font-style: italic;
}

/* Search highlight */
.search-highlight {
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.2) 0%, rgba(118, 75, 162, 0.2) 100%);
  padding: 0.2rem 0.4rem;
  border-radius: 6px;
  font-weight: 600;
}

/* Live search results styling */
.live-search-active .invoice-row {
  transition: all 0.4s ease;
}

.live-search-active .invoice-row.search-match {
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
  border-left: 4px solid #667eea;
  transform: translateX(4px);
}

.live-search-active .invoice-row.search-no-match {
  opacity: 0.3;
  transform: scale(0.98);
}

/* Responsive Enhancements */
/* WhatsApp Modal Styles */
.message-preview-container {
  background: #f0f2f5;
  border-radius: 15px;
  padding: 1rem;
  max-height: 300px;
  overflow-y: auto;
}

.message-preview {
  background: #dcf8c6;
  border-radius: 18px;
  padding: 1rem;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  font-size: 14px;
  line-height: 1.4;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  position: relative;
  margin-left: auto;
  max-width: 85%;
}

.message-preview::after {
  content: '';
  position: absolute;
  bottom: 0;
  right: -8px;
  width: 0;
  height: 0;
  border: 8px solid transparent;
  border-top: 8px solid #dcf8c6;
  border-right: 0;
}

.message-header {
  font-weight: 600;
  margin-bottom: 0.5rem;
}

.message-body p {
  margin: 0.25rem 0;
}

.message-footer {
  margin-top: 0.5rem;
  font-style: italic;
}

.btn-outline-warning {
  border: 2px solid #25D366;
  color: #25D366;
  background: transparent;
}

.btn-outline-warning:hover {
  background: #25D366;
  color: white;
  border-color: #25D366;
}

.share-whatsapp-btn {
  transition: all 0.3s ease;
}

.share-whatsapp-btn:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(37, 211, 102, 0.3);
}

#customerPhoneNumber:focus {
  border-color: #25D366;
  box-shadow: 0 0 0 0.2rem rgba(37, 211, 102, 0.25);
}

@media (max-width: 768px) {
  .page-header {
    padding: 2rem 1.5rem;
    text-align: center;
  }
  
  .stats-card {
    margin-bottom: 1.5rem;
  }
  
  .invoice-row:hover {
    transform: translateX(4px);
  }
  
  .invoice-card:hover {
    transform: translateY(-5px);
  }
  
  .btn-group {
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .btn-group .btn {
    margin-right: 0;
    width: 100%;
  }
  
  .message-preview {
    max-width: 100%;
    margin-left: 0;
  }
}
</style>

<%= render 'shared/attractive_loader_styles' %>
<%= render 'shared/super_attractive_loader_styles' %>
<%= render 'shared/attractive_loader_js' %>
<%= render 'shared/super_attractive_loader_js' %>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const tableView = document.getElementById('tableView');
  const cardView = document.getElementById('cardView');
  const tableContent = document.getElementById('tableViewContent');
  const cardContent = document.getElementById('cardViewContent');

  // Create super attractive loader instance
  const superInvoiceSearchLoader = createSuperAttractiveLoader('superInvoiceSearchLoader');

  // Live Search Functionality
  const searchInput = document.getElementById('live-search-input');
  const searchSuggestions = document.getElementById('search-suggestions');
  const searchLoading = document.getElementById('search-loading');
  let searchTimeout;
  let currentSearchTerm = '';
  
  if (searchInput) {
    // Trigger on Enter key
    searchInput.addEventListener('keydown', function(e) {
      if (e.key === 'Enter') {
        e.preventDefault();
        const query = this.value.trim();
        currentSearchTerm = query;
        if (query.length === 0) {
          hideSuggestions();
          clearLiveSearch();
          return;
        }
        superInvoiceSearchLoader.show(1000, 2800);
        superInvoiceSearchLoader.simulateRealisticLoading([
          { percentage: 25, delay: 300 },
          { percentage: 55, delay: 500 },
          { percentage: 80, delay: 400 },
          { percentage: 95, delay: 200 }
        ]);
        fetchSuggestions(query);
        performLiveSearch(query);
        // Submit the filter form so server-side results update and URL reflects search
        this.closest('form').submit();
      }
    });

    // Click on search icon triggers search
    const icon = document.querySelector('.search-icon');
    if (icon) {
      icon.style.cursor = 'pointer';
      icon.addEventListener('click', function() {
        const query = searchInput.value.trim();
        currentSearchTerm = query;
        if (query.length === 0) {
          hideSuggestions();
          clearLiveSearch();
          return;
        }
        superInvoiceSearchLoader.show(1000, 2800);
        superInvoiceSearchLoader.simulateRealisticLoading([
          { percentage: 25, delay: 300 },
          { percentage: 55, delay: 500 },
          { percentage: 80, delay: 400 },
          { percentage: 95, delay: 200 }
        ]);
        fetchSuggestions(query);
        performLiveSearch(query);
        // Submit the filter form so server-side results update and URL reflects search
        searchInput.closest('form').submit();
      });
    }

    // Optional: fetch suggestions on focus without searching rows
    searchInput.addEventListener('focus', function() {
      const query = this.value.trim();
      if (query.length >= 1) {
        superInvoiceSearchLoader.show(1000, 2800);
        superInvoiceSearchLoader.simulateRealisticLoading([
          { percentage: 25, delay: 300 },
          { percentage: 55, delay: 500 },
          { percentage: 80, delay: 400 },
          { percentage: 95, delay: 200 }
        ]);
        fetchSuggestions(query);
      }
    });
    
    // Handle blur (with delay to allow clicking suggestions)
    searchInput.addEventListener('blur', function() {
      setTimeout(() => {
        hideSuggestions();
      }, 200);
    });
    
    // Handle keyboard navigation
    searchInput.addEventListener('keydown', function(e) {
      const suggestions = document.querySelectorAll('.search-suggestion-item');
      const activeSuggestion = document.querySelector('.search-suggestion-item.active');
      
      if (e.key === 'ArrowDown') {
        e.preventDefault();
        if (activeSuggestion) {
          activeSuggestion.classList.remove('active');
          const next = activeSuggestion.nextElementSibling;
          if (next) {
            next.classList.add('active');
          } else {
            suggestions[0]?.classList.add('active');
          }
        } else {
          suggestions[0]?.classList.add('active');
        }
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        if (activeSuggestion) {
          activeSuggestion.classList.remove('active');
          const prev = activeSuggestion.previousElementSibling;
          if (prev) {
            prev.classList.add('active');
          } else {
            suggestions[suggestions.length - 1]?.classList.add('active');
          }
        } else {
          suggestions[suggestions.length - 1]?.classList.add('active');
        }
      } else if (e.key === 'Enter') {
        e.preventDefault();
        if (activeSuggestion) {
          activeSuggestion.click();
        } else {
          // Submit the form
          this.closest('form').submit();
        }
      } else if (e.key === 'Escape') {
        hideSuggestions();
        this.blur();
      }
    });
  }
  
  function fetchSuggestions(query) {
    fetch(`/invoices/search_suggestions?q=${encodeURIComponent(query)}`)
      .then(response => response.json())
      .then(data => {
        superInvoiceSearchLoader.hide();
        displaySuggestions(data.suggestions);
      })
      .catch(error => {
        console.error('Search error:', error);
        superInvoiceSearchLoader.hide();
      });
  }
  
  function displaySuggestions(suggestions) {
    // Position the dropdown relative to the search input
    const inputRect = searchInput.getBoundingClientRect();
    searchSuggestions.style.top = (inputRect.bottom + window.scrollY + 8) + 'px';
    searchSuggestions.style.left = inputRect.left + 'px';
    searchSuggestions.style.width = inputRect.width + 'px';
    
    if (suggestions.length === 0) {
      searchSuggestions.innerHTML = '<div class="search-no-results">No results found</div>';
      searchSuggestions.style.display = 'block';
      return;
    }
    
    const html = suggestions.map(suggestion => {
      const highlightedLabel = highlightSearchTerm(suggestion.label, currentSearchTerm);
      
      if (suggestion.type === 'customer') {
        return `
          <div class="search-suggestion-item" data-type="customer" data-value="${suggestion.value}" data-id="${suggestion.id}">
            <div class="suggestion-main">
              <div class="suggestion-label">${highlightedLabel}</div>
              <div class="suggestion-meta">
                ${suggestion.phone ? `<span><i class="fas fa-phone me-1"></i>${suggestion.phone}</span>` : ''}
              </div>
            </div>
            <div class="suggestion-type customer">Customer</div>
          </div>
        `;
      } else {
        return `
          <div class="search-suggestion-item" data-type="invoice" data-value="${suggestion.value}" data-id="${suggestion.id}">
            <div class="suggestion-main">
              <div class="suggestion-label">${highlightedLabel}</div>
              <div class="suggestion-meta">
                <span><i class="fas fa-user me-1"></i>${suggestion.customer_name}</span>
                <span><i class="fas fa-rupee-sign me-1"></i>${Number(suggestion.amount).toLocaleString()}</span>
              </div>
            </div>
            <div class="suggestion-type invoice">Invoice</div>
          </div>
        `;
      }
    }).join('');
    
    searchSuggestions.innerHTML = html;
    searchSuggestions.style.display = 'block';
    
    // Add click handlers
    document.querySelectorAll('.search-suggestion-item').forEach(item => {
      item.addEventListener('click', function() {
        const value = this.dataset.value;
        const type = this.dataset.type;
        
        searchInput.value = value;
        hideSuggestions();
        
        if (type === 'invoice') {
          // Navigate to the specific invoice
          const invoiceId = this.dataset.id;
          window.location.href = `/invoices/${invoiceId}`;
        } else {
          // Filter by customer
          performLiveSearch(value);
          // Update the form and submit
          searchInput.closest('form').submit();
        }
      });
      
      item.addEventListener('mouseenter', function() {
        document.querySelectorAll('.search-suggestion-item.active').forEach(active => {
          active.classList.remove('active');
        });
        this.classList.add('active');
      });
    });
  }
  
  function performLiveSearch(query) {
    const rows = document.querySelectorAll('.invoice-row');
    const tableBody = document.querySelector('tbody');
    
    if (!tableBody) return;
    
    tableBody.classList.add('live-search-active');
    
    rows.forEach(row => {
      const invoiceNumber = row.querySelector('td:first-child .text-primary')?.textContent?.toLowerCase() || '';
      const customerName = row.querySelector('.customer-info strong')?.textContent?.toLowerCase() || '';
      const customerPhone = row.querySelector('.customer-info .text-muted')?.textContent?.toLowerCase() || '';
      
      const digitsOnly = (s) => s.replace(/\D/g, '');
      const searchTerm = query.toLowerCase();
      const searchDigits = digitsOnly(searchTerm);
      
      const matches = invoiceNumber.includes(searchTerm) || 
                     customerName.includes(searchTerm) || 
                     customerPhone.includes(searchTerm) ||
                     (searchDigits.length >= 3 && digitsOnly(customerPhone).includes(searchDigits));
      
      if (matches) {
        row.classList.add('search-match');
        row.classList.remove('search-no-match');
      } else {
        row.classList.add('search-no-match');
        row.classList.remove('search-match');
      }
    });
  }
  
  function clearLiveSearch() {
    const rows = document.querySelectorAll('.invoice-row');
    const tableBody = document.querySelector('tbody');
    
    if (tableBody) {
      tableBody.classList.remove('live-search-active');
    }
    
    rows.forEach(row => {
      row.classList.remove('search-match', 'search-no-match');
    });
  }
  
  function highlightSearchTerm(text, term) {
    if (!term) return text;
    
    const regex = new RegExp(`(${term})`, 'gi');
    return text.replace(regex, '<span class="search-highlight">$1</span>');
  }
  
  function showLoading() {
    // Position the loading indicator
    const inputRect = searchInput.getBoundingClientRect();
    searchLoading.style.position = 'fixed';
    searchLoading.style.top = (inputRect.bottom + window.scrollY + 8) + 'px';
    searchLoading.style.left = inputRect.left + 'px';
    searchLoading.style.width = inputRect.width + 'px';
    searchLoading.style.zIndex = '9999';
    searchLoading.style.background = 'white';
    searchLoading.style.border = '2px solid rgba(102, 126, 234, 0.3)';
    searchLoading.style.borderRadius = '15px';
    searchLoading.style.padding = '1rem 1.5rem';
    searchLoading.style.boxShadow = '0 20px 60px rgba(0, 0, 0, 0.15)';
    
    searchLoading.style.display = 'block';
    searchSuggestions.style.display = 'none';
  }
  
  function hideLoading() {
    searchLoading.style.display = 'none';
  }
  
  function hideSuggestions() {
    searchSuggestions.style.display = 'none';
    searchLoading.style.display = 'none';
  }
  
  function positionDropdown() {
    if (searchSuggestions.style.display === 'block') {
      const inputRect = searchInput.getBoundingClientRect();
      searchSuggestions.style.top = (inputRect.bottom + window.scrollY + 8) + 'px';
      searchSuggestions.style.left = inputRect.left + 'px';
      searchSuggestions.style.width = inputRect.width + 'px';
    }
  }
  
  // Reposition dropdown on scroll and resize
  window.addEventListener('scroll', positionDropdown);
  window.addEventListener('resize', positionDropdown);
  
  // Debug function to check dropdown visibility
  window.debugDropdown = function() {
    console.log('Search Input:', searchInput);
    console.log('Search Suggestions:', searchSuggestions);
    console.log('Search Loading:', searchLoading);
    console.log('Suggestions Display:', searchSuggestions.style.display);
    console.log('Suggestions Position:', {
      top: searchSuggestions.style.top,
      left: searchSuggestions.style.left,
      width: searchSuggestions.style.width,
      zIndex: searchSuggestions.style.zIndex
    });
  };
  
  if (tableView && cardView) {
    tableView.addEventListener('click', function() {
      tableView.classList.add('active');
      cardView.classList.remove('active');
      tableContent.classList.remove('d-none');
      cardContent.classList.add('d-none');
    });
    
    cardView.addEventListener('click', function() {
      cardView.classList.add('active');
      tableView.classList.remove('active');
      cardContent.classList.remove('d-none');
      tableContent.classList.add('d-none');
    });
  }
  
  // WhatsApp Modal Functionality
  let currentInvoiceId = null;
  
  // Handle WhatsApp share button clicks
  document.querySelectorAll('.share-whatsapp-btn').forEach(function(btn) {
    btn.addEventListener('click', function() {
      currentInvoiceId = this.dataset.invoiceId;
      const invoiceNumber = this.dataset.invoiceNumber;
      const customerName = this.dataset.customerName;
      const customerPhone = this.dataset.customerPhone;
      const amount = this.dataset.amount;
      
      // Update modal content
      document.getElementById('previewInvoiceNumber').textContent = invoiceNumber;
      document.getElementById('previewAmount').textContent = parseFloat(amount).toLocaleString();
      
      // Pre-fill phone number if available
      const phoneInput = document.getElementById('customerPhoneNumber');
      if (customerPhone && customerPhone !== 'null' && customerPhone !== '') {
        phoneInput.value = customerPhone.startsWith('+') ? customerPhone : '+91' + customerPhone;
      } else {
        phoneInput.value = '';
      }
      
      // Update current date
      const today = new Date();
      const dateString = today.toLocaleDateString('en-GB', { 
        day: 'numeric', 
        month: 'long', 
        year: 'numeric' 
      });
      document.getElementById('previewDate').textContent = dateString;
      
      // Reset send button
      const sendBtn = document.getElementById('sendWhatsAppBtn');
      sendBtn.disabled = phoneInput.value.length < 10;
      sendBtn.innerHTML = '<i class="fab fa-whatsapp me-2"></i>Send via WhatsApp';
    });
  });
  
  // Handle phone number input validation
  const phoneInput = document.getElementById('customerPhoneNumber');
  const sendBtn = document.getElementById('sendWhatsAppBtn');
  
  if (phoneInput && sendBtn) {
    phoneInput.addEventListener('input', function() {
      const phone = this.value.trim();
      const isValid = phone.length >= 10 && /^\+?[\d\s\-\(\)]+$/.test(phone);
      sendBtn.disabled = !isValid;
      
      if (isValid) {
        this.classList.remove('is-invalid');
        this.classList.add('is-valid');
      } else if (phone.length > 0) {
        this.classList.remove('is-valid');
        this.classList.add('is-invalid');
      } else {
        this.classList.remove('is-valid', 'is-invalid');
      }
    });
    
    // Handle send WhatsApp button click
    sendBtn.addEventListener('click', function() {
      if (!currentInvoiceId) {
        alert('Please select an invoice first');
        return;
      }
      
      const phoneNumber = phoneInput.value.trim();
      if (!phoneNumber) {
        alert('Please enter a phone number');
        return;
      }
      
      // Disable button and show loading state
      this.disabled = true;
      this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Generating link...';
      
      // Make AJAX request to share_whatsapp endpoint
      fetch(`/invoices/${currentInvoiceId}/share_whatsapp`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({
          phone_number: phoneNumber
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Open WhatsApp with the generated link
          window.open(data.whatsapp_url, '_blank');
          
          // Close modal
          const modal = bootstrap.Modal.getInstance(document.getElementById('shareWhatsAppModal'));
          modal.hide();
          
          // Show success message
          showNotification('WhatsApp link generated successfully!', 'success');
        } else {
          alert('Error: ' + (data.error || 'Failed to generate WhatsApp link'));
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Network error. Please try again.');
      })
      .finally(() => {
        // Reset button state
        this.disabled = false;
        this.innerHTML = '<i class="fab fa-whatsapp me-2"></i>Send via WhatsApp';
      });
    });
  }
  
  // Utility function to show notifications
  function showNotification(message, type = 'info') {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
    notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    notification.innerHTML = `
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    document.body.appendChild(notification);
    
    // Auto-remove after 5 seconds
    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove();
      }
    }, 5000);
  }

  // Bulk WhatsApp Functionality
  const selectAllCheckbox = document.getElementById('selectAll');
  const invoiceCheckboxes = document.querySelectorAll('.invoice-checkbox');
  const bulkWhatsAppBtn = document.getElementById('bulkWhatsAppBtn');
  const selectedCountSpan = document.getElementById('selectedCount');

  // Handle select all checkbox
  if (selectAllCheckbox) {
    selectAllCheckbox.addEventListener('change', function() {
      const isChecked = this.checked;
      invoiceCheckboxes.forEach(checkbox => {
        checkbox.checked = isChecked;
      });
      updateBulkButton();
    });
  }

  // Handle individual checkboxes
  invoiceCheckboxes.forEach(checkbox => {
    checkbox.addEventListener('change', function() {
      updateSelectAllState();
      updateBulkButton();
    });
  });

  // Update select all state based on individual checkboxes
  function updateSelectAllState() {
    if (!selectAllCheckbox) return;
    
    const totalCheckboxes = invoiceCheckboxes.length;
    const checkedCheckboxes = document.querySelectorAll('.invoice-checkbox:checked').length;
    
    selectAllCheckbox.indeterminate = checkedCheckboxes > 0 && checkedCheckboxes < totalCheckboxes;
    selectAllCheckbox.checked = checkedCheckboxes === totalCheckboxes;
  }

  // Update bulk button visibility and count
  function updateBulkButton() {
    const checkedCheckboxes = document.querySelectorAll('.invoice-checkbox:checked');
    const count = checkedCheckboxes.length;
    
    if (count > 0) {
      bulkWhatsAppBtn.style.display = 'inline-block';
      selectedCountSpan.textContent = count;
    } else {
      bulkWhatsAppBtn.style.display = 'none';
    }
  }

  // Handle bulk WhatsApp send
  if (bulkWhatsAppBtn) {
    bulkWhatsAppBtn.addEventListener('click', function() {
      const checkedCheckboxes = document.querySelectorAll('.invoice-checkbox:checked');
      
      if (checkedCheckboxes.length === 0) {
        showNotification('Please select at least one invoice', 'warning');
        return;
      }
      
      // Debug information
      console.log('🚀 BULK WHATSAPP CLICKED - Selected invoices:', checkedCheckboxes.length);
      console.log('📋 Invoice details:');
      checkedCheckboxes.forEach((cb, index) => {
        console.log(`  ${index + 1}. ID: ${cb.dataset.invoiceId}, Customer: ${cb.dataset.customerName}, Phone: ${cb.dataset.customerPhone}`);
      });
      
      // Check if we're in a secure context
      console.log('🔒 Secure context:', window.isSecureContext);
      console.log('🌐 User agent:', navigator.userAgent.substring(0, 100));

      if (checkedCheckboxes.length > 10) {
        showNotification('Please select maximum 10 invoices at a time for optimal performance', 'warning');
        return;
      }

      // Get selected invoice IDs
      const invoiceIds = Array.from(checkedCheckboxes).map(cb => cb.dataset.invoiceId);
      
      // Show loading state
      this.disabled = true;
      this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Generating links...';

      // Show immediate feedback
      showNotification(`Preparing to open ${checkedCheckboxes.length} WhatsApp tabs...`, 'info');

      // Make AJAX request to bulk share endpoint
      fetch('/invoices/bulk_share_whatsapp', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({
          invoice_ids: invoiceIds
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          console.log('Received WhatsApp URLs:', data.whatsapp_urls.length);
          
          // CRITICAL: Open all tabs IMMEDIATELY without any delays
          // This must happen synchronously in the same user interaction context
          let successCount = 0;
          const openedTabs = [];
          
          // Method 1: Try window.open for all tabs immediately
          data.whatsapp_urls.forEach((item, index) => {
            try {
              const targetName = `whatsapp_${item.invoice_id}_${index}_${Math.random().toString(36).substr(2, 9)}`;
              console.log(`Attempting window.open for tab ${index + 1}/${data.whatsapp_urls.length}: ${item.customer_name}`);
              
              const newTab = window.open(item.whatsapp_url, targetName);
              
              if (newTab && !newTab.closed) {
                successCount++;
                openedTabs.push(newTab);
                console.log(`✅ Tab ${index + 1} opened via window.open: ${item.customer_name}`);
              } else {
                console.log(`❌ Tab ${index + 1} blocked via window.open, trying anchor method: ${item.customer_name}`);
                
                // Fallback: Create and click anchor tags
                const link = document.createElement('a');
                link.href = item.whatsapp_url;
                link.target = targetName;
                link.rel = 'noopener noreferrer';
                link.style.display = 'none';
                document.body.appendChild(link);
                
                // Trigger click immediately
                link.click();
                
                // Clean up
                setTimeout(() => document.body.removeChild(link), 100);
                
                // Assume it worked for now (hard to detect with anchor method)
                successCount++;
                console.log(`🔗 Tab ${index + 1} attempted via anchor click: ${item.customer_name}`);
              }
            } catch (e) {
              console.error(`Error opening tab ${index + 1} (${item.customer_name}):`, e);
            }
          });
          
          // Immediate feedback
          if (successCount === data.whatsapp_urls.length) {
            showNotification(`🎉 Perfect! All ${successCount} WhatsApp tabs opened successfully!`, 'success');
          } else if (successCount > 0) {
            showNotification(`⚠️ Opened ${successCount} out of ${data.whatsapp_urls.length} tabs. ${data.whatsapp_urls.length - successCount} were blocked by popup blocker.`, 'warning');
            
            // Show help for remaining tabs
            setTimeout(() => {
              showNotification(`💡 To open all tabs: Click the popup blocker icon in your address bar and select "Always allow popups on this site"`, 'info');
            }, 2000);
          } else {
            showNotification(`❌ All tabs were blocked. Please allow popups for this site and try again.`, 'danger');
            
            // Show detailed help
            setTimeout(() => {
              showNotification(`🔧 Fix: Click the popup blocker icon (🚫) in your browser's address bar → "Always allow popups on this site" → Try again`, 'info');
            }, 3000);
          }
          
          // Uncheck all checkboxes
          document.querySelectorAll('.invoice-checkbox:checked').forEach(cb => cb.checked = false);
          updateBulkButton();
          updateSelectAllState();
        } else {
          showNotification(data.error || 'Failed to generate WhatsApp links', 'danger');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showNotification('An error occurred while generating WhatsApp links', 'danger');
      })
      .finally(() => {
        // Reset button state
        this.disabled = false;
        this.innerHTML = '<i class="fab fa-whatsapp me-2"></i>Send Bulk WhatsApp (<span id="selectedCount">0</span>)';
      });
    });
  }

  // Note: All tabs now open automatically on bulk WhatsApp button click
  // No individual confirmations needed - tabs open with 200ms delays

  // Generate & Send WhatsApp Invoice Modal Functionality
  const whatsappCustomerSelect = document.getElementById('whatsappCustomerSelect');
  const whatsappMonthSelect = document.getElementById('whatsappMonthSelect');
  const whatsappYearSelect = document.getElementById('whatsappYearSelect');
  const whatsappPhoneNumber = document.getElementById('whatsappPhoneNumber');
  const previewInvoiceBtn = document.getElementById('previewInvoiceBtn');
  const generateAndSendBtn = document.getElementById('generateAndSendBtn');
  const invoicePreviewSection = document.getElementById('invoicePreviewSection');
  const invoicePreviewContent = document.getElementById('invoicePreviewContent');

  // Update phone number when customer is selected
  if (whatsappCustomerSelect) {
    whatsappCustomerSelect.addEventListener('change', function() {
      const selectedOption = this.options[this.selectedIndex];
      const phone = selectedOption.dataset.phone || selectedOption.dataset.altPhone;

      if (phone && phone !== 'null' && phone !== '') {
        whatsappPhoneNumber.value = phone.startsWith('+') ? phone : '+91' + phone;
      } else {
        whatsappPhoneNumber.value = '';
      }

      updateWhatsAppButtons();
    });
  }

  // Update buttons when any field changes
  [whatsappCustomerSelect, whatsappMonthSelect, whatsappYearSelect, whatsappPhoneNumber].forEach(element => {
    if (element) {
      element.addEventListener('change', updateWhatsAppButtons);
      element.addEventListener('input', updateWhatsAppButtons);
    }
  });

  function updateWhatsAppButtons() {
    const customer = whatsappCustomerSelect?.value;
    const month = whatsappMonthSelect?.value;
    const year = whatsappYearSelect?.value;
    const phone = whatsappPhoneNumber?.value?.trim();

    const isValid = customer && month && year && phone && phone.length >= 10;

    if (previewInvoiceBtn) previewInvoiceBtn.disabled = !isValid;
    if (generateAndSendBtn) generateAndSendBtn.disabled = !isValid;
  }

  // Preview Invoice functionality
  if (previewInvoiceBtn) {
    previewInvoiceBtn.addEventListener('click', function() {
      const customer = whatsappCustomerSelect.value;
      const month = whatsappMonthSelect.value;
      const year = whatsappYearSelect.value;

      if (!customer || !month || !year) {
        alert('Please select customer, month, and year');
        return;
      }

      this.disabled = true;
      this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Loading Preview...';

      // Make AJAX call to get invoice preview
      fetch(`/invoices/monthly_preview?customer_id=${customer}&month=${month}&year=${year}`)
        .then(response => response.text())
        .then(html => {
          invoicePreviewContent.innerHTML = html;
          invoicePreviewSection.style.display = 'block';
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Failed to load preview');
        })
        .finally(() => {
          this.disabled = false;
          this.innerHTML = '<i class="fas fa-eye me-2"></i>Preview Invoice';
        });
    });
  }

  // Generate and Send functionality
  if (generateAndSendBtn) {
    generateAndSendBtn.addEventListener('click', function() {
      const customer = whatsappCustomerSelect.value;
      const month = whatsappMonthSelect.value;
      const year = whatsappYearSelect.value;
      const phone = whatsappPhoneNumber.value.trim();

      if (!customer || !month || !year || !phone) {
        alert('Please fill in all required fields');
        return;
      }

      this.disabled = true;
      this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Generating & Sending...';

      // Make AJAX call to generate invoice and send via WhatsApp
      fetch('/invoices/generate_and_send_whatsapp', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({
          customer_id: customer,
          month: month,
          year: year,
          phone_number: phone
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Close modal
          closeWhatsAppInvoiceModal();

          // Open WhatsApp
          window.open(data.whatsapp_url, '_blank');

          // Show success message
          showNotification('Invoice generated and WhatsApp link created successfully!', 'success');

          // Refresh page to show new invoice
          setTimeout(() => window.location.reload(), 2000);
        } else {
          alert('Error: ' + (data.error || 'Failed to generate invoice and send WhatsApp'));
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Network error. Please try again.');
      })
      .finally(() => {
        this.disabled = false;
        this.innerHTML = '<i class="fab fa-whatsapp me-2"></i>Generate & Send via WhatsApp';
      });
    });
  }

  // Custom modal functions for Generate Monthly Modal
  window.openGenerateMonthlyModal = function() {
    console.log('🔓 Opening Generate Monthly modal');
    const modal = document.getElementById('generateMonthlyModal');
    if (modal) {
      modal.style.display = 'flex';
      document.body.classList.add('modal-open');
      document.body.style.overflow = 'hidden';

      // Focus on the first interactive element
      setTimeout(() => {
        const firstInput = modal.querySelector('select, input, button');
        if (firstInput) {
          firstInput.focus();
        }
      }, 100);
    } else {
      console.error('❌ Generate Monthly modal element not found');
    }
  };

  window.closeGenerateMonthlyModal = function() {
    console.log('🔒 Closing Generate Monthly modal');
    const modal = document.getElementById('generateMonthlyModal');
    if (modal) {
      modal.style.display = 'none';
      document.body.classList.remove('modal-open');
      document.body.style.overflow = '';
    }
  };

  // WhatsApp Modal functions
  window.openWhatsAppInvoiceModal = function() {
    console.log('🔓 Opening WhatsApp Invoice modal');
    const modal = document.getElementById('generateWhatsAppInvoiceModal');
    if (modal) {
      modal.style.display = 'flex';
      document.body.classList.add('modal-open');
      document.body.style.overflow = 'hidden';

      // Focus on the first interactive element
      setTimeout(() => {
        const firstInput = modal.querySelector('select, input, button');
        if (firstInput) {
          firstInput.focus();
        }
      }, 100);
    } else {
      console.error('❌ WhatsApp Invoice modal element not found');
    }
  };

  window.closeWhatsAppInvoiceModal = function() {
    console.log('🔒 Closing WhatsApp Invoice modal');
    const modal = document.getElementById('generateWhatsAppInvoiceModal');
    if (modal) {
      modal.style.display = 'none';
      document.body.classList.remove('modal-open');
      document.body.style.overflow = '';
    }
  };
});
</script>

<!-- Generate & Send WhatsApp Invoice Modal -->
<div id="generateWhatsAppInvoiceModal" class="custom-modal" style="display: none;">
  <div class="custom-modal-backdrop" onclick="closeWhatsAppInvoiceModal()"></div>
  <div class="custom-modal-content">
    <div class="custom-modal-header">
      <h5 class="custom-modal-title">
        <i class="fab fa-whatsapp me-2"></i>Generate & Send Invoice via WhatsApp
      </h5>
      <button type="button" class="custom-close-btn" onclick="closeWhatsAppInvoiceModal()">×</button>
    </div>
    <div class="custom-modal-body">
        <div class="row g-3">
          <div class="col-md-6">
            <label for="whatsappCustomerSelect" class="form-label">
              <i class="fas fa-user me-1"></i>Select Customer
            </label>
            <select class="form-select" id="whatsappCustomerSelect" required>
              <option value="">Choose a customer...</option>
              <% @customers.each do |customer| %>
                <option value="<%= customer.id %>" data-phone="<%= customer.phone_number %>" data-alt-phone="<%= customer.alt_phone_number %>">
                  <%= customer.name %>
                </option>
              <% end %>
            </select>
          </div>

          <div class="col-md-6">
            <label for="whatsappMonthSelect" class="form-label">
              <i class="fas fa-calendar me-1"></i>Select Month
            </label>
            <select class="form-select" id="whatsappMonthSelect" required>
              <% (1..12).each do |month| %>
                <option value="<%= month %>" <%= 'selected' if month == Date.current.month %>>
                  <%= Date::MONTHNAMES[month] %>
                </option>
              <% end %>
            </select>
          </div>

          <div class="col-md-6">
            <label for="whatsappYearSelect" class="form-label">
              <i class="fas fa-calendar-alt me-1"></i>Select Year
            </label>
            <select class="form-select" id="whatsappYearSelect" required>
              <% (2020..Date.current.year + 1).to_a.reverse.each do |year| %>
                <option value="<%= year %>" <%= 'selected' if year == Date.current.year %>>
                  <%= year %>
                </option>
              <% end %>
            </select>
          </div>

          <div class="col-md-6">
            <label for="whatsappPhoneNumber" class="form-label">
              <i class="fas fa-phone me-1"></i>Phone Number
            </label>
            <input type="text"
                   class="form-control"
                   id="whatsappPhoneNumber"
                   placeholder="Enter phone number (e.g., +919876543210)"
                   maxlength="15">
            <div class="form-text">Phone number with country code (automatically filled from customer data)</div>
          </div>

          <div class="col-12">
            <div class="alert alert-info">
              <i class="fas fa-info-circle me-2"></i>
              <strong>How it works:</strong> We'll generate an invoice for the selected customer and month, then create a WhatsApp message with the invoice link. The invoice will be automatically generated if it doesn't exist.
            </div>
          </div>

          <!-- Preview section (initially hidden) -->
          <div class="col-12" id="invoicePreviewSection" style="display: none;">
            <div class="card">
              <div class="card-header">
                <h6 class="mb-0"><i class="fas fa-eye me-2"></i>Invoice Preview</h6>
              </div>
              <div class="card-body">
                <div id="invoicePreviewContent">
                  <!-- Preview content will be loaded here -->
                </div>
              </div>
            </div>
          </div>
        </div>
    </div>
    <div class="custom-modal-footer">
      <button type="button" class="btn btn-secondary" onclick="closeWhatsAppInvoiceModal()">Cancel</button>
      <button type="button" class="btn btn-info me-2" id="previewInvoiceBtn" disabled>
        <i class="fas fa-eye me-2"></i>Preview Invoice
      </button>
      <button type="button" class="btn btn-success" id="generateAndSendBtn" disabled>
        <i class="fab fa-whatsapp me-2"></i>Generate & Send via WhatsApp
      </button>
    </div>
  </div>
</div>

<!-- Generate Monthly for All Custom Modal -->
<div id="generateMonthlyModal" class="custom-modal" style="display: none;">
  <div class="custom-modal-backdrop" onclick="closeGenerateMonthlyModal()"></div>
  <div class="custom-modal-content">
    <div class="custom-modal-header">
      <h5 class="custom-modal-title">
        <i class="fas fa-calendar me-2"></i>Generate Monthly Invoices
      </h5>
      <button type="button" class="custom-close-btn" onclick="closeGenerateMonthlyModal()">×</button>
    </div>
    <%= form_with url: generate_monthly_for_all_invoices_path, method: :post, local: true, id: 'generate-monthly-form' do |form| %>
      <div class="custom-modal-body">
        <div class="row g-3">
          <div class="col-md-6">
            <%= form.label :month, 'Month', class: 'form-label' %>
            <%= form.select :month,
                  options_for_select((1..12).map { |m| [Date::MONTHNAMES[m], m] }, Date.current.month),
                  {},
                  { class: 'form-select', required: true, id: 'modal-month-select' } %>
          </div>

          <div class="col-md-6">
            <%= form.label :year, 'Year', class: 'form-label' %>
            <%= form.select :year,
                  options_for_select((2020..Date.current.year + 1).to_a.reverse.map { |y| [y, y] }, Date.current.year),
                  {},
                  { class: 'form-select', required: true, id: 'modal-year-select' } %>
          </div>
        </div>

        <div class="row g-3 mt-2">
          <div class="col-md-6">
            <%= form.label :delivery_person_id, 'Delivery Person', class: 'form-label' %>
            <div class="position-relative">
              <%= form.select :delivery_person_id,
                    options_for_select([['All Delivery Persons', 'all']] + User.delivery_people.map { |dp| [dp.name, dp.id] }),
                    {},
                    {
                      class: 'form-select delivery-person-select',
                      id: 'modal-delivery-person-select',
                      data: {
                        search: 'true',
                        placeholder: 'Search delivery persons...'
                      }
                    } %>
            </div>
          </div>

          <div class="col-md-6">
            <%= form.label :customer_ids, 'Customers', class: 'form-label' %>
            <div class="position-relative">
              <select name="customer_ids[]" multiple class="form-select customer-select" id="modal-customer-select"
                      data-search="true" data-placeholder="Search customers..." style="height: 120px;">
                <option value="all" selected>All Customers</option>
                <% Customer.includes(:delivery_person).order(:name).each do |customer| %>
                  <option value="<%= customer.id %>" data-delivery-person="<%= customer.delivery_person_id %>">
                    <%= customer.name %> (<%= customer.delivery_person&.name || 'No Delivery Person' %>)
                  </option>
                <% end %>
              </select>
            </div>
            <small class="text-muted">Hold Ctrl/Cmd to select multiple customers</small>
          </div>
        </div>

        <div class="alert alert-info mt-3">
          <i class="fas fa-info-circle me-2"></i>
          This will generate invoices for the selected customers with completed deliveries for the selected month and year, and send WhatsApp notifications.
        </div>
      </div>
      <div class="custom-modal-footer">
        <button type="button" class="btn btn-secondary" onclick="closeGenerateMonthlyModal()">Cancel</button>
        <%= form.submit 'Generate Invoices',
              class: 'btn btn-primary',
              id: 'modal-generate-btn',
              data: {
                confirm: 'Are you sure you want to generate invoices for the selected criteria?',
                disable_with: 'Generating...'
              } %>
      </div>
    <% end %>
  </div>
</div>

<style>
  /* Custom Modal Styles for Generate Monthly Modal */
  #generateMonthlyModal.custom-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 10000;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 80px 0 20px 280px; /* Top padding for nav bar, left padding for sidebar */
  }

  #generateMonthlyModal .custom-modal-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    cursor: pointer;
  }

  #generateMonthlyModal .custom-modal-content {
    position: relative;
    background-color: white;
    border-radius: 10px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    width: 100%;
    max-width: 800px;
    max-height: 85%;
    overflow: hidden;
    z-index: 10001;
    animation: modalFadeIn 0.3s ease-out;
    margin: 0 20px;
  }

  #generateMonthlyModal .custom-modal-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 1rem 1.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-radius: 10px 10px 0 0;
  }

  #generateMonthlyModal .custom-modal-title {
    margin: 0;
    font-size: 1.2rem;
    font-weight: 600;
  }

  #generateMonthlyModal .custom-close-btn {
    background: none;
    border: none;
    color: white;
    font-size: 2rem;
    line-height: 1;
    padding: 0.25rem 0.5rem;
    border-radius: 6px;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  #generateMonthlyModal .custom-close-btn:hover {
    background-color: rgba(255, 255, 255, 0.2);
  }

  #generateMonthlyModal .custom-modal-body {
    padding: 1.5rem;
    max-height: 70vh;
    overflow-y: auto;
  }

  #generateMonthlyModal .custom-modal-footer {
    padding: 1rem 1.5rem;
    border-top: 1px solid #e9ecef;
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
    background-color: #f8f9fa;
    border-radius: 0 0 10px 10px;
  }

  /* Responsive adjustments */
  @media (max-width: 1200px) {
    #generateMonthlyModal.custom-modal {
      padding: 60px 0 20px 200px;
    }
  }

  @media (max-width: 992px) {
    #generateMonthlyModal.custom-modal {
      padding: 60px 20px 20px 20px;
    }

    #generateMonthlyModal .custom-modal-content {
      max-width: 95%;
    }
  }

  @media (max-width: 768px) {
    #generateMonthlyModal.custom-modal {
      padding: 80px 10px 20px 10px;
    }

    #generateMonthlyModal .custom-modal-content {
      max-width: 98%;
      margin: 0 10px;
    }
  }

  @keyframes modalFadeIn {
    from {
      opacity: 0;
      transform: scale(0.9);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  .customer-select {
    min-height: 120px;
    max-height: 200px;
    overflow-y: auto;
  }
  
  .customer-select option {
    padding: 8px 12px;
    border-bottom: 1px solid #f0f0f0;
  }
  
  .customer-select option:hover {
    background-color: #f8f9fa;
  }
  
  .customer-select option:checked {
    background-color: #0d6efd;
    color: white;
  }
  
  /* Search input styling */
  #delivery-person-search,
  #customer-search {
    border-radius: 6px;
    border: 1px solid #ced4da;
    font-size: 0.9rem;
  }
  
  #delivery-person-search:focus,
  #customer-search:focus {
    border-color: #86b7fe;
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
  }
  
  /* Dropdown styling improvements */
  .delivery-person-select,
  .customer-select {
    border-radius: 6px;
  }
  
  /* Hide options that don't match search */
  .delivery-person-select option[style*="display: none"],
  .customer-select option[style*="display: none"] {
    display: none !important;
  }
  
  /* Modal body spacing */
  #generateMonthlyModal .modal-body .row + .row {
    margin-top: 1rem;
  }
  
  /* Alert styling */
  #generateMonthlyModal .alert-info {
    background-color: #e7f3ff;
    border-color: #b8daff;
    color: #004085;
  }

  /* Custom Modal Styles for WhatsApp Invoice Modal */
  #generateWhatsAppInvoiceModal.custom-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 10000;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 80px 0 20px 280px; /* Top padding for nav bar, left padding for sidebar */
  }

  #generateWhatsAppInvoiceModal .custom-modal-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    cursor: pointer;
  }

  #generateWhatsAppInvoiceModal .custom-modal-content {
    position: relative;
    background-color: white;
    border-radius: 20px;
    box-shadow: 0 20px 60px rgba(37, 211, 102, 0.15);
    width: 100%;
    max-width: 800px;
    max-height: 85%;
    overflow: hidden;
    z-index: 10001;
    animation: modalFadeIn 0.3s ease-out;
    margin: 0 20px;
  }

  #generateWhatsAppInvoiceModal .custom-modal-header {
    background: linear-gradient(135deg, #25D366 0%, #128C7E 100%);
    color: white;
    padding: 1.5rem 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-radius: 20px 20px 0 0;
  }

  #generateWhatsAppInvoiceModal .custom-modal-title {
    margin: 0;
    font-weight: 600;
    font-size: 1.25rem;
  }

  #generateWhatsAppInvoiceModal .custom-close-btn {
    background: none;
    border: none;
    color: white;
    font-size: 1.5rem;
    font-weight: bold;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 15px;
    transition: all 0.3s ease;
  }

  #generateWhatsAppInvoiceModal .custom-close-btn:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: scale(1.1);
  }

  #generateWhatsAppInvoiceModal .custom-modal-body {
    padding: 2rem;
    max-height: 60vh;
    overflow-y: auto;
  }

  #generateWhatsAppInvoiceModal .custom-modal-footer {
    padding: 1.5rem 2rem;
    border-top: 1px solid rgba(37, 211, 102, 0.1);
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    background: #f8f9fa;
    border-radius: 0 0 20px 20px;
  }

  #generateWhatsAppInvoiceModal .form-select,
  #generateWhatsAppInvoiceModal .form-control {
    border-radius: 12px;
    border: 2px solid rgba(37, 211, 102, 0.2);
    transition: all 0.3s ease;
    padding: 0.75rem 1rem;
  }

  #generateWhatsAppInvoiceModal .form-select:focus,
  #generateWhatsAppInvoiceModal .form-control:focus {
    border-color: #25D366;
    box-shadow: 0 0 0 0.2rem rgba(37, 211, 102, 0.25);
    outline: none;
  }

  #generateWhatsAppInvoiceModal .alert-info {
    background: linear-gradient(135deg, rgba(37, 211, 102, 0.1) 0%, rgba(18, 140, 126, 0.1) 100%);
    border: 1px solid rgba(37, 211, 102, 0.2);
    color: #128C7E;
    border-radius: 12px;
    padding: 1rem;
  }

  #generateWhatsAppInvoiceModal .btn-success {
    background: linear-gradient(135deg, #25D366 0%, #128C7E 100%);
    border: none;
    border-radius: 12px;
    padding: 0.75rem 1.5rem;
    font-weight: 600;
    transition: all 0.3s ease;
    color: white;
  }

  #generateWhatsAppInvoiceModal .btn-success:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3);
  }

  #generateWhatsAppInvoiceModal .btn-info {
    background: linear-gradient(135deg, #06b6d4 0%, #0891b2 100%);
    border: none;
    border-radius: 12px;
    padding: 0.75rem 1.5rem;
    font-weight: 600;
    transition: all 0.3s ease;
    color: white;
  }

  #generateWhatsAppInvoiceModal .btn-info:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(6, 182, 212, 0.3);
  }

  #generateWhatsAppInvoiceModal .btn-secondary {
    border-radius: 12px;
    padding: 0.75rem 1.5rem;
    font-weight: 600;
    transition: all 0.3s ease;
  }

  /* Responsive adjustments for WhatsApp modal */
  @media (max-width: 768px) {
    #generateWhatsAppInvoiceModal.custom-modal {
      padding: 20px;
    }

    #generateWhatsAppInvoiceModal .custom-modal-content {
      margin: 0;
      max-width: 100%;
      border-radius: 15px;
    }

    #generateWhatsAppInvoiceModal .custom-modal-header {
      padding: 1rem 1.5rem;
      border-radius: 15px 15px 0 0;
    }

    #generateWhatsAppInvoiceModal .custom-modal-body {
      padding: 1.5rem;
    }

    #generateWhatsAppInvoiceModal .custom-modal-footer {
      padding: 1rem 1.5rem;
      border-radius: 0 0 15px 15px;
    }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const deliveryPersonSelect = document.getElementById('modal-delivery-person-select');
  const customerSelect = document.getElementById('modal-customer-select');
  
  // Store original customer options
  const originalCustomerOptions = Array.from(customerSelect.options);
  
  // Add search functionality to delivery person dropdown
  function addSearchToDeliveryPerson() {
    const searchInput = document.createElement('input');
    searchInput.type = 'text';
    searchInput.className = 'form-control mb-2';
    searchInput.placeholder = 'Search delivery persons...';
    searchInput.id = 'delivery-person-search';
    
    deliveryPersonSelect.parentNode.insertBefore(searchInput, deliveryPersonSelect);
    
    searchInput.addEventListener('input', function() {
      const searchTerm = this.value.toLowerCase();
      const options = deliveryPersonSelect.options;
      
      for (let i = 0; i < options.length; i++) {
        const option = options[i];
        const text = option.text.toLowerCase();
        option.style.display = text.includes(searchTerm) ? '' : 'none';
      }
    });
  }
  
  // Add search functionality to customer dropdown
  function addSearchToCustomer() {
    const searchInput = document.createElement('input');
    searchInput.type = 'text';
    searchInput.className = 'form-control mb-2';
    searchInput.placeholder = 'Search customers...';
    searchInput.id = 'customer-search';
    
    customerSelect.parentNode.insertBefore(searchInput, customerSelect);
    
    searchInput.addEventListener('input', function() {
      const searchTerm = this.value.toLowerCase();
      const options = customerSelect.options;
      
      for (let i = 0; i < options.length; i++) {
        const option = options[i];
        const text = option.text.toLowerCase();
        option.style.display = text.includes(searchTerm) ? '' : 'none';
      }
    });
  }
  
  // Filter customers based on selected delivery person
  function filterCustomersByDeliveryPerson() {
    const selectedDeliveryPersonId = deliveryPersonSelect.value;
    
    // Clear current options except "All Customers"
    customerSelect.innerHTML = '<option value="all" selected>All Customers</option>';
    
    // Filter and add relevant customers
    originalCustomerOptions.forEach(option => {
      if (option.value === 'all') return; // Skip the "All Customers" option
      
      const customerDeliveryPersonId = option.getAttribute('data-delivery-person');
      
      if (selectedDeliveryPersonId === 'all' || 
          selectedDeliveryPersonId === customerDeliveryPersonId) {
        customerSelect.appendChild(option.cloneNode(true));
      }
    });
  }
  
  // Handle delivery person selection change
  deliveryPersonSelect.addEventListener('change', function() {
    filterCustomersByDeliveryPerson();
    
    // Clear customer search when delivery person changes
    const customerSearchInput = document.getElementById('customer-search');
    if (customerSearchInput) {
      customerSearchInput.value = '';
    }
  });
  
  // Handle customer selection
  customerSelect.addEventListener('change', function() {
    const allOption = customerSelect.querySelector('option[value="all"]');
    const otherOptions = Array.from(customerSelect.options).filter(opt => opt.value !== 'all');
    
    // If "All Customers" is selected, deselect others
    if (allOption && allOption.selected && customerSelect.selectedOptions.length > 1) {
      otherOptions.forEach(opt => opt.selected = false);
    }
    
    // If any specific customer is selected, deselect "All Customers"
    if (otherOptions.some(opt => opt.selected) && allOption) {
      allOption.selected = false;
    }
    
    // If nothing is selected, select "All Customers"
    if (customerSelect.selectedOptions.length === 0 && allOption) {
      allOption.selected = true;
    }
  });
  
  // Initialize search functionality when modal opens
  document.getElementById('generateMonthlyModal').addEventListener('shown.bs.modal', function() {
    // Remove existing search inputs if any
    const existingDeliverySearch = document.getElementById('delivery-person-search');
    const existingCustomerSearch = document.getElementById('customer-search');
    
    if (existingDeliverySearch) existingDeliverySearch.remove();
    if (existingCustomerSearch) existingCustomerSearch.remove();
    
    // Add search functionality
    addSearchToDeliveryPerson();
    addSearchToCustomer();
    
    // Reset selections
    deliveryPersonSelect.value = 'all';
    filterCustomersByDeliveryPerson();
  });
  
  // Clean up when modal closes
  document.getElementById('generateMonthlyModal').addEventListener('hidden.bs.modal', function() {
    const deliverySearch = document.getElementById('delivery-person-search');
    const customerSearch = document.getElementById('customer-search');
    
    if (deliverySearch) deliverySearch.remove();
    if (customerSearch) customerSearch.remove();
  });
});
</script>

<!-- Share Invoice via WhatsApp Modal -->
<div class="modal fade" id="shareWhatsAppModal" tabindex="-1" aria-labelledby="shareWhatsAppModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="shareWhatsAppModalLabel">
          <i class="fab fa-whatsapp me-2"></i>Share Invoice via WhatsApp
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="row g-3">
          <div class="col-12">
            <label for="customerPhoneNumber" class="form-label">Customer Phone Number</label>
            <input type="text" 
                   class="form-control" 
                   id="customerPhoneNumber" 
                   placeholder="Enter phone number with country code (e.g., +919844145993)"
                   maxlength="15">
            <div class="form-text">Enter the phone number with country code (e.g., +919876543210)</div>
          </div>
          
          <div class="col-12">
            <label for="messagePreview" class="form-label">Message Preview</label>
            <div class="message-preview-container">
              <div class="message-preview" id="messagePreview">
                <div class="message-header">Hi! 👋</div>
                <div class="message-body">
                  <p>Your invoice has been generated:</p>
                  <p>📄 Invoice #<span id="previewInvoiceNumber">INV-000006</span></p>
                  <p>💰 Amount: ₹<span id="previewAmount">2,300.0</span></p>
                  <p>📅 Date: <span id="previewDate">1 August 2025</span></p>
                  <p>Download your invoice PDF: [Secure PDF link will be generated]</p>
                </div>
                <div class="message-footer">
                  <p>Thank you for your business! 🙏</p>
                  <p>- Atma Nirbhar Farm</p>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="alert alert-info mt-3" id="howItWorks">
          <div class="d-flex align-items-start">
            <i class="fas fa-info-circle me-2 mt-1"></i>
            <div>
              <strong>How it works:</strong> We'll generate a secure link to your invoice and create a WhatsApp message. When you click "Send via WhatsApp", WhatsApp will open with the pre-filled message ready to send.
            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button"
                class="btn btn-success"
                id="sendWhatsAppBtn"
                disabled>
          <i class="fab fa-whatsapp me-2"></i>Send via WhatsApp
        </button>
      </div>
    </div>
  </div>
</div>

    </div>
  </div>
</div>