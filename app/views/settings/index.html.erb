<div class="settings-container">
  <h2>Account Settings</h2>
  
  <!-- Timezone Settings Section -->
  <div class="settings-section">
    <h3>Timezone Settings</h3>
    <div class="timezone-selector">
      <label for="timezone">Select your timezone:</label>
      <select id="timezone" name="timezone" class="form-control">
        <option value="">Loading timezones...</option>
      </select>
      <button id="update-timezone-btn" class="btn btn-primary" onclick="updateTimezone()">
        Update Timezone
      </button>
    </div>
    <div id="current-time" class="current-time-display">
      <!-- Current time will be displayed here -->
    </div>
  </div>

  <!-- Profile Settings Section -->
  <div class="settings-section">
    <h3>Profile Information</h3>
    <form id="profile-form">
      <div class="form-group">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" class="form-control" />
      </div>
      <div class="form-group">
        <label for="phone">Phone:</label>
        <input type="text" id="phone" name="phone" class="form-control" />
      </div>
      <button type="button" id="update-profile-btn" class="btn btn-primary" onclick="updateProfile()">
        Update Profile
      </button>
    </form>
  </div>

  <!-- Account Deletion Section -->
  <div class="settings-section danger-section">
    <h3>Danger Zone</h3>
    <div class="account-deletion">
      <p class="warning-text">
        <strong>Warning:</strong> This action cannot be undone. Your account will be permanently deactivated.
      </p>
      <button id="delete-account-btn" class="btn btn-danger" onclick="showDeleteConfirmation()">
        Delete My Account
      </button>
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div id="delete-modal" class="modal" style="display: none;">
    <div class="modal-content">
      <h4>Confirm Account Deletion</h4>
      <p>Please enter your password to confirm account deletion:</p>
      <input type="password" id="confirm-password" placeholder="Enter your password" class="form-control" />
      <div class="modal-buttons">
        <button class="btn btn-secondary" onclick="hideDeleteConfirmation()">Cancel</button>
        <button class="btn btn-danger" onclick="confirmDeleteAccount()">Delete Account</button>
      </div>
    </div>
  </div>
</div>

<style>
  .settings-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
  }

  .settings-section {
    margin-bottom: 40px;
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
  }

  .danger-section {
    border-color: #dc3545;
    background-color: #f8f9fa;
  }

  .form-group {
    margin-bottom: 15px;
  }

  .form-control {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 14px;
  }

  .btn {
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    margin-right: 10px;
  }

  .btn-primary {
    background-color: #007bff;
    color: white;
  }

  .btn-secondary {
    background-color: #6c757d;
    color: white;
  }

  .btn-danger {
    background-color: #dc3545;
    color: white;
  }

  .btn:hover {
    opacity: 0.9;
  }

  .current-time-display {
    margin-top: 10px;
    padding: 10px;
    background-color: #e9ecef;
    border-radius: 4px;
    font-family: monospace;
  }

  .warning-text {
    color: #721c24;
    background-color: #f5c6cb;
    padding: 10px;
    border-radius: 4px;
    margin-bottom: 15px;
  }

  .modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
  }

  .modal-content {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: white;
    padding: 30px;
    border-radius: 8px;
    max-width: 400px;
    width: 90%;
  }

  .modal-buttons {
    margin-top: 20px;
    text-align: right;
  }

  .timezone-selector {
    display: flex;
    align-items: center;
    gap: 10px;
    flex-wrap: wrap;
  }

  .timezone-selector select {
    flex: 1;
    min-width: 200px;
  }

  @media (max-width: 600px) {
    .timezone-selector {
      flex-direction: column;
      align-items: stretch;
    }

    .timezone-selector select {
      min-width: auto;
    }
  }
</style>

<script>
// Load settings data on page load
document.addEventListener('DOMContentLoaded', function() {
  loadTimezones();
  loadProfile();
  updateCurrentTime();
  
  // Update current time every minute
  setInterval(updateCurrentTime, 60000);
});

function loadTimezones() {
  fetch('/api/settings/timezones', {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
    },
    credentials: 'include'
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      const select = document.getElementById('timezone');
      select.innerHTML = '';
      
      data.data.timezones.forEach(tz => {
        const option = document.createElement('option');
        option.value = tz.value;
        option.textContent = `${tz.label} (${tz.offset})`;
        
        if (tz.value === data.data.current_timezone) {
          option.selected = true;
        }
        
        select.appendChild(option);
      });
    } else {
      console.error('Failed to load timezones:', data.error);
    }
  })
  .catch(error => {
    console.error('Error loading timezones:', error);
  });
}

function loadProfile() {
  fetch('/api/settings/profile', {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
    },
    credentials: 'include'
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      document.getElementById('name').value = data.data.name;
      document.getElementById('phone').value = data.data.phone;
    } else {
      console.error('Failed to load profile:', data.error);
    }
  })
  .catch(error => {
    console.error('Error loading profile:', error);
  });
}

function updateCurrentTime() {
  fetch('/api/settings/timezone', {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
    },
    credentials: 'include'
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      document.getElementById('current-time').innerHTML = 
        `<strong>Current time in your timezone:</strong> ${data.data.current_time}`;
    }
  })
  .catch(error => {
    console.error('Error updating current time:', error);
  });
}

function updateTimezone() {
  const timezone = document.getElementById('timezone').value;
  
  if (!timezone) {
    alert('Please select a timezone');
    return;
  }

  const btn = document.getElementById('update-timezone-btn');
  btn.disabled = true;
  btn.textContent = 'Updating...';
  
  fetch('/api/settings/timezone', {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    credentials: 'include',
    body: JSON.stringify({ timezone: timezone })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      alert('Timezone updated successfully!');
      updateCurrentTime();
    } else {
      alert('Error: ' + data.error);
    }
  })
  .catch(error => {
    console.error('Error updating timezone:', error);
    alert('Failed to update timezone. Please try again.');
  })
  .finally(() => {
    btn.disabled = false;
    btn.textContent = 'Update Timezone';
  });
}

function updateProfile() {
  const name = document.getElementById('name').value;
  const phone = document.getElementById('phone').value;
  const timezone = document.getElementById('timezone').value;

  if (!name.trim()) {
    alert('Name is required');
    return;
  }

  if (!phone.trim()) {
    alert('Phone is required');
    return;
  }

  const btn = document.getElementById('update-profile-btn');
  btn.disabled = true;
  btn.textContent = 'Updating...';
  
  fetch('/api/settings/profile', {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    credentials: 'include',
    body: JSON.stringify({
      user: {
        name: name,
        phone: phone,
        timezone: timezone
      }
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      alert('Profile updated successfully!');
    } else {
      alert('Error: ' + (data.errors ? data.errors.join(', ') : data.error));
    }
  })
  .catch(error => {
    console.error('Error updating profile:', error);
    alert('Failed to update profile. Please try again.');
  })
  .finally(() => {
    btn.disabled = false;
    btn.textContent = 'Update Profile';
  });
}

function showDeleteConfirmation() {
  document.getElementById('delete-modal').style.display = 'block';
  document.getElementById('confirm-password').focus();
}

function hideDeleteConfirmation() {
  document.getElementById('delete-modal').style.display = 'none';
  document.getElementById('confirm-password').value = '';
}

function confirmDeleteAccount() {
  const password = document.getElementById('confirm-password').value;
  
  if (!password.trim()) {
    alert('Please enter your password');
    return;
  }

  if (!confirm('Are you absolutely sure you want to delete your account? This action cannot be undone.')) {
    return;
  }
  
  fetch('/api/settings/account', {
    method: 'DELETE',
    headers: {
      'Content-Type': 'application/json',
    },
    credentials: 'include',
    body: JSON.stringify({ password: password })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      alert(data.message);
      window.location.href = '/login';
    } else {
      alert('Error: ' + data.error);
    }
  })
  .catch(error => {
    console.error('Error deleting account:', error);
    alert('Failed to delete account. Please try again.');
  })
  .finally(() => {
    hideDeleteConfirmation();
  });
}

// Handle Enter key in password field
document.addEventListener('keydown', function(event) {
  if (event.key === 'Enter' && document.getElementById('delete-modal').style.display === 'block') {
    confirmDeleteAccount();
  }
});
</script>