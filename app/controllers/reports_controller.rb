# app/controllers/reports_controller.rb
class ReportsController < ApplicationController
  before_action :require_login
  
  def index
    @reports = Report.where(user: current_user).order(created_at: :desc) if defined?(Report)
    @reports ||= []
  end
  
  def generate_gst_report
    from_date = params[:from_date]
    to_date = params[:to_date]
    
    if from_date.blank? || to_date.blank?
      render json: { 
        success: false, 
        message: "Please select both from and to dates" 
      }
      return
    end
    
    begin
      # Create a new report record
      report = create_report_record(from_date, to_date)
      
      render json: { 
        success: true, 
        message: "GST Report generated successfully",
        report: {
          id: report.id,
          name: report.name,
          generated_at: report.created_at.strftime("%B %d, %Y at %I:%M %p"),
          from_date: from_date,
          to_date: to_date
        }
      }
    rescue => e
      render json: { 
        success: false, 
        message: "Failed to generate report: #{e.message}" 
      }
    end
  end
  
  def download_pdf
    report = find_report
    
    if report.nil?
      redirect_to reports_path, alert: "Report not found"
      return
    end
    
    # Generate PDF content
    pdf_content = generate_gst_pdf_content(report)
    
    respond_to do |format|
      format.pdf do
        send_data pdf_content,
                  filename: "#{report.name.parameterize}.pdf",
                  type: 'application/pdf',
                  disposition: 'attachment'
      end
    end
  end
  
  private
  
  def find_report
    if defined?(Report)
      Report.find_by(id: params[:id], user: current_user)
    else
      # Fallback for demo purposes
      OpenStruct.new(
        id: params[:id],
        name: "GST Report #{params[:id]}",
        from_date: 1.month.ago.to_date,
        to_date: Date.current,
        created_at: Time.current
      )
    end
  end
  
  def create_report_record(from_date, to_date)
    if defined?(Report)
      Report.create!(
        name: "GST Report - #{Date.parse(from_date).strftime('%b %d')} to #{Date.parse(to_date).strftime('%b %d, %Y')}",
        report_type: 'gst',
        from_date: Date.parse(from_date),
        to_date: Date.parse(to_date),
        user: current_user
      )
    else
      # Fallback for demo purposes
      OpenStruct.new(
        id: rand(1000..9999),
        name: "GST Report - #{Date.parse(from_date).strftime('%b %d')} to #{Date.parse(to_date).strftime('%b %d, %Y')}",
        report_type: 'gst',
        from_date: Date.parse(from_date),
        to_date: Date.parse(to_date),
        created_at: Time.current,
        user: current_user
      )
    end
  end
  
  def generate_gst_pdf_content(report)
    # Generate HTML content for PDF
    html_content = generate_gst_report_html(report)
    
    # In a real application, you would use a PDF library like Prawn or WickedPDF
    # For this demo, we'll create a simple PDF-like content
    pdf_header = "%PDF-1.4\n"
    pdf_content = <<~PDF
      #{pdf_header}
      1 0 obj
      <<
      /Type /Catalog
      /Pages 2 0 R
      >>
      endobj
      
      2 0 obj
      <<
      /Type /Pages
      /Kids [3 0 R]
      /Count 1
      >>
      endobj
      
      3 0 obj
      <<
      /Type /Page
      /Parent 2 0 R
      /MediaBox [0 0 612 792]
      /Contents 4 0 R
      >>
      endobj
      
      4 0 obj
      <<
      /Length #{html_content.length}
      >>
      stream
      #{html_content}
      endstream
      endobj
      
      xref
      0 5
      0000000000 65535 f 
      0000000009 00000 n 
      0000000074 00000 n 
      0000000120 00000 n 
      0000000179 00000 n 
      trailer
      <<
      /Size 5
      /Root 1 0 R
      >>
      startxref
      #{pdf_content.length - 50}
      %%EOF
    PDF
    
    pdf_content
  end
  
  def generate_gst_report_html(report)
    # Generate GST report content based on the date range
    from_date = report.respond_to?(:from_date) ? report.from_date : Date.parse(params[:from_date] || 1.month.ago.to_s)
    to_date = report.respond_to?(:to_date) ? report.to_date : Date.parse(params[:to_date] || Date.current.to_s)
    
    # In a real application, you would query actual GST data from your database
    # For this demo, we'll create sample content
    <<~HTML
      GST REPORT
      ==========
      
      Report Name: #{report.respond_to?(:name) ? report.name : "GST Report"}
      Date Range: #{from_date.strftime('%B %d, %Y')} to #{to_date.strftime('%B %d, %Y')}
      Generated On: #{Time.current.strftime('%B %d, %Y at %I:%M %p')}
      Generated By: #{current_user.name}
      
      SUMMARY
      -------
      Total Sales: ₹0.00
      Total Tax Collected: ₹0.00
      Total Purchases: ₹0.00
      Total Tax Paid: ₹0.00
      Net Tax Liability: ₹0.00
      
      SALES TRANSACTIONS
      ------------------
      No sales transactions found for the selected period.
      
      PURCHASE TRANSACTIONS
      ---------------------
      No purchase transactions found for the selected period.
      
      TAX SUMMARY
      -----------
      CGST: ₹0.00
      SGST: ₹0.00
      IGST: ₹0.00
      
      Note: This is a sample report. In a production environment, 
      this would contain actual GST data from your invoices and transactions.
      
      ---
      Report generated by Atmanirbhar Farm Bangalore
      #{Time.current.strftime('%B %d, %Y at %I:%M %p')}
    HTML
  end
end