class ContractsController < ApplicationController
  before_action :authenticate_user!
  before_action :set_contract, only: [:show, :edit, :update, :destroy, :download_pdf]

  def index
    @contracts = Contract.all.order(created_at: :desc)
  end

  def show
  end

  def new
    @contract = Contract.new
  end

  def create
    @contract = Contract.new(contract_params)
    
    if @contract.save
      redirect_to @contract, notice: 'Contract was successfully created.'
    else
      render :new
    end
  end

  def edit
  end

  def update
    if @contract.update(contract_params)
      redirect_to @contract, notice: 'Contract was successfully updated.'
    else
      render :edit
    end
  end

  def destroy
    @contract.destroy
    redirect_to contracts_url, notice: 'Contract was successfully deleted.'
  end

  def ai_generator
    @contract = Contract.new
  end

  def generate_ai_contract
    description = params[:description]
    
    # AI contract generation logic would go here
    # For now, we'll create a sample contract
    generated_content = generate_contract_content(description)
    
    @contract = Contract.new(
      name: "AI Generated Contract",
      content: generated_content,
      status: 'draft'
    )
    
    if @contract.save
      render json: { success: true, contract: @contract, redirect_url: contract_path(@contract) }
    else
      render json: { success: false, errors: @contract.errors }
    end
  end

  def download_pdf
    require 'prawn'
    require 'prawn/measurement_extensions'
    
    pdf = Prawn::Document.new
    
    # Add watermark
    add_watermark_to_pdf(pdf)
    
    # Add contract content
    pdf.text "Contract: #{@contract.name}", size: 24, style: :bold
    pdf.move_down 20
    pdf.text "Status: #{@contract.status.capitalize}", size: 14
    pdf.move_down 20
    pdf.text @contract.content, size: 12
    
    send_data pdf.render, filename: "#{@contract.name.parameterize}.pdf", type: 'application/pdf'
  end

  private

  def set_contract
    @contract = Contract.find(params[:id])
  end

  def contract_params
    params.require(:contract).permit(:name, :content, :status)
  end

  def generate_contract_content(description)
    # This is a placeholder for AI generation
    # In a real implementation, you would integrate with an AI service
    "
SERVICE AGREEMENT

This Service Agreement (\"Agreement\") is entered into between the parties as described below.

DESCRIPTION OF SERVICES:
#{description}

TERMS AND CONDITIONS:
1. The service provider agrees to deliver the services as described above.
2. Payment terms to be negotiated separately.
3. This agreement shall be governed by applicable laws.
4. Any disputes shall be resolved through mutual consultation.

DELIVERABLES:
- Services as described in the description
- Regular progress updates
- Final delivery upon completion

PAYMENT TERMS:
- Payment schedule to be agreed upon
- Late payment charges may apply
- All payments are non-refundable unless otherwise specified

This contract is generated by AI and should be reviewed by legal counsel before execution.

Date: #{Date.current.strftime('%B %d, %Y')}
    "
  end

  def add_watermark_to_pdf(pdf)
    pdf.transparent(0.1) do
      pdf.rotate(45, origin: [200, 400]) do
        pdf.text_box "MARKTNCER", 
          at: [0, 0], 
          size: 60, 
          style: :bold,
          color: 'CCCCCC'
      end
    end
  end
end