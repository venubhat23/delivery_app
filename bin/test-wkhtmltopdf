#!/usr/bin/env ruby

# Test script for wkhtmltopdf configuration
# Run this to verify that wkhtmltopdf is properly configured

require 'bundler/setup'
require_relative '../config/environment'

puts "=== wkhtmltopdf Configuration Test ==="
puts

# Test 1: Check WickedPdf configuration
puts "1. WickedPdf Configuration:"
puts "   exe_path: #{WickedPdf.config[:exe_path] || 'auto-detect'}"
puts "   use_xvfb: #{WickedPdf.config[:use_xvfb]}"
puts

# Test 2: Check if configured path exists and is executable
if WickedPdf.config[:exe_path]
  puts "2. Configured Binary Check:"
  puts "   Path: #{WickedPdf.config[:exe_path]}"
  puts "   Exists: #{File.exist?(WickedPdf.config[:exe_path])}"
  puts "   Executable: #{File.executable?(WickedPdf.config[:exe_path])}"
  
  if File.executable?(WickedPdf.config[:exe_path])
    puts "   Version: #{`#{WickedPdf.config[:exe_path]} --version 2>/dev/null`.strip}"
  end
else
  puts "2. No specific path configured, using auto-detection"
end
puts

# Test 3: Check system wkhtmltopdf
puts "3. System wkhtmltopdf:"
system_path = `which wkhtmltopdf 2>/dev/null`.strip
if system_path.empty?
  puts "   Not found in PATH"
else
  puts "   Path: #{system_path}"
  puts "   Version: #{`#{system_path} --version 2>/dev/null`.strip}"
end
puts

# Test 4: Check gem-provided wkhtmltopdf
puts "4. Gem-provided wkhtmltopdf:"
begin
  gem_path = Gem.bin_path('wkhtmltopdf-binary', 'wkhtmltopdf')
  puts "   Path: #{gem_path}"
  puts "   Exists: #{File.exist?(gem_path)}"
  puts "   Executable: #{File.executable?(gem_path)}"
  
  if File.executable?(gem_path)
    puts "   Version: #{`#{gem_path} --version 2>/dev/null`.strip}"
  end
rescue Gem::GemNotFoundException
  puts "   wkhtmltopdf-binary gem not found"
end
puts

# Test 5: Try to generate a simple PDF
puts "5. PDF Generation Test:"
begin
  html_content = "<html><body><h1>Test PDF</h1><p>This is a test PDF generated by wkhtmltopdf.</p></body></html>"
  
  # Use WickedPdf to generate PDF
  pdf = WickedPdf.new.pdf_from_string(
    html_content,
    page_size: 'A4',
    margin: { top: 10, bottom: 10, left: 10, right: 10 }
  )
  
  if pdf && pdf.length > 0
    puts "   ✅ SUCCESS: PDF generated successfully (#{pdf.length} bytes)"
    
    # Optionally save test PDF
    test_file = Rails.root.join('tmp', 'wkhtmltopdf_test.pdf')
    File.write(test_file, pdf)
    puts "   Test PDF saved to: #{test_file}"
  else
    puts "   ❌ FAILED: PDF generation returned empty result"
  end
rescue => e
  puts "   ❌ FAILED: #{e.message}"
  puts "   Error class: #{e.class}"
end

puts
puts "=== Test Complete ==="